// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "float_div2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic float_div2::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> float_div2::ap_const_lv32_1F = "11111";
const sc_lv<32> float_div2::ap_const_lv32_17 = "10111";
const sc_lv<32> float_div2::ap_const_lv32_1E = "11110";
const sc_lv<8> float_div2::ap_const_lv8_1 = "1";
const sc_lv<23> float_div2::ap_const_lv23_7FFFFF = "11111111111111111111111";
const sc_lv<8> float_div2::ap_const_lv8_FF = "11111111";
const sc_lv<8> float_div2::ap_const_lv8_0 = "00000000";
const sc_lv<32> float_div2::ap_const_lv32_18 = "11000";
const sc_lv<7> float_div2::ap_const_lv7_0 = "0000000";
const sc_lv<32> float_div2::ap_const_lv32_1 = "1";
const sc_lv<32> float_div2::ap_const_lv32_16 = "10110";
const sc_lv<23> float_div2::ap_const_lv23_1 = "1";
const sc_lv<1> float_div2::ap_const_lv1_1 = "1";
const sc_logic float_div2::ap_const_logic_0 = sc_dt::Log_0;
const bool float_div2::ap_const_boolean_1 = true;

float_div2::float_div2(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_start );
    sensitive << ( p_Result_s_fu_270_p4 );

    SC_METHOD(thread_icmp_fu_172_p2);
    sensitive << ( ap_start );
    sensitive << ( tmp_5_fu_162_p4 );

    SC_METHOD(thread_new_exp_V_1_fu_102_p2);
    sensitive << ( new_exp_V_4_fu_70_p4 );

    SC_METHOD(thread_new_exp_V_2_fu_132_p3);
    sensitive << ( new_exp_V_4_fu_70_p4 );
    sensitive << ( sel_tmp3_fu_126_p2 );
    sensitive << ( new_exp_V_1_fu_102_p2 );

    SC_METHOD(thread_new_exp_V_3_fu_140_p3);
    sensitive << ( new_exp_V_4_fu_70_p4 );
    sensitive << ( tmp_fu_96_p2 );
    sensitive << ( new_exp_V_2_fu_132_p3 );

    SC_METHOD(thread_new_exp_V_4_fu_70_p4);
    sensitive << ( p_Val2_s_fu_58_p1 );

    SC_METHOD(thread_new_exp_V_fu_148_p3);
    sensitive << ( new_exp_V_4_fu_70_p4 );
    sensitive << ( sel_tmp3_fu_126_p2 );
    sensitive << ( new_exp_V_3_fu_140_p3 );

    SC_METHOD(thread_new_mant_V_2_fu_216_p3);
    sensitive << ( r_V_2_fu_188_p1 );
    sensitive << ( tmp_1_fu_204_p2 );
    sensitive << ( new_mant_V_fu_210_p2 );

    SC_METHOD(thread_new_mant_V_5_fu_252_p4);
    sensitive << ( new_mant_V_7_fu_224_p3 );
    sensitive << ( not_sel_tmp_fu_246_p2 );

    SC_METHOD(thread_new_mant_V_7_fu_224_p3);
    sensitive << ( p_Val2_1_fu_80_p1 );
    sensitive << ( icmp_fu_172_p2 );
    sensitive << ( new_mant_V_2_fu_216_p3 );

    SC_METHOD(thread_new_mant_V_8_fu_262_p3);
    sensitive << ( new_mant_V_7_fu_224_p3 );
    sensitive << ( tmp_s_fu_156_p2 );
    sensitive << ( new_mant_V_5_fu_252_p4 );

    SC_METHOD(thread_new_mant_V_fu_210_p2);
    sensitive << ( r_V_2_fu_188_p1 );

    SC_METHOD(thread_not_sel_tmp_fu_246_p2);
    sensitive << ( sel_tmp4_fu_240_p2 );

    SC_METHOD(thread_p_Repl2_2_fu_62_p3);
    sensitive << ( p_Val2_s_fu_58_p1 );

    SC_METHOD(thread_p_Result_s_fu_270_p4);
    sensitive << ( p_Repl2_2_fu_62_p3 );
    sensitive << ( new_exp_V_fu_148_p3 );
    sensitive << ( new_mant_V_8_fu_262_p3 );

    SC_METHOD(thread_p_Val2_1_fu_80_p1);
    sensitive << ( p_Val2_s_fu_58_p1 );

    SC_METHOD(thread_p_Val2_s_fu_58_p1);
    sensitive << ( in_r );

    SC_METHOD(thread_r_V_2_fu_188_p1);
    sensitive << ( r_V_fu_178_p4 );

    SC_METHOD(thread_r_V_fu_178_p4);
    sensitive << ( p_Val2_s_fu_58_p1 );

    SC_METHOD(thread_sel_tmp1_fu_114_p2);
    sensitive << ( ap_start );
    sensitive << ( new_exp_V_4_fu_70_p4 );

    SC_METHOD(thread_sel_tmp2_fu_120_p2);
    sensitive << ( sel_tmp_fu_108_p2 );
    sensitive << ( sel_tmp1_fu_114_p2 );

    SC_METHOD(thread_sel_tmp3_fu_126_p2);
    sensitive << ( sel_tmp2_fu_120_p2 );
    sensitive << ( tmp_fu_96_p2 );

    SC_METHOD(thread_sel_tmp4_fu_240_p2);
    sensitive << ( tmp_s_fu_156_p2 );
    sensitive << ( tmp_9_fu_232_p3 );

    SC_METHOD(thread_sel_tmp_fu_108_p2);
    sensitive << ( ap_start );
    sensitive << ( new_exp_V_4_fu_70_p4 );

    SC_METHOD(thread_tmp_1_fu_204_p2);
    sensitive << ( tmp_7_fu_192_p1 );
    sensitive << ( tmp_8_fu_196_p3 );

    SC_METHOD(thread_tmp_4_fu_84_p2);
    sensitive << ( ap_start );
    sensitive << ( new_exp_V_4_fu_70_p4 );

    SC_METHOD(thread_tmp_5_fu_162_p4);
    sensitive << ( p_Val2_s_fu_58_p1 );

    SC_METHOD(thread_tmp_6_fu_90_p2);
    sensitive << ( ap_start );
    sensitive << ( p_Val2_1_fu_80_p1 );

    SC_METHOD(thread_tmp_7_fu_192_p1);
    sensitive << ( p_Val2_s_fu_58_p1 );

    SC_METHOD(thread_tmp_8_fu_196_p3);
    sensitive << ( p_Val2_s_fu_58_p1 );

    SC_METHOD(thread_tmp_9_fu_232_p3);
    sensitive << ( new_mant_V_7_fu_224_p3 );

    SC_METHOD(thread_tmp_fu_96_p2);
    sensitive << ( tmp_6_fu_90_p2 );
    sensitive << ( tmp_4_fu_84_p2 );

    SC_METHOD(thread_tmp_s_fu_156_p2);
    sensitive << ( ap_start );
    sensitive << ( new_exp_V_4_fu_70_p4 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "float_div2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_r, "(port)in_r");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, p_Val2_s_fu_58_p1, "p_Val2_s_fu_58_p1");
    sc_trace(mVcdFile, new_exp_V_4_fu_70_p4, "new_exp_V_4_fu_70_p4");
    sc_trace(mVcdFile, p_Val2_1_fu_80_p1, "p_Val2_1_fu_80_p1");
    sc_trace(mVcdFile, tmp_6_fu_90_p2, "tmp_6_fu_90_p2");
    sc_trace(mVcdFile, tmp_4_fu_84_p2, "tmp_4_fu_84_p2");
    sc_trace(mVcdFile, sel_tmp_fu_108_p2, "sel_tmp_fu_108_p2");
    sc_trace(mVcdFile, sel_tmp1_fu_114_p2, "sel_tmp1_fu_114_p2");
    sc_trace(mVcdFile, sel_tmp2_fu_120_p2, "sel_tmp2_fu_120_p2");
    sc_trace(mVcdFile, tmp_fu_96_p2, "tmp_fu_96_p2");
    sc_trace(mVcdFile, sel_tmp3_fu_126_p2, "sel_tmp3_fu_126_p2");
    sc_trace(mVcdFile, new_exp_V_1_fu_102_p2, "new_exp_V_1_fu_102_p2");
    sc_trace(mVcdFile, new_exp_V_2_fu_132_p3, "new_exp_V_2_fu_132_p3");
    sc_trace(mVcdFile, new_exp_V_3_fu_140_p3, "new_exp_V_3_fu_140_p3");
    sc_trace(mVcdFile, tmp_5_fu_162_p4, "tmp_5_fu_162_p4");
    sc_trace(mVcdFile, r_V_fu_178_p4, "r_V_fu_178_p4");
    sc_trace(mVcdFile, tmp_7_fu_192_p1, "tmp_7_fu_192_p1");
    sc_trace(mVcdFile, tmp_8_fu_196_p3, "tmp_8_fu_196_p3");
    sc_trace(mVcdFile, r_V_2_fu_188_p1, "r_V_2_fu_188_p1");
    sc_trace(mVcdFile, tmp_1_fu_204_p2, "tmp_1_fu_204_p2");
    sc_trace(mVcdFile, new_mant_V_fu_210_p2, "new_mant_V_fu_210_p2");
    sc_trace(mVcdFile, icmp_fu_172_p2, "icmp_fu_172_p2");
    sc_trace(mVcdFile, new_mant_V_2_fu_216_p3, "new_mant_V_2_fu_216_p3");
    sc_trace(mVcdFile, new_mant_V_7_fu_224_p3, "new_mant_V_7_fu_224_p3");
    sc_trace(mVcdFile, tmp_s_fu_156_p2, "tmp_s_fu_156_p2");
    sc_trace(mVcdFile, tmp_9_fu_232_p3, "tmp_9_fu_232_p3");
    sc_trace(mVcdFile, sel_tmp4_fu_240_p2, "sel_tmp4_fu_240_p2");
    sc_trace(mVcdFile, not_sel_tmp_fu_246_p2, "not_sel_tmp_fu_246_p2");
    sc_trace(mVcdFile, new_mant_V_5_fu_252_p4, "new_mant_V_5_fu_252_p4");
    sc_trace(mVcdFile, p_Repl2_2_fu_62_p3, "p_Repl2_2_fu_62_p3");
    sc_trace(mVcdFile, new_exp_V_fu_148_p3, "new_exp_V_fu_148_p3");
    sc_trace(mVcdFile, new_mant_V_8_fu_262_p3, "new_mant_V_8_fu_262_p3");
    sc_trace(mVcdFile, p_Result_s_fu_270_p4, "p_Result_s_fu_270_p4");
#endif

    }
    mHdltvinHandle.open("float_div2.hdltvin.dat");
    mHdltvoutHandle.open("float_div2.hdltvout.dat");
}

float_div2::~float_div2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void float_div2::thread_ap_done() {
    ap_done = ap_start.read();
}

void float_div2::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void float_div2::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void float_div2::thread_ap_return() {
    ap_return = p_Result_s_fu_270_p4.read();
}

void float_div2::thread_icmp_fu_172_p2() {
    icmp_fu_172_p2 = (!tmp_5_fu_162_p4.read().is_01() || !ap_const_lv7_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_5_fu_162_p4.read() == ap_const_lv7_0);
}

void float_div2::thread_new_exp_V_1_fu_102_p2() {
    new_exp_V_1_fu_102_p2 = (!ap_const_lv8_FF.is_01() || !new_exp_V_4_fu_70_p4.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_FF) + sc_biguint<8>(new_exp_V_4_fu_70_p4.read()));
}

void float_div2::thread_new_exp_V_2_fu_132_p3() {
    new_exp_V_2_fu_132_p3 = (!sel_tmp3_fu_126_p2.read()[0].is_01())? sc_lv<8>(): ((sel_tmp3_fu_126_p2.read()[0].to_bool())? new_exp_V_4_fu_70_p4.read(): new_exp_V_1_fu_102_p2.read());
}

void float_div2::thread_new_exp_V_3_fu_140_p3() {
    new_exp_V_3_fu_140_p3 = (!tmp_fu_96_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_fu_96_p2.read()[0].to_bool())? new_exp_V_2_fu_132_p3.read(): new_exp_V_4_fu_70_p4.read());
}

void float_div2::thread_new_exp_V_4_fu_70_p4() {
    new_exp_V_4_fu_70_p4 = p_Val2_s_fu_58_p1.read().range(30, 23);
}

void float_div2::thread_new_exp_V_fu_148_p3() {
    new_exp_V_fu_148_p3 = (!sel_tmp3_fu_126_p2.read()[0].is_01())? sc_lv<8>(): ((sel_tmp3_fu_126_p2.read()[0].to_bool())? new_exp_V_4_fu_70_p4.read(): new_exp_V_3_fu_140_p3.read());
}

void float_div2::thread_new_mant_V_2_fu_216_p3() {
    new_mant_V_2_fu_216_p3 = (!tmp_1_fu_204_p2.read()[0].is_01())? sc_lv<23>(): ((tmp_1_fu_204_p2.read()[0].to_bool())? new_mant_V_fu_210_p2.read(): r_V_2_fu_188_p1.read());
}

void float_div2::thread_new_mant_V_5_fu_252_p4() {
    new_mant_V_5_fu_252_p4 = esl_bitset<23,23,32,1>(new_mant_V_7_fu_224_p3.read(), ap_const_lv32_16, not_sel_tmp_fu_246_p2.read());
}

void float_div2::thread_new_mant_V_7_fu_224_p3() {
    new_mant_V_7_fu_224_p3 = (!icmp_fu_172_p2.read()[0].is_01())? sc_lv<23>(): ((icmp_fu_172_p2.read()[0].to_bool())? new_mant_V_2_fu_216_p3.read(): p_Val2_1_fu_80_p1.read());
}

void float_div2::thread_new_mant_V_8_fu_262_p3() {
    new_mant_V_8_fu_262_p3 = (!tmp_s_fu_156_p2.read()[0].is_01())? sc_lv<23>(): ((tmp_s_fu_156_p2.read()[0].to_bool())? new_mant_V_5_fu_252_p4.read(): new_mant_V_7_fu_224_p3.read());
}

void float_div2::thread_new_mant_V_fu_210_p2() {
    new_mant_V_fu_210_p2 = (!ap_const_lv23_1.is_01() || !r_V_2_fu_188_p1.read().is_01())? sc_lv<23>(): (sc_biguint<23>(ap_const_lv23_1) + sc_biguint<23>(r_V_2_fu_188_p1.read()));
}

void float_div2::thread_not_sel_tmp_fu_246_p2() {
    not_sel_tmp_fu_246_p2 = (sel_tmp4_fu_240_p2.read() ^ ap_const_lv1_1);
}

void float_div2::thread_p_Repl2_2_fu_62_p3() {
    p_Repl2_2_fu_62_p3 = p_Val2_s_fu_58_p1.read().range(31, 31);
}

void float_div2::thread_p_Result_s_fu_270_p4() {
    p_Result_s_fu_270_p4 = esl_concat<9,23>(esl_concat<1,8>(p_Repl2_2_fu_62_p3.read(), new_exp_V_fu_148_p3.read()), new_mant_V_8_fu_262_p3.read());
}

void float_div2::thread_p_Val2_1_fu_80_p1() {
    p_Val2_1_fu_80_p1 = p_Val2_s_fu_58_p1.read().range(23-1, 0);
}

void float_div2::thread_p_Val2_s_fu_58_p1() {
    p_Val2_s_fu_58_p1 = in_r.read();
}

void float_div2::thread_r_V_2_fu_188_p1() {
    r_V_2_fu_188_p1 = esl_zext<23,22>(r_V_fu_178_p4.read());
}

void float_div2::thread_r_V_fu_178_p4() {
    r_V_fu_178_p4 = p_Val2_s_fu_58_p1.read().range(22, 1);
}

void float_div2::thread_sel_tmp1_fu_114_p2() {
    sel_tmp1_fu_114_p2 = (!new_exp_V_4_fu_70_p4.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(new_exp_V_4_fu_70_p4.read() == ap_const_lv8_0);
}

void float_div2::thread_sel_tmp2_fu_120_p2() {
    sel_tmp2_fu_120_p2 = (sel_tmp_fu_108_p2.read() | sel_tmp1_fu_114_p2.read());
}

void float_div2::thread_sel_tmp3_fu_126_p2() {
    sel_tmp3_fu_126_p2 = (sel_tmp2_fu_120_p2.read() & tmp_fu_96_p2.read());
}

void float_div2::thread_sel_tmp4_fu_240_p2() {
    sel_tmp4_fu_240_p2 = (tmp_s_fu_156_p2.read() & tmp_9_fu_232_p3.read());
}

void float_div2::thread_sel_tmp_fu_108_p2() {
    sel_tmp_fu_108_p2 = (!new_exp_V_4_fu_70_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(new_exp_V_4_fu_70_p4.read() == ap_const_lv8_FF);
}

void float_div2::thread_tmp_1_fu_204_p2() {
    tmp_1_fu_204_p2 = (tmp_7_fu_192_p1.read() & tmp_8_fu_196_p3.read());
}

void float_div2::thread_tmp_4_fu_84_p2() {
    tmp_4_fu_84_p2 = (!new_exp_V_4_fu_70_p4.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<1>(): sc_lv<1>(new_exp_V_4_fu_70_p4.read() != ap_const_lv8_1);
}

void float_div2::thread_tmp_5_fu_162_p4() {
    tmp_5_fu_162_p4 = p_Val2_s_fu_58_p1.read().range(30, 24);
}

void float_div2::thread_tmp_6_fu_90_p2() {
    tmp_6_fu_90_p2 = (!p_Val2_1_fu_80_p1.read().is_01() || !ap_const_lv23_7FFFFF.is_01())? sc_lv<1>(): sc_lv<1>(p_Val2_1_fu_80_p1.read() != ap_const_lv23_7FFFFF);
}

void float_div2::thread_tmp_7_fu_192_p1() {
    tmp_7_fu_192_p1 = p_Val2_s_fu_58_p1.read().range(1-1, 0);
}

void float_div2::thread_tmp_8_fu_196_p3() {
    tmp_8_fu_196_p3 = p_Val2_s_fu_58_p1.read().range(1, 1);
}

void float_div2::thread_tmp_9_fu_232_p3() {
    tmp_9_fu_232_p3 = new_mant_V_7_fu_224_p3.read().range(22, 22);
}

void float_div2::thread_tmp_fu_96_p2() {
    tmp_fu_96_p2 = (tmp_6_fu_90_p2.read() | tmp_4_fu_84_p2.read());
}

void float_div2::thread_tmp_s_fu_156_p2() {
    tmp_s_fu_156_p2 = (!new_exp_V_4_fu_70_p4.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<1>(): sc_lv<1>(new_exp_V_4_fu_70_p4.read() == ap_const_lv8_1);
}

void float_div2::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r\" :  \"" << in_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

