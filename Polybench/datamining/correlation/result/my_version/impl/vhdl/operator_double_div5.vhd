-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity operator_double_div5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of operator_double_div5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv6_11 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv56_2 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv56_0 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv6_37 : STD_LOGIC_VECTOR (5 downto 0) := "110111";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv56_FFFFFFFFFFFFFF : STD_LOGIC_VECTOR (55 downto 0) := "11111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal r0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r0_ce0 : STD_LOGIC;
    signal r0_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal r1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r1_ce0 : STD_LOGIC;
    signal r1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal r2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r2_ce0 : STD_LOGIC;
    signal r2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal q0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal q0_ce0 : STD_LOGIC;
    signal q0_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal q1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal q1_ce0 : STD_LOGIC;
    signal q1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal q2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal q2_ce0 : STD_LOGIC;
    signal q2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_6_reg_798 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_exp_V_2_reg_803 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_mant_V_3_fu_281_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal new_mant_V_3_reg_814 : STD_LOGIC_VECTOR (51 downto 0);
    signal shift_V_cast_cast_fu_301_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_cast_cast_reg_821 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp4_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp4_reg_829 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_835 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_12_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_841 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_3_fu_369_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_3_reg_846 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_4_fu_387_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_4_reg_851 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_402_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal r_V_21_reg_872 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_407_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_22_reg_877 : STD_LOGIC_VECTOR (55 downto 0);
    signal xf_V_7_fu_416_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal xf_V_7_reg_882 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal xf_V_8_fu_437_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal xf_V_8_reg_888 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal p_Result_i_i_reg_894 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal r0_load_reg_924 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal r1_load_reg_929 : STD_LOGIC_VECTOR (0 downto 0);
    signal r2_load_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal q0_load_reg_939 : STD_LOGIC_VECTOR (0 downto 0);
    signal q1_load_reg_944 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_949 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal new_exp_V_fu_477_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_exp_V_reg_954 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_5_fu_481_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_6_fu_494_p5 : STD_LOGIC_VECTOR (55 downto 0);
    signal Lo_assign_fu_534_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Lo_assign_reg_972 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_29_fu_510_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_540_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_32_reg_978 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_34_fu_544_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_34_reg_983 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_43_fu_548_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_43_reg_989 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_552_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_997 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_37_fu_626_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_37_reg_1002 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_38_fu_633_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_38_reg_1007 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_42_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_reg_1012 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal d_chunk_V_1_fu_653_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_chunk_V_1_reg_1025 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_44_fu_674_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_44_reg_1060 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_8_fu_679_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_8_reg_1066 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal q0_load_1_reg_1071 : STD_LOGIC_VECTOR (0 downto 0);
    signal q1_load_1_reg_1076 : STD_LOGIC_VECTOR (0 downto 0);
    signal q2_load_reg_1081 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_689_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_45_reg_1086 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_49_fu_699_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_49_reg_1091 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_53_fu_737_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_53_reg_1096 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal p_demorgan_fu_755_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_demorgan_reg_1102 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Result_10_fu_792_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal p_Repl2_4_reg_228 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_5_reg_238 : STD_LOGIC_VECTOR (55 downto 0);
    signal i_i_i_reg_248 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i_i_i_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i13_i_i_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_285_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_309_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal sel_tmp2_demorgan_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_fu_334_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_1_fu_339_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_2_fu_361_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sel_tmp6_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_402_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_407_p0 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_407_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_24_cast_fu_413_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Result_s_fu_422_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal xf_V_5_fu_431_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal d_chunk_V_fu_453_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_4_fu_456_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_9_i_i_fu_488_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_31_fu_518_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_i_i_fu_522_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_i_i_cast_fu_530_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_i_i_cast_fu_506_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_567_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_mant_V_fu_558_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Repl2_5_fu_580_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Repl2_3_fu_587_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_11_fu_594_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_612_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_36_fu_621_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_648_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_648_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Result_7_fu_657_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_46_fu_694_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_9_fu_705_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_48_fu_721_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_47_fu_716_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal loc_V_fu_712_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_50_fu_726_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_51_fu_730_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_52_fu_734_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_56_fu_743_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_57_fu_749_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_54_fu_761_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_58_fu_776_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_55_fu_770_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_59_fu_781_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_60_fu_787_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal out_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);

    component kernel_correlatiohbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (51 downto 0);
        din1 : IN STD_LOGIC_VECTOR (51 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component kernel_correlatioibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (55 downto 0);
        din1 : IN STD_LOGIC_VECTOR (55 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;


    component kernel_correlatiojbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (55 downto 0);
        din1 : IN STD_LOGIC_VECTOR (55 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;


    component operator_double_dbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component operator_double_dcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component operator_double_ddEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component operator_double_deOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component operator_double_dfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component operator_double_dg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    r0_U : component operator_double_dbkb
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => r0_address0,
        ce0 => r0_ce0,
        q0 => r0_q0);

    r1_U : component operator_double_dcud
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => r1_address0,
        ce0 => r1_ce0,
        q0 => r1_q0);

    r2_U : component operator_double_ddEe
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => r2_address0,
        ce0 => r2_ce0,
        q0 => r2_q0);

    q0_U : component operator_double_deOg
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => q0_address0,
        ce0 => q0_ce0,
        q0 => q0_q0);

    q1_U : component operator_double_dfYi
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => q1_address0,
        ce0 => q1_ce0,
        q0 => q1_q0);

    q2_U : component operator_double_dg8j
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => q2_address0,
        ce0 => q2_ce0,
        q0 => q2_q0);

    kernel_correlatiohbi_U1 : component kernel_correlatiohbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        OP => 1,
        din0_WIDTH => 52,
        din1_WIDTH => 11,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => new_mant_V_3_reg_814,
        din1 => grp_fu_402_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_402_p2);

    kernel_correlatioibs_U2 : component kernel_correlatioibs
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        OP => 0,
        din0_WIDTH => 56,
        din1_WIDTH => 11,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_407_p0,
        din1 => grp_fu_407_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_407_p2);

    kernel_correlatiojbC_U3 : component kernel_correlatiojbC
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        OP => 1,
        din0_WIDTH => 56,
        din1_WIDTH => 6,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_37_reg_1002,
        din1 => grp_fu_648_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_648_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv64_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_29_fu_510_p3 = ap_const_lv1_1))) then 
                    ap_return_preg <= out_fu_603_p1;
                end if; 
            end if;
        end if;
    end process;


    i_i_i_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                i_i_i_reg_248 <= i_reg_997;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_i_i_reg_248 <= ap_const_lv6_11;
            end if; 
        end if;
    end process;

    p_Repl2_4_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                p_Repl2_4_reg_228 <= p_Result_8_reg_1066;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                p_Repl2_4_reg_228 <= p_Result_5_fu_481_p4;
            end if; 
        end if;
    end process;

    p_Val2_5_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                p_Val2_5_reg_238 <= p_Result_10_fu_792_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                p_Val2_5_reg_238 <= p_Result_6_fu_494_p5;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_29_fu_510_p3 = ap_const_lv1_0))) then
                Lo_assign_reg_972 <= Lo_assign_fu_534_p2;
                i_reg_997 <= i_fu_552_p2;
                tmp_32_reg_978 <= tmp_32_fu_540_p1;
                tmp_34_reg_983 <= tmp_34_fu_544_p1;
                tmp_43_reg_989 <= tmp_43_fu_548_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                d_chunk_V_1_reg_1025 <= d_chunk_V_1_fu_653_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp4_reg_829 <= icmp4_fu_319_p2;
                new_exp_V_2_reg_803 <= p_Val2_s_fu_259_p1(62 downto 52);
                new_mant_V_3_reg_814 <= new_mant_V_3_fu_281_p1;
                p_Repl2_6_reg_798 <= p_Val2_s_fu_259_p1(63 downto 63);
                    shift_V_cast_cast_reg_821(0) <= shift_V_cast_cast_fu_301_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                new_exp_V_reg_954 <= new_exp_V_fu_477_p2;
                tmp_s_reg_949 <= tmp_s_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                p_Result_8_reg_1066 <= p_Result_8_fu_679_p4;
                q0_load_1_reg_1071 <= q0_q0;
                q1_load_1_reg_1076 <= q1_q0;
                q2_load_reg_1081 <= q2_q0;
                tmp_49_reg_1091 <= tmp_49_fu_699_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                p_Result_i_i_reg_894 <= xf_V_8_fu_437_p2(55 downto 54);
                xf_V_8_reg_888 <= xf_V_8_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                p_demorgan_reg_1102 <= p_demorgan_fu_755_p2;
                tmp_53_reg_1096 <= tmp_53_fu_737_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                q0_load_reg_939 <= q0_q0;
                q1_load_reg_944 <= q1_q0;
                r0_load_reg_924 <= r0_q0;
                r1_load_reg_929 <= r1_q0;
                r2_load_reg_934 <= r2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp4_reg_829 = ap_const_lv1_1))) then
                r_V_21_reg_872 <= grp_fu_402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp4_reg_829 = ap_const_lv1_0))) then
                r_V_22_reg_877 <= grp_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                shift_V_3_reg_846 <= shift_V_3_fu_369_p3;
                tmp_11_reg_835 <= tmp_11_fu_325_p2;
                tmp_12_reg_841 <= tmp_12_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                shift_V_4_reg_851 <= shift_V_4_fu_387_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_37_reg_1002 <= tmp_37_fu_626_p3;
                tmp_38_reg_1007 <= tmp_38_fu_633_p3;
                tmp_42_reg_1012 <= tmp_42_fu_640_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp_44_reg_1060 <= tmp_44_fu_674_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_42_reg_1012 = ap_const_lv1_1))) then
                tmp_45_reg_1086 <= tmp_45_fu_689_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                xf_V_7_reg_882 <= xf_V_7_fu_416_p3;
            end if;
        end if;
    end process;
    shift_V_cast_cast_reg_821(10 downto 1) <= "0000000001";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state16, tmp_29_fu_510_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_29_fu_510_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Lo_assign_fu_534_p2 <= std_logic_vector(unsigned(p_shl_i_i_cast_fu_530_p1) - unsigned(i_i_i_cast_fu_506_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16, tmp_29_fu_510_p3)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_29_fu_510_p3 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16, tmp_29_fu_510_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_29_fu_510_p3 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state16, tmp_29_fu_510_p3, out_fu_603_p1, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_29_fu_510_p3 = ap_const_lv1_1))) then 
            ap_return <= out_fu_603_p1;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    d_chunk_V_1_fu_653_p1 <= grp_fu_648_p2(3 - 1 downto 0);
    d_chunk_V_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i_i_reg_894),3));
    grp_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_V_4_reg_851),52));
    grp_fu_407_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_mant_V_3_reg_814),56));
    grp_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_V_4_reg_851),56));
    grp_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_reg_1007),56));
    i_fu_552_p2 <= std_logic_vector(signed(ap_const_lv6_3F) + signed(i_i_i_reg_248));
        i_i_i_cast_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_i_i_reg_248),8));

    icmp4_fu_319_p2 <= "1" when (tmp_27_fu_309_p4 = ap_const_lv10_0) else "0";
    icmp_fu_295_p2 <= "1" when (tmp_fu_285_p4 = ap_const_lv2_0) else "0";
    loc_V_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_9_fu_705_p4),56));
    new_exp_V_fu_477_p2 <= std_logic_vector(unsigned(new_exp_V_2_reg_803) - unsigned(shift_V_cast_cast_reg_821));
    new_mant_V_3_fu_281_p1 <= p_Val2_s_fu_259_p1(52 - 1 downto 0);
    new_mant_V_fu_558_p1 <= p_Val2_5_reg_238(52 - 1 downto 0);
    out_fu_603_p1 <= p_Result_11_fu_594_p4;
    p_Repl2_3_fu_587_p3 <= 
        new_mant_V_3_reg_814 when (tmp_14_fu_562_p2(0) = '1') else 
        new_mant_V_fu_558_p1;
    p_Repl2_5_fu_580_p3 <= 
        p_s_fu_567_p3 when (tmp_10_fu_575_p2(0) = '1') else 
        new_exp_V_reg_954;
    p_Result_10_fu_792_p2 <= (tmp_60_fu_787_p2 or tmp_59_fu_781_p2);
    p_Result_11_fu_594_p4 <= ((p_Repl2_6_reg_798 & p_Repl2_5_fu_580_p3) & p_Repl2_3_fu_587_p3);
    p_Result_4_fu_456_p3 <= (ap_const_lv3_0 & d_chunk_V_fu_453_p1);
    p_Result_5_fu_481_p4 <= ((r2_load_reg_934 & r1_load_reg_929) & r0_load_reg_924);
    p_Result_6_fu_494_p5 <= (p_Result_9_i_i_fu_488_p3 & ap_const_lv56_0(53 downto 0));
    p_Result_7_fu_657_p3 <= (p_Repl2_4_reg_228 & d_chunk_V_1_reg_1025);
    p_Result_8_fu_679_p4 <= ((r2_q0 & r1_q0) & r0_q0);
    p_Result_9_fu_705_p4 <= ((q2_load_reg_1081 & q1_load_1_reg_1076) & q0_load_1_reg_1071);
    p_Result_9_i_i_fu_488_p3 <= (q1_load_reg_944 & q0_load_reg_939);
    
    p_Result_s_fu_422_p4_proc : process(xf_V_7_reg_882)
    begin
        p_Result_s_fu_422_p4 <= xf_V_7_reg_882;
        p_Result_s_fu_422_p4(52) <= ap_const_lv1_1(0);
    end process;

    p_Val2_s_fu_259_p1 <= in_r;
    p_demorgan_fu_755_p2 <= (tmp_57_fu_749_p2 and tmp_56_fu_743_p2);
    p_s_fu_567_p3 <= 
        ap_const_lv11_7FF when (tmp_14_fu_562_p2(0) = '1') else 
        ap_const_lv11_0;
    p_shl_i_i_cast_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_i_fu_522_p3),8));
    p_shl_i_i_fu_522_p3 <= (tmp_31_fu_518_p1 & ap_const_lv2_0);

    q0_address0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state25, tmp_i_i_i_fu_464_p1, tmp_i13_i_i_fu_664_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            q0_address0 <= tmp_i13_i_i_fu_664_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            q0_address0 <= tmp_i_i_i_fu_464_p1(6 - 1 downto 0);
        else 
            q0_address0 <= "XXXXXX";
        end if; 
    end process;


    q0_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            q0_ce0 <= ap_const_logic_1;
        else 
            q0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    q1_address0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state25, tmp_i_i_i_fu_464_p1, tmp_i13_i_i_fu_664_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            q1_address0 <= tmp_i13_i_i_fu_664_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            q1_address0 <= tmp_i_i_i_fu_464_p1(6 - 1 downto 0);
        else 
            q1_address0 <= "XXXXXX";
        end if; 
    end process;


    q1_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            q1_ce0 <= ap_const_logic_1;
        else 
            q1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q2_address0 <= tmp_i13_i_i_fu_664_p1(6 - 1 downto 0);

    q2_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            q2_ce0 <= ap_const_logic_1;
        else 
            q2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r0_address0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state25, tmp_i_i_i_fu_464_p1, tmp_i13_i_i_fu_664_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            r0_address0 <= tmp_i13_i_i_fu_664_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            r0_address0 <= tmp_i_i_i_fu_464_p1(6 - 1 downto 0);
        else 
            r0_address0 <= "XXXXXX";
        end if; 
    end process;


    r0_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            r0_ce0 <= ap_const_logic_1;
        else 
            r0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r1_address0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state25, tmp_i_i_i_fu_464_p1, tmp_i13_i_i_fu_664_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            r1_address0 <= tmp_i13_i_i_fu_664_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            r1_address0 <= tmp_i_i_i_fu_464_p1(6 - 1 downto 0);
        else 
            r1_address0 <= "XXXXXX";
        end if; 
    end process;


    r1_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            r1_ce0 <= ap_const_logic_1;
        else 
            r1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r2_address0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state25, tmp_i_i_i_fu_464_p1, tmp_i13_i_i_fu_664_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            r2_address0 <= tmp_i13_i_i_fu_664_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            r2_address0 <= tmp_i_i_i_fu_464_p1(6 - 1 downto 0);
        else 
            r2_address0 <= "XXXXXX";
        end if; 
    end process;


    r2_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            r2_ce0 <= ap_const_logic_1;
        else 
            r2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_24_cast_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_21_reg_872),56));
    sel_tmp2_demorgan_fu_344_p2 <= (tmp_12_fu_330_p2 or tmp_11_fu_325_p2);
    sel_tmp2_fu_350_p2 <= (sel_tmp2_demorgan_fu_344_p2 xor ap_const_lv1_1);
    sel_tmp3_fu_356_p2 <= (sel_tmp2_fu_350_p2 and icmp4_reg_829);
    sel_tmp6_fu_377_p2 <= (tmp_11_reg_835 xor ap_const_lv1_1);
    sel_tmp7_fu_382_p2 <= (tmp_12_reg_841 and sel_tmp6_fu_377_p2);
    shift_V_1_fu_339_p2 <= std_logic_vector(signed(ap_const_lv11_7FF) + signed(new_exp_V_2_reg_803));
    shift_V_2_fu_361_p3 <= 
        shift_V_fu_334_p2 when (sel_tmp3_fu_356_p2(0) = '1') else 
        shift_V_1_fu_339_p2;
    shift_V_3_fu_369_p3 <= 
        ap_const_lv11_0 when (tmp_11_fu_325_p2(0) = '1') else 
        shift_V_2_fu_361_p3;
    shift_V_4_fu_387_p3 <= 
        shift_V_cast_cast_reg_821 when (sel_tmp7_fu_382_p2(0) = '1') else 
        shift_V_3_reg_846;
    shift_V_cast_cast_fu_301_p3 <= 
        ap_const_lv11_3 when (icmp_fu_295_p2(0) = '1') else 
        ap_const_lv11_2;
    shift_V_fu_334_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) - unsigned(new_exp_V_2_reg_803));
    tmp_10_fu_575_p2 <= (tmp_s_reg_949 or tmp_14_fu_562_p2);
    tmp_11_fu_325_p2 <= "1" when (new_exp_V_2_reg_803 = ap_const_lv11_0) else "0";
    tmp_12_fu_330_p2 <= "1" when (unsigned(shift_V_cast_cast_reg_821) < unsigned(new_exp_V_2_reg_803)) else "0";
    tmp_14_fu_562_p2 <= "1" when (new_exp_V_2_reg_803 = ap_const_lv11_7FF) else "0";
    tmp_27_fu_309_p4 <= p_Val2_s_fu_259_p1(62 downto 53);
    tmp_29_fu_510_p3 <= i_i_i_reg_248(5 downto 5);
    tmp_31_fu_518_p1 <= i_i_i_reg_248(5 - 1 downto 0);
    tmp_32_fu_540_p1 <= Lo_assign_fu_534_p2(6 - 1 downto 0);
    tmp_33_fu_607_p2 <= "1" when (unsigned(Lo_assign_reg_972) > unsigned(ap_const_lv8_FD)) else "0";
    tmp_34_fu_544_p1 <= Lo_assign_fu_534_p2(6 - 1 downto 0);
    
    tmp_35_fu_612_p4_proc : process(xf_V_8_reg_888)
    variable vlo_cpy : STD_LOGIC_VECTOR(56+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(56+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(56 - 1 downto 0);
    variable tmp_35_fu_612_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(56 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(56 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(56 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_37(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := xf_V_8_reg_888;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(56-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(56-1-unsigned(ap_const_lv32_37(6-1 downto 0)));
            for tmp_35_fu_612_p4_i in 0 to 56-1 loop
                v0_cpy(tmp_35_fu_612_p4_i) := xf_V_8_reg_888(56-1-tmp_35_fu_612_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(56-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_35_fu_612_p4 <= resvalue(56-1 downto 0);
    end process;

    tmp_36_fu_621_p2 <= std_logic_vector(signed(ap_const_lv6_37) - signed(tmp_34_reg_983));
    tmp_37_fu_626_p3 <= 
        tmp_35_fu_612_p4 when (tmp_33_fu_607_p2(0) = '1') else 
        xf_V_8_reg_888;
    tmp_38_fu_633_p3 <= 
        tmp_36_fu_621_p2 when (tmp_33_fu_607_p2(0) = '1') else 
        tmp_34_reg_983;
    tmp_42_fu_640_p2 <= "1" when (unsigned(Lo_assign_reg_972) > unsigned(ap_const_lv8_FD)) else "0";
    tmp_43_fu_548_p1 <= Lo_assign_fu_534_p2(6 - 1 downto 0);
    tmp_44_fu_674_p2 <= std_logic_vector(unsigned(ap_const_lv6_2) + unsigned(tmp_32_reg_978));
    tmp_45_fu_689_p2 <= std_logic_vector(signed(ap_const_lv6_37) - signed(tmp_43_reg_989));
    tmp_46_fu_694_p3 <= 
        tmp_43_reg_989 when (tmp_42_reg_1012(0) = '1') else 
        tmp_44_reg_1060;
    tmp_47_fu_716_p3 <= 
        tmp_44_reg_1060 when (tmp_42_reg_1012(0) = '1') else 
        tmp_43_reg_989;
    tmp_48_fu_721_p3 <= 
        tmp_45_reg_1086 when (tmp_42_reg_1012(0) = '1') else 
        tmp_43_reg_989;
    tmp_49_fu_699_p2 <= std_logic_vector(signed(ap_const_lv6_37) - signed(tmp_46_fu_694_p3));
    tmp_50_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_721_p3),56));
    tmp_51_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_fu_716_p3),56));
    tmp_52_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_reg_1091),56));
    tmp_53_fu_737_p2 <= std_logic_vector(shift_left(unsigned(loc_V_fu_712_p1),to_integer(unsigned('0' & tmp_50_fu_726_p1(31-1 downto 0)))));
    
    tmp_54_fu_761_p4_proc : process(tmp_53_reg_1096)
    variable vlo_cpy : STD_LOGIC_VECTOR(56+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(56+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(56 - 1 downto 0);
    variable tmp_54_fu_761_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(56 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(56 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(56 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_37(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_53_reg_1096;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(56-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(56-1-unsigned(ap_const_lv32_37(6-1 downto 0)));
            for tmp_54_fu_761_p4_i in 0 to 56-1 loop
                v0_cpy(tmp_54_fu_761_p4_i) := tmp_53_reg_1096(56-1-tmp_54_fu_761_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(56-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_54_fu_761_p4 <= resvalue(56-1 downto 0);
    end process;

    tmp_55_fu_770_p3 <= 
        tmp_54_fu_761_p4 when (tmp_42_reg_1012(0) = '1') else 
        tmp_53_reg_1096;
    tmp_56_fu_743_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv56_FFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_51_fu_730_p1(31-1 downto 0)))));
    tmp_57_fu_749_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv56_FFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_52_fu_734_p1(31-1 downto 0)))));
    tmp_58_fu_776_p2 <= (p_demorgan_reg_1102 xor ap_const_lv56_FFFFFFFFFFFFFF);
    tmp_59_fu_781_p2 <= (tmp_58_fu_776_p2 and p_Val2_5_reg_238);
    tmp_60_fu_787_p2 <= (tmp_55_fu_770_p3 and p_demorgan_reg_1102);
    tmp_fu_285_p4 <= p_Val2_s_fu_259_p1(51 downto 50);
    tmp_i13_i_i_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_7_fu_657_p3),64));
    tmp_i_i_i_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_4_fu_456_p3),64));
    tmp_s_fu_473_p2 <= "1" when (unsigned(shift_V_cast_cast_reg_821) > unsigned(new_exp_V_2_reg_803)) else "0";
    xf_V_5_fu_431_p3 <= 
        xf_V_7_reg_882 when (tmp_11_reg_835(0) = '1') else 
        p_Result_s_fu_422_p4;
    xf_V_7_fu_416_p3 <= 
        r_V_24_cast_fu_413_p1 when (icmp4_reg_829(0) = '1') else 
        r_V_22_reg_877;
    xf_V_8_fu_437_p2 <= std_logic_vector(unsigned(ap_const_lv56_2) + unsigned(xf_V_5_fu_431_p3));
end behav;
