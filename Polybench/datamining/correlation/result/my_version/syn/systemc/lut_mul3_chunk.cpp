// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "lut_mul3_chunk.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic lut_mul3_chunk::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic lut_mul3_chunk::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> lut_mul3_chunk::ap_ST_fsm_state1 = "1";
const sc_lv<2> lut_mul3_chunk::ap_ST_fsm_state2 = "10";
const sc_lv<32> lut_mul3_chunk::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> lut_mul3_chunk::ap_const_lv32_1 = "1";
const sc_lv<8> lut_mul3_chunk::ap_const_lv8_0 = "00000000";
const bool lut_mul3_chunk::ap_const_boolean_1 = true;

lut_mul3_chunk::lut_mul3_chunk(sc_module_name name) : sc_module(name), mVcdFile(0) {
    q01_U = new lut_mul3_chunk_q01("q01_U");
    q01_U->clk(ap_clk);
    q01_U->reset(ap_rst);
    q01_U->address0(q01_address0);
    q01_U->ce0(q01_ce0);
    q01_U->q0(q01_q0);
    q12_U = new lut_mul3_chunk_q12("q12_U");
    q12_U->clk(ap_clk);
    q12_U->reset(ap_rst);
    q12_U->address0(q12_address0);
    q12_U->ce0(q12_ce0);
    q12_U->q0(q12_q0);
    q23_U = new lut_mul3_chunk_q23("q23_U");
    q23_U->clk(ap_clk);
    q23_U->reset(ap_rst);
    q23_U->address0(q23_address0);
    q23_U->ce0(q23_ce0);
    q23_U->q0(q23_q0);
    q3_U = new lut_mul3_chunk_q3("q3_U");
    q3_U->clk(ap_clk);
    q3_U->reset(ap_rst);
    q3_U->address0(q3_address0);
    q3_U->ce0(q3_ce0);
    q3_U->q0(q3_q0);
    q4_U = new lut_mul3_chunk_q4("q4_U");
    q4_U->clk(ap_clk);
    q4_U->reset(ap_rst);
    q4_U->address0(q4_address0);
    q4_U->ce0(q4_ce0);
    q4_U->q0(q4_q0);
    q5_U = new lut_mul3_chunk_q5("q5_U");
    q5_U->clk(ap_clk);
    q5_U->reset(ap_rst);
    q5_U->address0(q5_address0);
    q5_U->ce0(q5_ce0);
    q5_U->q0(q5_q0);
    q6_U = new lut_mul3_chunk_q6("q6_U");
    q6_U->clk(ap_clk);
    q6_U->reset(ap_rst);
    q6_U->address0(q6_address0);
    q6_U->ce0(q6_ce0);
    q6_U->q0(q6_q0);
    q7_U = new lut_mul3_chunk_q7("q7_U");
    q7_U->clk(ap_clk);
    q7_U->reset(ap_rst);
    q7_U->address0(q7_address0);
    q7_U->ce0(q7_ce0);
    q7_U->q0(q7_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_p_Result_s_fu_146_p9);
    sensitive << ( q01_q0 );
    sensitive << ( q12_q0 );
    sensitive << ( q23_q0 );
    sensitive << ( q3_q0 );
    sensitive << ( q4_q0 );
    sensitive << ( q5_q0 );
    sensitive << ( q6_q0 );
    sensitive << ( q7_q0 );

    SC_METHOD(thread_q01_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_134_p1 );

    SC_METHOD(thread_q01_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_q12_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_134_p1 );

    SC_METHOD(thread_q12_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_q23_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_134_p1 );

    SC_METHOD(thread_q23_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_q3_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_134_p1 );

    SC_METHOD(thread_q3_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_q4_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_134_p1 );

    SC_METHOD(thread_q4_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_q5_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_134_p1 );

    SC_METHOD(thread_q5_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_q6_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_134_p1 );

    SC_METHOD(thread_q6_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_q7_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_134_p1 );

    SC_METHOD(thread_q7_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_tmp_fu_134_p1);
    sensitive << ( d_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "01";
    ap_return_preg = "00000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "lut_mul3_chunk_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, d_V, "(port)d_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, q01_address0, "q01_address0");
    sc_trace(mVcdFile, q01_ce0, "q01_ce0");
    sc_trace(mVcdFile, q01_q0, "q01_q0");
    sc_trace(mVcdFile, q12_address0, "q12_address0");
    sc_trace(mVcdFile, q12_ce0, "q12_ce0");
    sc_trace(mVcdFile, q12_q0, "q12_q0");
    sc_trace(mVcdFile, q23_address0, "q23_address0");
    sc_trace(mVcdFile, q23_ce0, "q23_ce0");
    sc_trace(mVcdFile, q23_q0, "q23_q0");
    sc_trace(mVcdFile, q3_address0, "q3_address0");
    sc_trace(mVcdFile, q3_ce0, "q3_ce0");
    sc_trace(mVcdFile, q3_q0, "q3_q0");
    sc_trace(mVcdFile, q4_address0, "q4_address0");
    sc_trace(mVcdFile, q4_ce0, "q4_ce0");
    sc_trace(mVcdFile, q4_q0, "q4_q0");
    sc_trace(mVcdFile, q5_address0, "q5_address0");
    sc_trace(mVcdFile, q5_ce0, "q5_ce0");
    sc_trace(mVcdFile, q5_q0, "q5_q0");
    sc_trace(mVcdFile, q6_address0, "q6_address0");
    sc_trace(mVcdFile, q6_ce0, "q6_ce0");
    sc_trace(mVcdFile, q6_q0, "q6_q0");
    sc_trace(mVcdFile, q7_address0, "q7_address0");
    sc_trace(mVcdFile, q7_ce0, "q7_ce0");
    sc_trace(mVcdFile, q7_q0, "q7_q0");
    sc_trace(mVcdFile, tmp_fu_134_p1, "tmp_fu_134_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, p_Result_s_fu_146_p9, "p_Result_s_fu_146_p9");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

lut_mul3_chunk::~lut_mul3_chunk() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete q01_U;
    delete q12_U;
    delete q23_U;
    delete q3_U;
    delete q4_U;
    delete q5_U;
    delete q6_U;
    delete q7_U;
}

void lut_mul3_chunk::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_preg = p_Result_s_fu_146_p9.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return = p_Result_s_fu_146_p9.read();
    }
}

void lut_mul3_chunk::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void lut_mul3_chunk::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void lut_mul3_chunk::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void lut_mul3_chunk::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void lut_mul3_chunk::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void lut_mul3_chunk::thread_p_Result_s_fu_146_p9() {
    p_Result_s_fu_146_p9 = esl_concat<7,1>(esl_concat<6,1>(esl_concat<5,1>(esl_concat<4,1>(esl_concat<3,1>(esl_concat<2,1>(esl_concat<1,1>(q7_q0.read(), q6_q0.read()), q5_q0.read()), q4_q0.read()), q3_q0.read()), q23_q0.read()), q12_q0.read()), q01_q0.read());
}

void lut_mul3_chunk::thread_q01_address0() {
    q01_address0 =  (sc_lv<6>) (tmp_fu_134_p1.read());
}

void lut_mul3_chunk::thread_q01_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        q01_ce0 = ap_const_logic_1;
    } else {
        q01_ce0 = ap_const_logic_0;
    }
}

void lut_mul3_chunk::thread_q12_address0() {
    q12_address0 =  (sc_lv<6>) (tmp_fu_134_p1.read());
}

void lut_mul3_chunk::thread_q12_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        q12_ce0 = ap_const_logic_1;
    } else {
        q12_ce0 = ap_const_logic_0;
    }
}

void lut_mul3_chunk::thread_q23_address0() {
    q23_address0 =  (sc_lv<6>) (tmp_fu_134_p1.read());
}

void lut_mul3_chunk::thread_q23_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        q23_ce0 = ap_const_logic_1;
    } else {
        q23_ce0 = ap_const_logic_0;
    }
}

void lut_mul3_chunk::thread_q3_address0() {
    q3_address0 =  (sc_lv<6>) (tmp_fu_134_p1.read());
}

void lut_mul3_chunk::thread_q3_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        q3_ce0 = ap_const_logic_1;
    } else {
        q3_ce0 = ap_const_logic_0;
    }
}

void lut_mul3_chunk::thread_q4_address0() {
    q4_address0 =  (sc_lv<6>) (tmp_fu_134_p1.read());
}

void lut_mul3_chunk::thread_q4_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        q4_ce0 = ap_const_logic_1;
    } else {
        q4_ce0 = ap_const_logic_0;
    }
}

void lut_mul3_chunk::thread_q5_address0() {
    q5_address0 =  (sc_lv<6>) (tmp_fu_134_p1.read());
}

void lut_mul3_chunk::thread_q5_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        q5_ce0 = ap_const_logic_1;
    } else {
        q5_ce0 = ap_const_logic_0;
    }
}

void lut_mul3_chunk::thread_q6_address0() {
    q6_address0 =  (sc_lv<6>) (tmp_fu_134_p1.read());
}

void lut_mul3_chunk::thread_q6_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        q6_ce0 = ap_const_logic_1;
    } else {
        q6_ce0 = ap_const_logic_0;
    }
}

void lut_mul3_chunk::thread_q7_address0() {
    q7_address0 =  (sc_lv<6>) (tmp_fu_134_p1.read());
}

void lut_mul3_chunk::thread_q7_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        q7_ce0 = ap_const_logic_1;
    } else {
        q7_ce0 = ap_const_logic_0;
    }
}

void lut_mul3_chunk::thread_tmp_fu_134_p1() {
    tmp_fu_134_p1 = esl_zext<64,6>(d_V.read());
}

void lut_mul3_chunk::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

