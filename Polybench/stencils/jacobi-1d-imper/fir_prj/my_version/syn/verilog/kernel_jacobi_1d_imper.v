// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel_jacobi_1d_imper,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.063000,HLS_SYN_LAT=20996101,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=1057,HLS_SYN_LUT=5236,HLS_VERSION=2018_2}" *)

module kernel_jacobi_1d_imper (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tsteps,
        n,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_we1,
        A_d1,
        A_q1,
        B_address0,
        B_ce0,
        B_we0,
        B_d0,
        B_q0
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] tsteps;
input  [31:0] n;
output  [13:0] A_address0;
output   A_ce0;
input  [63:0] A_q0;
output  [13:0] A_address1;
output   A_ce1;
output   A_we1;
output  [63:0] A_d1;
input  [63:0] A_q1;
output  [13:0] B_address0;
output   B_ce0;
output   B_we0;
output  [63:0] B_d0;
input  [63:0] B_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] A_address0;
reg A_ce0;
reg[13:0] A_address1;
reg A_ce1;
reg A_we1;
reg[13:0] B_address0;
reg B_ce0;
reg B_we0;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] reg_142;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state9;
wire   [63:0] grp_fu_138_p2;
reg   [63:0] reg_148;
wire    ap_CS_fsm_state14;
wire   [6:0] t_1_fu_160_p2;
reg   [6:0] t_1_reg_219;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond1_fu_166_p2;
wire   [63:0] tmp_4_fu_183_p1;
reg   [63:0] tmp_4_reg_232;
reg   [63:0] A_load_1_reg_242;
wire   [13:0] i_1_fu_188_p2;
reg   [13:0] i_1_reg_247;
wire    ap_CS_fsm_state8;
wire   [63:0] grp_operator_double_div3_fu_133_ap_return;
reg   [63:0] tmp_8_reg_257;
wire    ap_CS_fsm_state16;
wire    grp_operator_double_div3_fu_133_ap_idle;
wire    grp_operator_double_div3_fu_133_ap_ready;
wire    grp_operator_double_div3_fu_133_ap_done;
wire   [63:0] tmp_9_fu_205_p1;
reg   [63:0] tmp_9_reg_265;
wire    ap_CS_fsm_state18;
wire   [0:0] exitcond_fu_199_p2;
wire   [13:0] j_1_fu_210_p2;
reg   [13:0] j_1_reg_275;
wire    grp_operator_double_div3_fu_133_ap_start;
reg   [6:0] t_reg_99;
reg   [13:0] i_reg_110;
wire    ap_CS_fsm_state17;
wire   [0:0] exitcond2_fu_154_p2;
reg   [13:0] j_reg_122;
wire    ap_CS_fsm_state19;
reg    grp_operator_double_div3_fu_133_ap_start_reg;
wire    ap_CS_fsm_state15;
wire   [63:0] tmp_s_fu_178_p1;
wire   [63:0] tmp_6_fu_194_p1;
reg   [63:0] grp_fu_138_p0;
reg   [63:0] grp_fu_138_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state10;
wire   [13:0] tmp_fu_172_p2;
reg   [18:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
#0 grp_operator_double_div3_fu_133_ap_start_reg = 1'b0;
end

operator_double_div3 grp_operator_double_div3_fu_133(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_operator_double_div3_fu_133_ap_start),
    .ap_done(grp_operator_double_div3_fu_133_ap_done),
    .ap_idle(grp_operator_double_div3_fu_133_ap_idle),
    .ap_ready(grp_operator_double_div3_fu_133_ap_ready),
    .in_r(reg_148),
    .ap_return(grp_operator_double_div3_fu_133_ap_return)
);

kernel_jacobi_1d_cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
kernel_jacobi_1d_cud_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_138_p0),
    .din1(grp_fu_138_p1),
    .ce(1'b1),
    .dout(grp_fu_138_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_operator_double_div3_fu_133_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            grp_operator_double_div3_fu_133_ap_start_reg <= 1'b1;
        end else if ((grp_operator_double_div3_fu_133_ap_ready == 1'b1)) begin
            grp_operator_double_div3_fu_133_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_154_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_110 <= 14'd1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        i_reg_110 <= i_1_reg_247;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_122 <= 14'd1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        j_reg_122 <= j_1_reg_275;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (exitcond_fu_199_p2 == 1'd1))) begin
        t_reg_99 <= t_1_reg_219;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_99 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_load_1_reg_242 <= A_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_1_reg_247 <= i_1_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_199_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        j_1_reg_275 <= j_1_fu_210_p2;
        tmp_9_reg_265[13 : 0] <= tmp_9_fu_205_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_142 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_148 <= grp_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        t_1_reg_219 <= t_1_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_4_reg_232[13 : 0] <= tmp_4_fu_183_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (grp_operator_double_div3_fu_133_ap_done == 1'b1))) begin
        tmp_8_reg_257 <= grp_operator_double_div3_fu_133_ap_return;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        A_address0 = tmp_6_fu_194_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        A_address0 = tmp_s_fu_178_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        A_address1 = tmp_9_reg_265;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        A_address1 = tmp_4_fu_183_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state19))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        A_we1 = 1'b1;
    end else begin
        A_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        B_address0 = tmp_9_fu_205_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        B_address0 = tmp_4_reg_232;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        B_we0 = 1'b1;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_154_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_154_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_138_p0 = reg_148;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_138_p0 = reg_142;
    end else begin
        grp_fu_138_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_138_p1 = reg_142;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_138_p1 = A_load_1_reg_242;
    end else begin
        grp_fu_138_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_154_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (grp_operator_double_div3_fu_133_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (exitcond_fu_199_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_d1 = B_q0;

assign B_d0 = tmp_8_reg_257;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_166_p2 = ((i_reg_110 == 14'd9999) ? 1'b1 : 1'b0);

assign exitcond2_fu_154_p2 = ((t_reg_99 == 7'd100) ? 1'b1 : 1'b0);

assign exitcond_fu_199_p2 = ((j_reg_122 == 14'd9999) ? 1'b1 : 1'b0);

assign grp_operator_double_div3_fu_133_ap_start = grp_operator_double_div3_fu_133_ap_start_reg;

assign i_1_fu_188_p2 = (i_reg_110 + 14'd1);

assign j_1_fu_210_p2 = (j_reg_122 + 14'd1);

assign t_1_fu_160_p2 = (t_reg_99 + 7'd1);

assign tmp_4_fu_183_p1 = i_reg_110;

assign tmp_6_fu_194_p1 = i_1_fu_188_p2;

assign tmp_9_fu_205_p1 = j_reg_122;

assign tmp_fu_172_p2 = ($signed(i_reg_110) + $signed(14'd16383));

assign tmp_s_fu_178_p1 = tmp_fu_172_p2;

always @ (posedge ap_clk) begin
    tmp_4_reg_232[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    tmp_9_reg_265[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
end

endmodule //kernel_jacobi_1d_imper
