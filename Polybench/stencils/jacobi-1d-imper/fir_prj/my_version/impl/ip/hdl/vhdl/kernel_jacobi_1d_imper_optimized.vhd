-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_jacobi_1d_imper_optimized is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tsteps : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_we1 : OUT STD_LOGIC;
    A_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_we0 : OUT STD_LOGIC;
    B_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    B_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of kernel_jacobi_1d_imper_optimized is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel_jacobi_1d_imper_optimized,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.344000,HLS_SYN_LAT=89982301,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3166,HLS_SYN_LUT=2804,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (77 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (77 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (77 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (77 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (77 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (77 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (77 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (77 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (77 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (77 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (77 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (77 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv14_270F : STD_LOGIC_VECTOR (13 downto 0) := "10011100001111";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv55_1 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_261 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_253_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_267 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal reg_272 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_lut_div3_chunk_fu_234_ap_idle : STD_LOGIC;
    signal grp_lut_div3_chunk_fu_234_ap_ready : STD_LOGIC;
    signal grp_lut_div3_chunk_fu_234_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal t_1_fu_283_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal t_1_reg_778 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_295_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_reg_786 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond1_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_3_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_796 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_load_1_reg_806 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_fu_310_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_1_reg_811 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal p_Repl2_2_reg_822 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal new_exp_V_1_fu_332_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_exp_V_1_reg_827 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_mant_V_1_fu_342_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal new_mant_V_1_reg_834 : STD_LOGIC_VECTOR (51 downto 0);
    signal shift_V_i_cast_cast_fu_354_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_i_cast_cast_reg_841 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_i_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_reg_848 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_reg_856 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_862 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_fu_390_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_reg_868 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_1_fu_396_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_1_reg_873 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_4_fu_448_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_4_reg_878 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal tmp_2_i_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i_reg_884 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_1_fu_474_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Repl2_1_reg_889 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal grp_fu_491_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal r_V_15_reg_909 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_fu_496_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_16_reg_914 : STD_LOGIC_VECTOR (54 downto 0);
    signal xf_V_7_fu_505_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal xf_V_7_reg_919 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal p_Result_i_i_i_reg_925 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal d_chunk_V_1_reg_930 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_2_reg_935 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_3_reg_940 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_4_reg_945 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_5_reg_950 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_6_reg_955 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_7_reg_960 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_8_reg_965 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_9_reg_970 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_10_reg_975 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_11_reg_980 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_12_reg_985 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_13_fu_662_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_13_reg_990 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_fu_666_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_reg_995 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_lut_div3_chunk_fu_234_ap_return_0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_lut_div3_chunk_fu_234_ap_return_1 : STD_LOGIC_VECTOR (1 downto 0);
    signal call_ret2_i_i_i_reg_1000_0 : STD_LOGIC_VECTOR (3 downto 0);
    signal call_ret3_i_i_i_reg_1005_0 : STD_LOGIC_VECTOR (3 downto 0);
    signal call_ret4_i_i_i_reg_1010_0 : STD_LOGIC_VECTOR (3 downto 0);
    signal call_ret5_i_i_i_reg_1015_0 : STD_LOGIC_VECTOR (3 downto 0);
    signal call_ret6_i_i_i_reg_1020_0 : STD_LOGIC_VECTOR (3 downto 0);
    signal call_ret7_i_i_i_reg_1025_0 : STD_LOGIC_VECTOR (3 downto 0);
    signal call_ret8_i_i_i_reg_1030_0 : STD_LOGIC_VECTOR (3 downto 0);
    signal call_ret9_i_i_i_reg_1035_0 : STD_LOGIC_VECTOR (3 downto 0);
    signal call_ret10_i_i_i_reg_1040_0 : STD_LOGIC_VECTOR (3 downto 0);
    signal call_ret11_i_i_i_reg_1045_0 : STD_LOGIC_VECTOR (3 downto 0);
    signal call_ret12_i_i_i_reg_1050_0 : STD_LOGIC_VECTOR (3 downto 0);
    signal call_ret13_i_i_i_reg_1055_0 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Repl2_s_fu_740_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Repl2_s_reg_1060 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal tmp_8_fu_764_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_1068 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal exitcond_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_769_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_1_reg_1078 : STD_LOGIC_VECTOR (13 downto 0);
    signal B_load_reg_1083 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal grp_lut_div3_chunk_fu_234_ap_start : STD_LOGIC;
    signal grp_lut_div3_chunk_fu_234_d_V : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_lut_div3_chunk_fu_234_r_in_V : STD_LOGIC_VECTOR (1 downto 0);
    signal t_reg_200 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_211 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal exitcond2_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_223 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal grp_lut_div3_chunk_fu_234_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal tmp_s_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal grp_fu_253_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal p_Val2_s_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_346_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_374_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal sel_tmp2_demorgan_i_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_i_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_2_fu_425_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sel_tmp6_i_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_i_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_3_fu_431_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_i_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_i_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_i_fu_460_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_exp_V_fu_406_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_491_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_496_p0 : STD_LOGIC_VECTOR (54 downto 0);
    signal grp_fu_496_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_13_i_cast_fu_502_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal p_Result_s_fu_511_p4 : STD_LOGIC_VECTOR (54 downto 0);
    signal xf_V_5_fu_520_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal xf_V_8_fu_526_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal new_mant_V_fu_710_p14 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_4_fu_746_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (77 downto 0);

    component lut_div3_chunk IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        d_V : IN STD_LOGIC_VECTOR (3 downto 0);
        r_in_V : IN STD_LOGIC_VECTOR (1 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component kernel_jacobi_1d_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_jacobi_1d_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (51 downto 0);
        din1 : IN STD_LOGIC_VECTOR (51 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component kernel_jacobi_1d_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (54 downto 0);
        din1 : IN STD_LOGIC_VECTOR (54 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (54 downto 0) );
    end component;



begin
    grp_lut_div3_chunk_fu_234 : component lut_div3_chunk
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lut_div3_chunk_fu_234_ap_start,
        ap_done => grp_lut_div3_chunk_fu_234_ap_done,
        ap_idle => grp_lut_div3_chunk_fu_234_ap_idle,
        ap_ready => grp_lut_div3_chunk_fu_234_ap_ready,
        d_V => grp_lut_div3_chunk_fu_234_d_V,
        r_in_V => grp_lut_div3_chunk_fu_234_r_in_V,
        ap_return_0 => grp_lut_div3_chunk_fu_234_ap_return_0,
        ap_return_1 => grp_lut_div3_chunk_fu_234_ap_return_1);

    kernel_jacobi_1d_bkb_U9 : component kernel_jacobi_1d_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 14,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_253_p0,
        din1 => grp_fu_253_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_253_p2);

    kernel_jacobi_1d_cud_U10 : component kernel_jacobi_1d_cud
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        OP => 1,
        din0_WIDTH => 52,
        din1_WIDTH => 11,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => new_mant_V_1_reg_834,
        din1 => grp_fu_491_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_491_p2);

    kernel_jacobi_1d_dEe_U11 : component kernel_jacobi_1d_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        OP => 0,
        din0_WIDTH => 55,
        din1_WIDTH => 11,
        dout_WIDTH => 55)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_496_p0,
        din1 => grp_fu_496_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_496_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_lut_div3_chunk_fu_234_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lut_div3_chunk_fu_234_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                    grp_lut_div3_chunk_fu_234_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lut_div3_chunk_fu_234_ap_ready = ap_const_logic_1)) then 
                    grp_lut_div3_chunk_fu_234_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_211 <= ap_const_lv14_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
                i_reg_211 <= i_1_reg_811;
            end if; 
        end if;
    end process;

    j_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_223 <= ap_const_lv14_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
                j_reg_223 <= j_1_reg_1078;
            end if; 
        end if;
    end process;

    t_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_758_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
                t_reg_200 <= t_1_reg_778;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_reg_200 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                A_load_1_reg_806 <= A_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                B_load_reg_1083 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state65) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                call_ret10_i_i_i_reg_1040_0 <= grp_lut_div3_chunk_fu_234_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state67) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                call_ret11_i_i_i_reg_1045_0 <= grp_lut_div3_chunk_fu_234_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state69) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                call_ret12_i_i_i_reg_1050_0 <= grp_lut_div3_chunk_fu_234_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state71) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                call_ret13_i_i_i_reg_1055_0 <= grp_lut_div3_chunk_fu_234_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                call_ret2_i_i_i_reg_1000_0 <= grp_lut_div3_chunk_fu_234_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state51) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                call_ret3_i_i_i_reg_1005_0 <= grp_lut_div3_chunk_fu_234_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state53) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                call_ret4_i_i_i_reg_1010_0 <= grp_lut_div3_chunk_fu_234_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state55) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                call_ret5_i_i_i_reg_1015_0 <= grp_lut_div3_chunk_fu_234_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state57) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                call_ret6_i_i_i_reg_1020_0 <= grp_lut_div3_chunk_fu_234_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state59) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                call_ret7_i_i_i_reg_1025_0 <= grp_lut_div3_chunk_fu_234_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state61) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                call_ret8_i_i_i_reg_1030_0 <= grp_lut_div3_chunk_fu_234_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state63) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                call_ret9_i_i_i_reg_1035_0 <= grp_lut_div3_chunk_fu_234_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                d_chunk_V_10_reg_975 <= xf_V_8_fu_526_p2(15 downto 12);
                d_chunk_V_11_reg_980 <= xf_V_8_fu_526_p2(11 downto 8);
                d_chunk_V_12_reg_985 <= xf_V_8_fu_526_p2(7 downto 4);
                d_chunk_V_13_reg_990 <= d_chunk_V_13_fu_662_p1;
                d_chunk_V_1_reg_930 <= xf_V_8_fu_526_p2(51 downto 48);
                d_chunk_V_2_reg_935 <= xf_V_8_fu_526_p2(47 downto 44);
                d_chunk_V_3_reg_940 <= xf_V_8_fu_526_p2(43 downto 40);
                d_chunk_V_4_reg_945 <= xf_V_8_fu_526_p2(39 downto 36);
                d_chunk_V_5_reg_950 <= xf_V_8_fu_526_p2(35 downto 32);
                d_chunk_V_6_reg_955 <= xf_V_8_fu_526_p2(31 downto 28);
                d_chunk_V_7_reg_960 <= xf_V_8_fu_526_p2(27 downto 24);
                d_chunk_V_8_reg_965 <= xf_V_8_fu_526_p2(23 downto 20);
                d_chunk_V_9_reg_970 <= xf_V_8_fu_526_p2(19 downto 16);
                p_Result_i_i_i_reg_925 <= xf_V_8_fu_526_p2(54 downto 52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                    d_chunk_V_reg_995(2 downto 0) <= d_chunk_V_fu_666_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i_1_reg_811 <= i_1_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                icmp_reg_862 <= icmp_fu_384_p2;
                new_exp_V_1_reg_827 <= p_Val2_s_fu_320_p1(62 downto 52);
                new_mant_V_1_reg_834 <= new_mant_V_1_fu_342_p1;
                p_Repl2_2_reg_822 <= p_Val2_s_fu_320_p1(63 downto 63);
                shift_V_1_reg_873 <= shift_V_1_fu_396_p2;
                    shift_V_i_cast_cast_reg_841(1 downto 0) <= shift_V_i_cast_cast_fu_354_p3(1 downto 0);
                shift_V_reg_868 <= shift_V_fu_390_p2;
                tmp_3_i_reg_848 <= tmp_3_i_fu_362_p2;
                tmp_4_i_reg_856 <= tmp_4_i_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_758_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                j_1_reg_1078 <= j_1_fu_769_p2;
                    tmp_8_reg_1068(13 downto 0) <= tmp_8_fu_764_p1(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                p_Repl2_1_reg_889 <= p_Repl2_1_fu_474_p3;
                shift_V_4_reg_878 <= shift_V_4_fu_448_p3;
                tmp_2_i_reg_884 <= tmp_2_i_fu_455_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state73) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                p_Repl2_s_reg_1060 <= p_Repl2_s_fu_740_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_reg_862 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                r_V_15_reg_909 <= grp_fu_491_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_reg_862 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                r_V_16_reg_914 <= grp_fu_496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_261 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state20))) then
                reg_267 <= grp_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state71) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state69) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state67) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state65) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state63) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state61) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state57) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state55) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state51) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1)))) then
                reg_272 <= grp_lut_div3_chunk_fu_234_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                t_1_reg_778 <= t_1_fu_283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    tmp_3_reg_796(13 downto 0) <= tmp_3_fu_305_p1(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_reg_786 <= tmp_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                xf_V_7_reg_919 <= xf_V_7_fu_505_p3;
            end if;
        end if;
    end process;
    tmp_3_reg_796(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    shift_V_i_cast_cast_reg_841(10 downto 2) <= "000000000";
    d_chunk_V_reg_995(3) <= '0';
    tmp_8_reg_1068(63 downto 14) <= "00000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state47, grp_lut_div3_chunk_fu_234_ap_done, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state55, ap_CS_fsm_state57, ap_CS_fsm_state59, ap_CS_fsm_state61, ap_CS_fsm_state63, ap_CS_fsm_state65, ap_CS_fsm_state67, ap_CS_fsm_state69, ap_CS_fsm_state71, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond1_fu_289_p2, ap_CS_fsm_state73, ap_CS_fsm_state75, exitcond_fu_758_p2, exitcond2_fu_277_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond2_fu_277_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond1_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state47) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state49) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state51) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state53) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state55) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state57) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state59) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state61) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state63) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state65) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state67) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state69) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state69;
                end if;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state71) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state73) and (grp_lut_div3_chunk_fu_234_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state75 => 
                if (((exitcond_fu_758_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state18, tmp_s_fu_301_p1, tmp_5_fu_316_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            A_address0 <= tmp_5_fu_316_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address0 <= tmp_s_fu_301_p1(14 - 1 downto 0);
        else 
            A_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_state4, tmp_3_fu_305_p1, tmp_8_reg_1068, ap_CS_fsm_state78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            A_address1 <= tmp_8_reg_1068(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address1 <= tmp_3_fu_305_p1(14 - 1 downto 0);
        else 
            A_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state20, ap_CS_fsm_state4, ap_CS_fsm_state18, ap_CS_fsm_state5, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state78, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_d1 <= B_load_reg_1083;

    A_we1_assign_proc : process(ap_CS_fsm_state78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            A_we1 <= ap_const_logic_1;
        else 
            A_we1 <= ap_const_logic_0;
        end if; 
    end process;


    B_address0_assign_proc : process(tmp_3_reg_796, tmp_8_fu_764_p1, ap_CS_fsm_state75, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            B_address0 <= tmp_8_fu_764_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            B_address0 <= tmp_3_reg_796(14 - 1 downto 0);
        else 
            B_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(ap_CS_fsm_state75, ap_CS_fsm_state77, ap_CS_fsm_state74, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_d0 <= p_Result_4_fu_746_p4;

    B_we0_assign_proc : process(ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            B_we0 <= ap_const_logic_1;
        else 
            B_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_277_p2)
    begin
        if (((exitcond2_fu_277_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_277_p2)
    begin
        if (((exitcond2_fu_277_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    d_chunk_V_13_fu_662_p1 <= xf_V_8_fu_526_p2(4 - 1 downto 0);
    d_chunk_V_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i_i_i_reg_925),4));
    exitcond1_fu_289_p2 <= "1" when (i_reg_211 = ap_const_lv14_270F) else "0";
    exitcond2_fu_277_p2 <= "1" when (t_reg_200 = ap_const_lv7_64) else "0";
    exitcond_fu_758_p2 <= "1" when (j_reg_223 = ap_const_lv14_270F) else "0";

    grp_fu_253_p0_assign_proc : process(reg_261, reg_267, ap_CS_fsm_state7, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_253_p0 <= reg_267;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_253_p0 <= reg_261;
        else 
            grp_fu_253_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_253_p1_assign_proc : process(reg_261, A_load_1_reg_806, ap_CS_fsm_state7, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_253_p1 <= reg_261;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_253_p1 <= A_load_1_reg_806;
        else 
            grp_fu_253_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_V_4_reg_878),52));
    grp_fu_496_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_mant_V_1_reg_834),55));
    grp_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_V_4_reg_878),55));
    grp_lut_div3_chunk_fu_234_ap_start <= grp_lut_div3_chunk_fu_234_ap_start_reg;

    grp_lut_div3_chunk_fu_234_d_V_assign_proc : process(ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state55, ap_CS_fsm_state57, ap_CS_fsm_state59, ap_CS_fsm_state61, ap_CS_fsm_state63, ap_CS_fsm_state65, ap_CS_fsm_state67, ap_CS_fsm_state69, ap_CS_fsm_state71, d_chunk_V_1_reg_930, d_chunk_V_2_reg_935, d_chunk_V_3_reg_940, d_chunk_V_4_reg_945, d_chunk_V_5_reg_950, d_chunk_V_6_reg_955, d_chunk_V_7_reg_960, d_chunk_V_8_reg_965, d_chunk_V_9_reg_970, d_chunk_V_10_reg_975, d_chunk_V_11_reg_980, d_chunk_V_12_reg_985, d_chunk_V_13_reg_990, d_chunk_V_reg_995, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            grp_lut_div3_chunk_fu_234_d_V <= d_chunk_V_13_reg_990;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            grp_lut_div3_chunk_fu_234_d_V <= d_chunk_V_12_reg_985;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_lut_div3_chunk_fu_234_d_V <= d_chunk_V_11_reg_980;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_lut_div3_chunk_fu_234_d_V <= d_chunk_V_10_reg_975;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_lut_div3_chunk_fu_234_d_V <= d_chunk_V_9_reg_970;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_lut_div3_chunk_fu_234_d_V <= d_chunk_V_8_reg_965;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_lut_div3_chunk_fu_234_d_V <= d_chunk_V_7_reg_960;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_lut_div3_chunk_fu_234_d_V <= d_chunk_V_6_reg_955;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_lut_div3_chunk_fu_234_d_V <= d_chunk_V_5_reg_950;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_lut_div3_chunk_fu_234_d_V <= d_chunk_V_4_reg_945;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_lut_div3_chunk_fu_234_d_V <= d_chunk_V_3_reg_940;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_lut_div3_chunk_fu_234_d_V <= d_chunk_V_2_reg_935;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_lut_div3_chunk_fu_234_d_V <= d_chunk_V_1_reg_930;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_lut_div3_chunk_fu_234_d_V <= d_chunk_V_reg_995;
        else 
            grp_lut_div3_chunk_fu_234_d_V <= "XXXX";
        end if; 
    end process;


    grp_lut_div3_chunk_fu_234_r_in_V_assign_proc : process(reg_272, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state55, ap_CS_fsm_state57, ap_CS_fsm_state59, ap_CS_fsm_state61, ap_CS_fsm_state63, ap_CS_fsm_state65, ap_CS_fsm_state67, ap_CS_fsm_state69, ap_CS_fsm_state71, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            grp_lut_div3_chunk_fu_234_r_in_V <= reg_272;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_lut_div3_chunk_fu_234_r_in_V <= ap_const_lv2_0;
        else 
            grp_lut_div3_chunk_fu_234_r_in_V <= "XX";
        end if; 
    end process;

    i_1_fu_310_p2 <= std_logic_vector(unsigned(ap_const_lv14_1) + unsigned(i_reg_211));
    icmp_fu_384_p2 <= "1" when (tmp_7_fu_374_p4 = ap_const_lv10_0) else "0";
    j_1_fu_769_p2 <= std_logic_vector(unsigned(j_reg_223) + unsigned(ap_const_lv14_1));
    new_exp_V_1_fu_332_p4 <= p_Val2_s_fu_320_p1(62 downto 52);
    new_exp_V_fu_406_p2 <= std_logic_vector(unsigned(new_exp_V_1_reg_827) - unsigned(shift_V_i_cast_cast_reg_841));
    new_mant_V_1_fu_342_p1 <= p_Val2_s_fu_320_p1(52 - 1 downto 0);
    new_mant_V_fu_710_p14 <= ((((((((((((call_ret2_i_i_i_reg_1000_0 & call_ret3_i_i_i_reg_1005_0) & call_ret4_i_i_i_reg_1010_0) & call_ret5_i_i_i_reg_1015_0) & call_ret6_i_i_i_reg_1020_0) & call_ret7_i_i_i_reg_1025_0) & call_ret8_i_i_i_reg_1030_0) & call_ret9_i_i_i_reg_1035_0) & call_ret10_i_i_i_reg_1040_0) & call_ret11_i_i_i_reg_1045_0) & call_ret12_i_i_i_reg_1050_0) & call_ret13_i_i_i_reg_1055_0) & grp_lut_div3_chunk_fu_234_ap_return_0);
    p_Repl2_1_fu_474_p3 <= 
        p_i_fu_460_p3 when (tmp_6_i_fu_468_p2(0) = '1') else 
        new_exp_V_fu_406_p2;
    p_Repl2_s_fu_740_p3 <= 
        new_mant_V_1_reg_834 when (tmp_2_i_reg_884(0) = '1') else 
        new_mant_V_fu_710_p14;
    p_Result_4_fu_746_p4 <= ((p_Repl2_2_reg_822 & p_Repl2_1_reg_889) & p_Repl2_s_reg_1060);
    
    p_Result_s_fu_511_p4_proc : process(xf_V_7_reg_919)
    begin
        p_Result_s_fu_511_p4 <= xf_V_7_reg_919;
        p_Result_s_fu_511_p4(52) <= ap_const_lv1_1(0);
    end process;

    p_Val2_s_fu_320_p1 <= reg_267;
    p_i_fu_460_p3 <= 
        ap_const_lv11_7FF when (tmp_2_i_fu_455_p2(0) = '1') else 
        ap_const_lv11_0;
    r_V_13_i_cast_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_15_reg_909),55));
    sel_tmp2_demorgan_i_fu_410_p2 <= (tmp_4_i_reg_856 or tmp_3_i_reg_848);
    sel_tmp2_i_fu_414_p2 <= (sel_tmp2_demorgan_i_fu_410_p2 xor ap_const_lv1_1);
    sel_tmp3_i_fu_420_p2 <= (sel_tmp2_i_fu_414_p2 and icmp_reg_862);
    sel_tmp6_i_fu_438_p2 <= (tmp_3_i_reg_848 xor ap_const_lv1_1);
    sel_tmp7_i_fu_443_p2 <= (tmp_4_i_reg_856 and sel_tmp6_i_fu_438_p2);
    shift_V_1_fu_396_p2 <= std_logic_vector(signed(ap_const_lv11_7FF) + signed(new_exp_V_1_fu_332_p4));
    shift_V_2_fu_425_p3 <= 
        shift_V_reg_868 when (sel_tmp3_i_fu_420_p2(0) = '1') else 
        shift_V_1_reg_873;
    shift_V_3_fu_431_p3 <= 
        ap_const_lv11_0 when (tmp_3_i_reg_848(0) = '1') else 
        shift_V_2_fu_425_p3;
    shift_V_4_fu_448_p3 <= 
        shift_V_i_cast_cast_reg_841 when (sel_tmp7_i_fu_443_p2(0) = '1') else 
        shift_V_3_fu_431_p3;
    shift_V_fu_390_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) - unsigned(new_exp_V_1_fu_332_p4));
    shift_V_i_cast_cast_fu_354_p3 <= 
        ap_const_lv11_1 when (tmp_6_fu_346_p3(0) = '1') else 
        ap_const_lv11_2;
    t_1_fu_283_p2 <= std_logic_vector(unsigned(t_reg_200) + unsigned(ap_const_lv7_1));
    tmp_1_i_fu_402_p2 <= "1" when (unsigned(shift_V_i_cast_cast_reg_841) > unsigned(new_exp_V_1_reg_827)) else "0";
    tmp_2_i_fu_455_p2 <= "1" when (new_exp_V_1_reg_827 = ap_const_lv11_7FF) else "0";
    tmp_3_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_211),64));
    tmp_3_i_fu_362_p2 <= "1" when (new_exp_V_1_fu_332_p4 = ap_const_lv11_0) else "0";
    tmp_4_i_fu_368_p2 <= "1" when (unsigned(shift_V_i_cast_cast_fu_354_p3) < unsigned(new_exp_V_1_fu_332_p4)) else "0";
    tmp_5_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_811),64));
    tmp_6_fu_346_p3 <= p_Val2_s_fu_320_p1(51 downto 51);
    tmp_6_i_fu_468_p2 <= (tmp_2_i_fu_455_p2 or tmp_1_i_fu_402_p2);
    tmp_7_fu_374_p4 <= p_Val2_s_fu_320_p1(62 downto 53);
    tmp_8_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_223),64));
    tmp_fu_295_p2 <= std_logic_vector(signed(ap_const_lv14_3FFF) + signed(i_reg_211));
    tmp_s_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_786),64));
    xf_V_5_fu_520_p3 <= 
        xf_V_7_reg_919 when (tmp_3_i_reg_848(0) = '1') else 
        p_Result_s_fu_511_p4;
    xf_V_7_fu_505_p3 <= 
        r_V_13_i_cast_fu_502_p1 when (icmp_reg_862(0) = '1') else 
        r_V_16_reg_914;
    xf_V_8_fu_526_p2 <= std_logic_vector(unsigned(ap_const_lv55_1) + unsigned(xf_V_5_fu_520_p3));
end behav;
