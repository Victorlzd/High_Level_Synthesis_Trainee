// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module lut_mul7_chunk (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        d_V,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] d_V;
output  [8:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] q01_address0;
reg    q01_ce0;
wire   [0:0] q01_q0;
wire   [5:0] q12_address0;
reg    q12_ce0;
wire   [0:0] q12_q0;
wire   [5:0] q23_address0;
reg    q23_ce0;
wire   [0:0] q23_q0;
wire   [5:0] q3_address0;
reg    q3_ce0;
wire   [0:0] q3_q0;
wire   [5:0] q4_address0;
reg    q4_ce0;
wire   [0:0] q4_q0;
wire   [5:0] q5_address0;
reg    q5_ce0;
wire   [0:0] q5_q0;
wire   [5:0] q6_address0;
reg    q6_ce0;
wire   [0:0] q6_q0;
wire   [5:0] q7_address0;
reg    q7_ce0;
wire   [0:0] q7_q0;
wire   [5:0] q8_address0;
reg    q8_ce0;
wire   [0:0] q8_q0;
wire   [63:0] tmp_fu_149_p1;
wire    ap_CS_fsm_state2;
wire   [8:0] p_Result_s_fu_162_p10;
reg   [8:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_preg = 9'd0;
end

lut_mul7_chunk_q01 #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q01_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q01_address0),
    .ce0(q01_ce0),
    .q0(q01_q0)
);

lut_mul7_chunk_q12 #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q12_address0),
    .ce0(q12_ce0),
    .q0(q12_q0)
);

lut_mul7_chunk_q23 #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q23_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q23_address0),
    .ce0(q23_ce0),
    .q0(q23_q0)
);

lut_mul7_chunk_q3 #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q3_address0),
    .ce0(q3_ce0),
    .q0(q3_q0)
);

lut_mul7_chunk_q4 #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q4_address0),
    .ce0(q4_ce0),
    .q0(q4_q0)
);

lut_mul7_chunk_q5 #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q5_address0),
    .ce0(q5_ce0),
    .q0(q5_q0)
);

lut_mul7_chunk_q6 #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q6_address0),
    .ce0(q6_ce0),
    .q0(q6_q0)
);

lut_mul7_chunk_q7 #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q7_address0),
    .ce0(q7_ce0),
    .q0(q7_q0)
);

lut_mul7_chunk_q8 #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q8_address0),
    .ce0(q8_ce0),
    .q0(q8_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 9'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_preg <= p_Result_s_fu_162_p10;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return <= p_Result_s_fu_162_p10;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        q01_ce0 = 1'b1;
    end else begin
        q01_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        q12_ce0 = 1'b1;
    end else begin
        q12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        q23_ce0 = 1'b1;
    end else begin
        q23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        q3_ce0 = 1'b1;
    end else begin
        q3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        q4_ce0 = 1'b1;
    end else begin
        q4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        q5_ce0 = 1'b1;
    end else begin
        q5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        q6_ce0 = 1'b1;
    end else begin
        q6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        q7_ce0 = 1'b1;
    end else begin
        q7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        q8_ce0 = 1'b1;
    end else begin
        q8_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign p_Result_s_fu_162_p10 = {{{{{{{{{q8_q0}, {q7_q0}}, {q6_q0}}, {q5_q0}}, {q4_q0}}, {q3_q0}}, {q23_q0}}, {q12_q0}}, {q01_q0}};

assign q01_address0 = tmp_fu_149_p1;

assign q12_address0 = tmp_fu_149_p1;

assign q23_address0 = tmp_fu_149_p1;

assign q3_address0 = tmp_fu_149_p1;

assign q4_address0 = tmp_fu_149_p1;

assign q5_address0 = tmp_fu_149_p1;

assign q6_address0 = tmp_fu_149_p1;

assign q7_address0 = tmp_fu_149_p1;

assign q8_address0 = tmp_fu_149_p1;

assign tmp_fu_149_p1 = d_V;

endmodule //lut_mul7_chunk
