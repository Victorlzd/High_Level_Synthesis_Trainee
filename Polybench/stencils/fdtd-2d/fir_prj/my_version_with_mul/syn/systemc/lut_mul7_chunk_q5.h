// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __lut_mul7_chunk_q5_H__
#define __lut_mul7_chunk_q5_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct lut_mul7_chunk_q5_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 1;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(lut_mul7_chunk_q5_ram) {
        for (unsigned i = 0; i < 5 ; i = i + 1) {
            ram[i] = "0b0";
        }
        for (unsigned i = 5; i < 10 ; i = i + 1) {
            ram[i] = "0b1";
        }
        ram[10] = "0b0";
        ram[11] = "0b0";
        ram[12] = "0b0";
        ram[13] = "0b0";
        for (unsigned i = 14; i < 19 ; i = i + 1) {
            ram[i] = "0b1";
        }
        ram[19] = "0b0";
        ram[20] = "0b0";
        ram[21] = "0b0";
        ram[22] = "0b0";
        for (unsigned i = 23; i < 28 ; i = i + 1) {
            ram[i] = "0b1";
        }
        ram[28] = "0b0";
        ram[29] = "0b0";
        ram[30] = "0b0";
        ram[31] = "0b0";
        for (unsigned i = 32; i < 37 ; i = i + 1) {
            ram[i] = "0b1";
        }
        for (unsigned i = 37; i < 42 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[42] = "0b1";
        ram[43] = "0b1";
        ram[44] = "0b1";
        ram[45] = "0b1";
        for (unsigned i = 46; i < 51 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[51] = "0b1";
        ram[52] = "0b1";
        ram[53] = "0b1";
        ram[54] = "0b1";
        for (unsigned i = 55; i < 60 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[60] = "0b1";
        ram[61] = "0b1";
        ram[62] = "0b1";
        ram[63] = "0b1";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(lut_mul7_chunk_q5) {


static const unsigned DataWidth = 1;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


lut_mul7_chunk_q5_ram* meminst;


SC_CTOR(lut_mul7_chunk_q5) {
meminst = new lut_mul7_chunk_q5_ram("lut_mul7_chunk_q5_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~lut_mul7_chunk_q5() {
    delete meminst;
}


};//endmodule
#endif
