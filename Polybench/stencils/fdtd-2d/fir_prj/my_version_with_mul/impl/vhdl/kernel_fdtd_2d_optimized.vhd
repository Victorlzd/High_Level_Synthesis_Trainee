-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_fdtd_2d_optimized is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tmax : IN STD_LOGIC_VECTOR (31 downto 0);
    nx : IN STD_LOGIC_VECTOR (31 downto 0);
    ny : IN STD_LOGIC_VECTOR (31 downto 0);
    ex_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ex_ce0 : OUT STD_LOGIC;
    ex_we0 : OUT STD_LOGIC;
    ex_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ex_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    ex_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ex_ce1 : OUT STD_LOGIC;
    ex_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    ey_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ey_ce0 : OUT STD_LOGIC;
    ey_we0 : OUT STD_LOGIC;
    ey_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ey_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    hz_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    hz_ce0 : OUT STD_LOGIC;
    hz_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    hz_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    hz_ce1 : OUT STD_LOGIC;
    hz_we1 : OUT STD_LOGIC;
    hz_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    hz_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_fict_s_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_fict_s_ce0 : OUT STD_LOGIC;
    p_fict_s_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of kernel_fdtd_2d_optimized is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel_fdtd_2d_optimized,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.731250,HLS_SYN_LAT=5541053901,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=2395,HLS_SYN_LUT=7158,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (77 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (77 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (77 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (77 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (77 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (77 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (77 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (77 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (77 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (77 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (77 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (77 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_12 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv20_3E8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001111101000";
    constant ap_const_lv10_3E7 : STD_LOGIC_VECTOR (9 downto 0) := "1111100111";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    constant ap_const_lv42_0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000000";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv45_0 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_7FE : STD_LOGIC_VECTOR (10 downto 0) := "11111111110";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv57_2 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv57_1FFFFFFFFFFFFFF : STD_LOGIC_VECTOR (56 downto 0) := "111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal r0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r0_ce0 : STD_LOGIC;
    signal r0_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal r1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r1_ce0 : STD_LOGIC;
    signal r1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal r2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r2_ce0 : STD_LOGIC;
    signal r2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal q0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal q0_ce0 : STD_LOGIC;
    signal q0_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal q1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal q1_ce0 : STD_LOGIC;
    signal q1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal q2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal q2_ce0 : STD_LOGIC;
    signal q2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_729 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal reg_734 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_722_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_739 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal reg_747 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal reg_753 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal t_1_fu_764_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_1_reg_2325 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_fict_addr_reg_2330 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_781_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_4_reg_2338 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_1_fu_2304_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_1_reg_2356 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond3_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_2310_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_2_reg_2361 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_5_fu_818_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_5_reg_2369 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ey_addr_1_reg_2374 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond4_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_849_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Repl2_2_reg_2394 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_1_fu_917_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Repl2_1_reg_2399 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_mant_V_8_fu_1037_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal new_mant_V_8_reg_2404 : STD_LOGIC_VECTOR (51 downto 0);
    signal out_fu_1052_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal next_mul_fu_1057_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal next_mul_reg_2414 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal i_5_fu_1069_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_5_reg_2422 : STD_LOGIC_VECTOR (9 downto 0);
    signal ex_addr_reg_2430 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal exitcond8_fu_1075_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_6_fu_1118_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_6_reg_2445 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Repl2_5_reg_2450 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_4_fu_1186_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Repl2_4_reg_2455 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_mant_V_9_fu_1306_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal new_mant_V_9_reg_2460 : STD_LOGIC_VECTOR (51 downto 0);
    signal out_1_fu_1321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal next_mul2_fu_1326_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal next_mul2_reg_2470 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal i_4_fu_1338_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_4_reg_2478 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_2316_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_10_reg_2483 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond7_fu_1332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_7_fu_1354_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_7_reg_2491 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_38_cast_fu_1370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_cast_reg_2496 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_1348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_1375_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_28_fu_1375_p2 : signal is "no";
    signal tmp_28_reg_2507 : STD_LOGIC_VECTOR (19 downto 0);
    signal ex_load_2_reg_2517 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal hz_addr_4_reg_2532 : STD_LOGIC_VECTOR (19 downto 0);
    signal loc_V_reg_2538 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal loc_V_1_fu_1413_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_1_reg_2544 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_i_i_reg_2549 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal p_Result_i_i_19_reg_2554 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_1_i_i_reg_2559 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_2_i_i_reg_2564 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_3_i_i_reg_2569 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_4_i_i_reg_2574 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_5_i_i_reg_2579 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_6_i_i_reg_2584 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_7_i_i_reg_2589 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_8_i_i_fu_1595_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Result_8_i_i_reg_2594 : STD_LOGIC_VECTOR (1 downto 0);
    signal this_assign_14_i_i_fu_1605_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal this_assign_14_i_i_reg_2599 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal grp_lut_mul7_chunk_fu_607_ap_idle : STD_LOGIC;
    signal grp_lut_mul7_chunk_fu_607_ap_ready : STD_LOGIC;
    signal grp_lut_mul7_chunk_fu_607_ap_done : STD_LOGIC;
    signal grp_lut_mul7_chunk_fu_630_ap_idle : STD_LOGIC;
    signal grp_lut_mul7_chunk_fu_630_ap_ready : STD_LOGIC;
    signal grp_lut_mul7_chunk_fu_630_ap_done : STD_LOGIC;
    signal grp_lut_mul7_chunk_fu_653_ap_idle : STD_LOGIC;
    signal grp_lut_mul7_chunk_fu_653_ap_ready : STD_LOGIC;
    signal grp_lut_mul7_chunk_fu_653_ap_done : STD_LOGIC;
    signal grp_lut_mul7_chunk_fu_676_ap_idle : STD_LOGIC;
    signal grp_lut_mul7_chunk_fu_676_ap_ready : STD_LOGIC;
    signal grp_lut_mul7_chunk_fu_676_ap_done : STD_LOGIC;
    signal grp_lut_mul7_chunk_fu_699_ap_idle : STD_LOGIC;
    signal grp_lut_mul7_chunk_fu_699_ap_ready : STD_LOGIC;
    signal grp_lut_mul7_chunk_fu_699_ap_done : STD_LOGIC;
    signal ap_block_state63_on_subcall_done : BOOLEAN;
    signal tmp35_fu_1691_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp35_reg_2604 : STD_LOGIC_VECTOR (39 downto 0);
    signal agg_result_V_i_i_fu_1772_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal agg_result_V_i_i_reg_2609 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_block_state64_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal grp_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_assign_2_reg_2619 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal p_Repl2_11_reg_2624 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_V_fu_1793_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal exp_V_reg_2629 : STD_LOGIC_VECTOR (10 downto 0);
    signal mant_V_fu_1803_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mant_V_reg_2634 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_i_20_fu_1835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_20_reg_2639 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_exp_V_5_fu_1841_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_exp_V_5_reg_2644 : STD_LOGIC_VECTOR (10 downto 0);
    signal xf_V_14_fu_1989_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal xf_V_14_reg_2649 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_48_fu_2029_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_48_reg_2658 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal tmp_45_fu_1999_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_2105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_reg_2693 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_2111_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_59_reg_2701 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_6_fu_2115_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_6_reg_2709 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Repl2_10_fu_2143_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Repl2_10_reg_2714 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Repl2_6_fu_2150_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Repl2_6_reg_2719 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_5_fu_2157_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal p_Result_7_fu_2286_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal out_2_fu_2299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal grp_lut_mul7_chunk_fu_607_ap_start : STD_LOGIC;
    signal grp_lut_mul7_chunk_fu_607_d_V : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_lut_mul7_chunk_fu_607_ap_return : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_lut_mul7_chunk_fu_630_ap_start : STD_LOGIC;
    signal grp_lut_mul7_chunk_fu_630_d_V : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_lut_mul7_chunk_fu_630_ap_return : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_lut_mul7_chunk_fu_653_ap_start : STD_LOGIC;
    signal grp_lut_mul7_chunk_fu_653_d_V : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_lut_mul7_chunk_fu_653_ap_return : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_lut_mul7_chunk_fu_676_ap_start : STD_LOGIC;
    signal grp_lut_mul7_chunk_fu_676_d_V : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_lut_mul7_chunk_fu_676_ap_return : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_lut_mul7_chunk_fu_699_ap_start : STD_LOGIC;
    signal grp_lut_mul7_chunk_fu_699_d_V : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_lut_mul7_chunk_fu_699_ap_return : STD_LOGIC_VECTOR (8 downto 0);
    signal t_reg_459 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_470 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_reg_482 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond2_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_reg_494 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_1_reg_505 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_mul_reg_516 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_2_reg_528 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal exitcond9_fu_1063_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_539 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_mul1_reg_550 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_3_reg_562 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal p_Repl2_9_reg_573 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_8_reg_584 : STD_LOGIC_VECTOR (56 downto 0);
    signal i_i_i_i_reg_596 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_lut_mul7_chunk_fu_607_ap_start_reg : STD_LOGIC := '0';
    signal grp_lut_mul7_chunk_fu_630_ap_start_reg : STD_LOGIC := '0';
    signal grp_lut_mul7_chunk_fu_653_ap_start_reg : STD_LOGIC := '0';
    signal grp_lut_mul7_chunk_fu_676_ap_start_reg : STD_LOGIC := '0';
    signal grp_lut_mul7_chunk_fu_699_ap_start_reg : STD_LOGIC := '0';
    signal tmp_fu_770_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_787_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_cast_fu_833_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_cast_fu_844_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_cast_fu_1091_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_cast_fu_1113_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_cast_fu_1390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_cast_fu_1395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_i_i_fu_2095_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_fu_722_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_722_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal grp_fu_726_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_802_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_cast_fu_824_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_3_fu_828_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of tmp_3_fu_828_p2 : signal is "no";
    signal tmp_4_fu_839_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of tmp_4_fu_839_p2 : signal is "no";
    signal p_Val2_s_fu_855_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal new_mant_V_fu_877_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal new_exp_V_fu_867_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_new_exp_V_1_i_fu_903_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_exp_V_1_fu_897_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_925_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_941_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_fu_935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_961_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shift_V_i_fu_957_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shift_V_i_cast_fu_951_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xf_V_4_i_cast_fu_881_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_2_i_fu_975_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal xf_V_fu_983_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_0274_2_i_fu_967_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_i_cast_fu_1005_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_i_cast_fu_991_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_9_i_fu_1001_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_15_fu_1009_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal r_V_16_fu_1015_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_8_i_fu_995_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_1021_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_14_fu_1025_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal new_mant_V_1_fu_1029_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_s_fu_1045_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_cast_fu_1081_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_15_fu_1085_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_12_fu_1097_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_cast_fu_1103_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_17_fu_1107_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_1_fu_1124_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal new_mant_V_4_fu_1146_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal new_exp_V_2_fu_1136_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i6_fu_1154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i7_fu_1160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_1180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_new_exp_V_1_i9_fu_1172_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_exp_V_3_fu_1166_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_22_fu_1194_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_21_fu_1210_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp5_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_1230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shift_V_i1_fu_1226_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shift_V_i12_cast_fu_1220_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xf_V_4_i5_cast_fu_1150_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_2_i1_fu_1244_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal xf_V_3_fu_1252_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_0274_2_i1_fu_1236_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_i19_cast_fu_1274_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_i17_cast_fu_1260_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_9_i1_fu_1270_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_17_fu_1278_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal r_V_18_fu_1284_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_8_i1_fu_1264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_1290_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_26_fu_1294_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal new_mant_V_3_fu_1298_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_2_fu_1314_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_cast_fu_1360_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_27_fu_1364_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_18_cast_fu_1380_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_29_fu_1384_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_2_fu_1399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_i_fu_1417_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_i_i_i_i_cast_fu_1430_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_1433_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_41_i_i_i_fu_1447_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_1439_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_i_i_i_cast_fu_1452_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_fu_1456_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_cast_fu_1464_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_i_i_i_cast_fu_1472_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_43_i_i_i_fu_1476_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_i_i_i_cast_fu_1426_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_42_i_i_i_fu_1468_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_43_i_i_i_cast_fu_1482_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_44_i_i_i_fu_1486_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal smantissa_V_fu_1492_p3 : STD_LOGIC_VECTOR (168 downto 0);
    signal r_V_fu_1609_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_4_fu_1621_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_5_fu_1633_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_6_fu_1645_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_7_fu_1657_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal r_V_4_cast_fu_1629_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_cast_fu_1617_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp32_fu_1669_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_7_cast_fu_1665_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_6_cast_fu_1653_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_5_cast_fu_1641_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp33_fu_1679_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp40_cast_fu_1675_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp34_fu_1685_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_8_fu_1697_p3 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_9_fu_1709_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_32_fu_1721_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_9_cast_fu_1717_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal r_V_8_cast_fu_1705_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp36_fu_1736_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_37_fu_1746_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_V_11_fu_1725_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp38_fu_1750_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp44_cast_fu_1742_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp39_fu_1760_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp39_cast_fu_1733_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp40_fu_1766_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_5_fu_1782_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_fu_1811_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp1_fu_1821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_i31_cast_cast_fu_1827_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_i1_fu_1847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i2_fu_1853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_i_fu_1885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_i_fu_1891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_i34_cast_cas_fu_1859_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_1_fu_1879_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sel_tmp5_demorgan_i_fu_1905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_fu_1867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_i_fu_1911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_i_fu_1917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_fu_1873_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_2_fu_1897_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_3_fu_1923_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_4_fu_1931_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_i_cast_fu_1943_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal r_V_19_fu_1947_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal xf_V_6_fu_1807_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_5_i_fu_1939_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal r_V_2_i_cast_fu_1953_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal r_V_20_fu_1957_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal xf_V_13_fu_1963_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal p_Result_3_fu_1971_p4 : STD_LOGIC_VECTOR (56 downto 0);
    signal xf_V_11_fu_1981_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_47_fu_2007_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_i_i_i_fu_2011_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_i_i_i_cast_fu_2019_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_i_i_i_cast_fu_1995_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Lo_assign_fu_2023_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_fu_2039_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_49_fu_2033_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_2043_p4 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_52_fu_2052_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_54_fu_2065_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_53_fu_2058_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_55_fu_2073_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_56_fu_2077_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal d_chunk_V_fu_2083_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_4_fu_2087_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_i_fu_2125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_i_fu_2138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_2_i_fu_2130_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_mant_V_7_fu_2121_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_6_fu_2167_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_60_fu_2181_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_61_fu_2186_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_62_fu_2191_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_64_fu_2203_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_63_fu_2197_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_65_fu_2209_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal loc_V_2_fu_2177_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_66_fu_2215_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_69_fu_2227_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_70_fu_2233_p4 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_67_fu_2219_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_68_fu_2223_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_72_fu_2250_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_73_fu_2256_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal p_demorgan_fu_2262_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_74_fu_2268_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_71_fu_2243_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_75_fu_2274_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_76_fu_2280_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal p_Result_8_fu_2292_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_2304_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_2304_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_2310_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_2310_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_fu_2316_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_2316_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_722_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_10_fu_2316_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_1_fu_2304_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_2_fu_2310_p00 : STD_LOGIC_VECTOR (19 downto 0);

    component lut_mul7_chunk IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        d_V : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component kernel_fdtd_2d_ophbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_fdtd_2d_opibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_fdtd_2d_opjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component kernel_fdtd_2d_opbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kernel_fdtd_2d_opcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kernel_fdtd_2d_opdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kernel_fdtd_2d_opeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kernel_fdtd_2d_opfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kernel_fdtd_2d_opg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    r0_U : component kernel_fdtd_2d_opbkb
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => r0_address0,
        ce0 => r0_ce0,
        q0 => r0_q0);

    r1_U : component kernel_fdtd_2d_opcud
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => r1_address0,
        ce0 => r1_ce0,
        q0 => r1_q0);

    r2_U : component kernel_fdtd_2d_opdEe
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => r2_address0,
        ce0 => r2_ce0,
        q0 => r2_q0);

    q0_U : component kernel_fdtd_2d_opeOg
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => q0_address0,
        ce0 => q0_ce0,
        q0 => q0_q0);

    q1_U : component kernel_fdtd_2d_opfYi
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => q1_address0,
        ce0 => q1_ce0,
        q0 => q1_q0);

    q2_U : component kernel_fdtd_2d_opg8j
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => q2_address0,
        ce0 => q2_ce0,
        q0 => q2_q0);

    grp_lut_mul7_chunk_fu_607 : component lut_mul7_chunk
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lut_mul7_chunk_fu_607_ap_start,
        ap_done => grp_lut_mul7_chunk_fu_607_ap_done,
        ap_idle => grp_lut_mul7_chunk_fu_607_ap_idle,
        ap_ready => grp_lut_mul7_chunk_fu_607_ap_ready,
        d_V => grp_lut_mul7_chunk_fu_607_d_V,
        ap_return => grp_lut_mul7_chunk_fu_607_ap_return);

    grp_lut_mul7_chunk_fu_630 : component lut_mul7_chunk
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lut_mul7_chunk_fu_630_ap_start,
        ap_done => grp_lut_mul7_chunk_fu_630_ap_done,
        ap_idle => grp_lut_mul7_chunk_fu_630_ap_idle,
        ap_ready => grp_lut_mul7_chunk_fu_630_ap_ready,
        d_V => grp_lut_mul7_chunk_fu_630_d_V,
        ap_return => grp_lut_mul7_chunk_fu_630_ap_return);

    grp_lut_mul7_chunk_fu_653 : component lut_mul7_chunk
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lut_mul7_chunk_fu_653_ap_start,
        ap_done => grp_lut_mul7_chunk_fu_653_ap_done,
        ap_idle => grp_lut_mul7_chunk_fu_653_ap_idle,
        ap_ready => grp_lut_mul7_chunk_fu_653_ap_ready,
        d_V => grp_lut_mul7_chunk_fu_653_d_V,
        ap_return => grp_lut_mul7_chunk_fu_653_ap_return);

    grp_lut_mul7_chunk_fu_676 : component lut_mul7_chunk
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lut_mul7_chunk_fu_676_ap_start,
        ap_done => grp_lut_mul7_chunk_fu_676_ap_done,
        ap_idle => grp_lut_mul7_chunk_fu_676_ap_idle,
        ap_ready => grp_lut_mul7_chunk_fu_676_ap_ready,
        d_V => grp_lut_mul7_chunk_fu_676_d_V,
        ap_return => grp_lut_mul7_chunk_fu_676_ap_return);

    grp_lut_mul7_chunk_fu_699 : component lut_mul7_chunk
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lut_mul7_chunk_fu_699_ap_start,
        ap_done => grp_lut_mul7_chunk_fu_699_ap_done,
        ap_idle => grp_lut_mul7_chunk_fu_699_ap_idle,
        ap_ready => grp_lut_mul7_chunk_fu_699_ap_ready,
        d_V => grp_lut_mul7_chunk_fu_699_d_V,
        ap_return => grp_lut_mul7_chunk_fu_699_ap_return);

    kernel_fdtd_2d_ophbi_U11 : component kernel_fdtd_2d_ophbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_722_p0,
        din1 => grp_fu_722_p1,
        opcode => grp_fu_722_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_722_p2);

    kernel_fdtd_2d_opibs_U12 : component kernel_fdtd_2d_opibs
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_726_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_726_p1);

    kernel_fdtd_2d_opjbC_U13 : component kernel_fdtd_2d_opjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_1_fu_2304_p0,
        din1 => tmp_1_fu_2304_p1,
        dout => tmp_1_fu_2304_p2);

    kernel_fdtd_2d_opjbC_U14 : component kernel_fdtd_2d_opjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_2_fu_2310_p0,
        din1 => tmp_2_fu_2310_p1,
        dout => tmp_2_fu_2310_p2);

    kernel_fdtd_2d_opjbC_U15 : component kernel_fdtd_2d_opjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_10_fu_2316_p0,
        din1 => tmp_10_fu_2316_p1,
        dout => tmp_10_fu_2316_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_lut_mul7_chunk_fu_607_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lut_mul7_chunk_fu_607_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state62) or ((ap_const_boolean_0 = ap_block_state63_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state63)))) then 
                    grp_lut_mul7_chunk_fu_607_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lut_mul7_chunk_fu_607_ap_ready = ap_const_logic_1)) then 
                    grp_lut_mul7_chunk_fu_607_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_lut_mul7_chunk_fu_630_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lut_mul7_chunk_fu_630_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state62) or ((ap_const_boolean_0 = ap_block_state63_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state63)))) then 
                    grp_lut_mul7_chunk_fu_630_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lut_mul7_chunk_fu_630_ap_ready = ap_const_logic_1)) then 
                    grp_lut_mul7_chunk_fu_630_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_lut_mul7_chunk_fu_653_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lut_mul7_chunk_fu_653_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state62) or ((ap_const_boolean_0 = ap_block_state63_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state63)))) then 
                    grp_lut_mul7_chunk_fu_653_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lut_mul7_chunk_fu_653_ap_ready = ap_const_logic_1)) then 
                    grp_lut_mul7_chunk_fu_653_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_lut_mul7_chunk_fu_676_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lut_mul7_chunk_fu_676_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state62) or ((ap_const_boolean_0 = ap_block_state63_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state63)))) then 
                    grp_lut_mul7_chunk_fu_676_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lut_mul7_chunk_fu_676_ap_ready = ap_const_logic_1)) then 
                    grp_lut_mul7_chunk_fu_676_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_lut_mul7_chunk_fu_699_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lut_mul7_chunk_fu_699_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state62) or ((ap_const_boolean_0 = ap_block_state63_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state63)))) then 
                    grp_lut_mul7_chunk_fu_699_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lut_mul7_chunk_fu_699_ap_ready = ap_const_logic_1)) then 
                    grp_lut_mul7_chunk_fu_699_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_505_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_792_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_1_reg_505 <= ap_const_lv10_0;
            elsif (((exitcond8_fu_1075_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                i_1_reg_505 <= i_5_reg_2422;
            end if; 
        end if;
    end process;

    i_2_reg_539_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_1063_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                i_2_reg_539 <= ap_const_lv10_0;
            elsif (((exitcond_fu_1348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                i_2_reg_539 <= i_4_reg_2478;
            end if; 
        end if;
    end process;

    i_i_i_i_reg_596_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                i_i_i_i_reg_596 <= i_6_reg_2709;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                i_i_i_i_reg_596 <= ap_const_lv6_12;
            end if; 
        end if;
    end process;

    i_reg_482_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_775_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_482 <= ap_const_lv10_1;
            elsif (((exitcond4_fu_812_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_reg_482 <= i_3_fu_849_p2;
            end if; 
        end if;
    end process;

    j_1_reg_494_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_792_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_1_reg_494 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                j_1_reg_494 <= j_5_reg_2369;
            end if; 
        end if;
    end process;

    j_2_reg_528_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_1063_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                j_2_reg_528 <= ap_const_lv10_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                j_2_reg_528 <= j_6_reg_2445;
            end if; 
        end if;
    end process;

    j_3_reg_562_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_1332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                j_3_reg_562 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
                j_3_reg_562 <= j_7_reg_2491;
            end if; 
        end if;
    end process;

    j_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_758_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_470 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_reg_470 <= j_4_reg_2338;
            end if; 
        end if;
    end process;

    p_Repl2_9_reg_573_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                p_Repl2_9_reg_573 <= p_Result_5_fu_2157_p4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                p_Repl2_9_reg_573 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_550_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_1063_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                phi_mul1_reg_550 <= ap_const_lv20_0;
            elsif (((exitcond_fu_1348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                phi_mul1_reg_550 <= next_mul2_reg_2470;
            end if; 
        end if;
    end process;

    phi_mul_reg_516_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_792_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul_reg_516 <= ap_const_lv20_0;
            elsif (((exitcond8_fu_1075_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                phi_mul_reg_516 <= next_mul_reg_2414;
            end if; 
        end if;
    end process;

    t_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_1332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                t_reg_459 <= t_1_reg_2325;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_reg_459 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state64_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state64))) then
                agg_result_V_i_i_reg_2609 <= agg_result_V_i_i_fu_1772_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_1075_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                ex_addr_reg_2430 <= tmp_35_cast_fu_1091_p1(20 - 1 downto 0);
                j_6_reg_2445 <= j_6_fu_1118_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                ex_load_2_reg_2517 <= ex_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                exp_V_reg_2629 <= p_Val2_5_fu_1782_p1(62 downto 52);
                mant_V_reg_2634 <= mant_V_fu_1803_p1;
                new_exp_V_5_reg_2644 <= new_exp_V_5_fu_1841_p2;
                p_Repl2_11_reg_2624 <= p_Val2_5_fu_1782_p1(63 downto 63);
                tmp_i_20_reg_2639 <= tmp_i_20_fu_1835_p2;
                xf_V_14_reg_2649 <= xf_V_14_fu_1989_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_812_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                ey_addr_1_reg_2374 <= tmp_31_cast_fu_833_p1(20 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                hz_addr_4_reg_2532 <= tmp_38_cast_reg_2496(20 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                i_4_reg_2478 <= i_4_fu_1338_p2;
                next_mul2_reg_2470 <= next_mul2_fu_1326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                i_5_reg_2422 <= i_5_fu_1069_p2;
                next_mul_reg_2414 <= next_mul_fu_1057_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_45_fu_1999_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                i_6_reg_2709 <= i_6_fu_2115_p2;
                tmp_48_reg_2658 <= tmp_48_fu_2029_p1;
                tmp_58_reg_2693 <= tmp_58_fu_2105_p2;
                tmp_59_reg_2701 <= tmp_59_fu_2111_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then
                in_assign_2_reg_2619 <= grp_fu_726_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_4_reg_2338 <= j_4_fu_781_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_5_reg_2369 <= j_5_fu_818_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                j_7_reg_2491 <= j_7_fu_1354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                loc_V_1_reg_2544 <= loc_V_1_fu_1413_p1;
                loc_V_reg_2538 <= p_Val2_2_fu_1399_p1(62 downto 52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                new_mant_V_8_reg_2404 <= new_mant_V_8_fu_1037_p3;
                p_Repl2_1_reg_2399 <= p_Repl2_1_fu_917_p3;
                p_Repl2_2_reg_2394 <= p_Val2_s_fu_855_p1(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                new_mant_V_9_reg_2460 <= new_mant_V_9_fu_1306_p3;
                p_Repl2_4_reg_2455 <= p_Repl2_4_fu_1186_p3;
                p_Repl2_5_reg_2450 <= p_Val2_1_fu_1124_p1(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_45_fu_1999_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                p_Repl2_10_reg_2714 <= p_Repl2_10_fu_2143_p3;
                p_Repl2_6_reg_2719 <= p_Repl2_6_fu_2150_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                p_Result_1_i_i_reg_2559 <= smantissa_V_fu_1492_p3(70 downto 65);
                p_Result_2_i_i_reg_2564 <= smantissa_V_fu_1492_p3(76 downto 71);
                p_Result_3_i_i_reg_2569 <= smantissa_V_fu_1492_p3(82 downto 77);
                p_Result_4_i_i_reg_2574 <= smantissa_V_fu_1492_p3(88 downto 83);
                p_Result_5_i_i_reg_2579 <= smantissa_V_fu_1492_p3(94 downto 89);
                p_Result_6_i_i_reg_2584 <= smantissa_V_fu_1492_p3(100 downto 95);
                p_Result_7_i_i_reg_2589 <= smantissa_V_fu_1492_p3(106 downto 101);
                p_Result_8_i_i_reg_2594 <= p_Result_8_i_i_fu_1595_p4;
                p_Result_i_i_19_reg_2554 <= smantissa_V_fu_1492_p3(64 downto 59);
                p_Result_i_i_reg_2549 <= smantissa_V_fu_1492_p3(58 downto 53);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                p_Val2_8_reg_584 <= p_Result_7_fu_2286_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_758_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_fict_addr_reg_2330 <= tmp_fu_770_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_729 <= hz_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_734 <= hz_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_739 <= grp_fu_722_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state51))) then
                reg_747 <= ey_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34))) then
                reg_753 <= ex_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                t_1_reg_2325 <= t_1_fu_764_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state63_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    this_assign_14_i_i_reg_2599(1 downto 0) <= this_assign_14_i_i_fu_1605_p1(1 downto 0);
                    tmp35_reg_2604(39 downto 6) <= tmp35_fu_1691_p2(39 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_1332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                tmp_10_reg_2483 <= tmp_10_fu_2316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_792_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_1_reg_2356 <= tmp_1_fu_2304_p2;
                tmp_2_reg_2361 <= tmp_2_fu_2310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_1348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                tmp_28_reg_2507 <= tmp_28_fu_1375_p2;
                    tmp_38_cast_reg_2496(19 downto 0) <= tmp_38_cast_fu_1370_p1(19 downto 0);
            end if;
        end if;
    end process;
    tmp_38_cast_reg_2496(63 downto 20) <= "00000000000000000000000000000000000000000000";
    this_assign_14_i_i_reg_2599(5 downto 2) <= "0000";
    tmp35_reg_2604(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_758_p2, ap_CS_fsm_state3, ap_CS_fsm_state6, exitcond3_fu_792_p2, ap_CS_fsm_state7, exitcond4_fu_812_p2, ap_CS_fsm_state24, ap_CS_fsm_state25, exitcond8_fu_1075_p2, ap_CS_fsm_state42, exitcond7_fu_1332_p2, ap_CS_fsm_state43, exitcond_fu_1348_p2, ap_CS_fsm_state63, ap_block_state63_on_subcall_done, ap_CS_fsm_state64, ap_block_state64_on_subcall_done, ap_CS_fsm_state70, tmp_45_fu_1999_p3, exitcond2_fu_775_p2, exitcond9_fu_1063_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_758_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond2_fu_775_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((exitcond3_fu_792_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((exitcond4_fu_812_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state24 => 
                if (((exitcond9_fu_1063_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                if (((exitcond8_fu_1075_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state42 => 
                if (((exitcond7_fu_1332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                if (((exitcond_fu_1348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                if (((ap_const_boolean_0 = ap_block_state63_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state64 => 
                if (((ap_const_boolean_0 = ap_block_state64_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state64))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                if (((tmp_45_fu_1999_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Lo_assign_fu_2023_p2 <= std_logic_vector(unsigned(p_shl_i_i_i_cast_fu_2019_p1) - unsigned(i_i_i_i_cast_fu_1995_p1));
    agg_result_V_i_i_fu_1772_p2 <= std_logic_vector(unsigned(tmp39_cast_fu_1733_p1) + unsigned(tmp40_fu_1766_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state63_on_subcall_done_assign_proc : process(grp_lut_mul7_chunk_fu_607_ap_done, grp_lut_mul7_chunk_fu_630_ap_done, grp_lut_mul7_chunk_fu_653_ap_done, grp_lut_mul7_chunk_fu_676_ap_done, grp_lut_mul7_chunk_fu_699_ap_done)
    begin
                ap_block_state63_on_subcall_done <= ((grp_lut_mul7_chunk_fu_699_ap_done = ap_const_logic_0) or (grp_lut_mul7_chunk_fu_676_ap_done = ap_const_logic_0) or (grp_lut_mul7_chunk_fu_653_ap_done = ap_const_logic_0) or (grp_lut_mul7_chunk_fu_630_ap_done = ap_const_logic_0) or (grp_lut_mul7_chunk_fu_607_ap_done = ap_const_logic_0));
    end process;


    ap_block_state64_on_subcall_done_assign_proc : process(grp_lut_mul7_chunk_fu_607_ap_done, grp_lut_mul7_chunk_fu_630_ap_done, grp_lut_mul7_chunk_fu_653_ap_done, grp_lut_mul7_chunk_fu_676_ap_done, grp_lut_mul7_chunk_fu_699_ap_done)
    begin
                ap_block_state64_on_subcall_done <= ((grp_lut_mul7_chunk_fu_699_ap_done = ap_const_logic_0) or (grp_lut_mul7_chunk_fu_676_ap_done = ap_const_logic_0) or (grp_lut_mul7_chunk_fu_653_ap_done = ap_const_logic_0) or (grp_lut_mul7_chunk_fu_630_ap_done = ap_const_logic_0) or (grp_lut_mul7_chunk_fu_607_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_758_p2)
    begin
        if (((exitcond1_fu_758_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_758_p2)
    begin
        if (((exitcond1_fu_758_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    d_chunk_V_fu_2083_p1 <= tmp_56_fu_2077_p2(3 - 1 downto 0);

    ex_address0_assign_proc : process(ex_addr_reg_2430, ap_CS_fsm_state43, tmp_40_cast_fu_1390_p1, ap_CS_fsm_state31, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            ex_address0 <= tmp_40_cast_fu_1390_p1(20 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            ex_address0 <= ex_addr_reg_2430;
        else 
            ex_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    ex_address1 <= tmp_38_cast_fu_1370_p1(20 - 1 downto 0);

    ex_ce0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state46, ap_CS_fsm_state43, ap_CS_fsm_state41, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            ex_ce0 <= ap_const_logic_1;
        else 
            ex_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ex_ce1_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            ex_ce1 <= ap_const_logic_1;
        else 
            ex_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ex_d0 <= reg_739;

    ex_we0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            ex_we0 <= ap_const_logic_1;
        else 
            ex_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_758_p2 <= "1" when (t_reg_459 = ap_const_lv6_32) else "0";
    exitcond2_fu_775_p2 <= "1" when (j_reg_470 = ap_const_lv10_3E8) else "0";
    exitcond3_fu_792_p2 <= "1" when (i_reg_482 = ap_const_lv10_3E8) else "0";
    exitcond4_fu_812_p2 <= "1" when (j_1_reg_494 = ap_const_lv10_3E8) else "0";
    exitcond7_fu_1332_p2 <= "1" when (i_2_reg_539 = ap_const_lv10_3E7) else "0";
    exitcond8_fu_1075_p2 <= "1" when (j_2_reg_528 = ap_const_lv10_3E8) else "0";
    exitcond9_fu_1063_p2 <= "1" when (i_1_reg_505 = ap_const_lv10_3E8) else "0";
    exitcond_fu_1348_p2 <= "1" when (j_3_reg_562 = ap_const_lv10_3E7) else "0";
    exp_V_fu_1793_p4 <= p_Val2_5_fu_1782_p1(62 downto 52);

    ey_address0_assign_proc : process(ap_CS_fsm_state4, ey_addr_1_reg_2374, tmp_38_cast_reg_2496, ap_CS_fsm_state48, ap_CS_fsm_state53, tmp_s_fu_787_p1, tmp_39_cast_fu_1395_p1, ap_CS_fsm_state13, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            ey_address0 <= tmp_38_cast_reg_2496(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            ey_address0 <= tmp_39_cast_fu_1395_p1(20 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ey_address0 <= ey_addr_1_reg_2374;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ey_address0 <= tmp_s_fu_787_p1(20 - 1 downto 0);
        else 
            ey_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ey_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state51, ap_CS_fsm_state56, ap_CS_fsm_state16, ap_CS_fsm_state4, ap_CS_fsm_state48, ap_CS_fsm_state53, ap_CS_fsm_state5, ap_CS_fsm_state23, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state22, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state54, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ey_ce0 <= ap_const_logic_1;
        else 
            ey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ey_d0_assign_proc : process(p_fict_s_q0, reg_739, ap_CS_fsm_state4, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ey_d0 <= reg_739;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ey_d0 <= p_fict_s_q0;
        else 
            ey_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ey_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ey_we0 <= ap_const_logic_1;
        else 
            ey_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_722_opcode_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state35, ap_CS_fsm_state72, ap_CS_fsm_state11, ap_CS_fsm_state29, ap_CS_fsm_state47, ap_CS_fsm_state52, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_722_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_722_opcode <= ap_const_lv2_0;
        else 
            grp_fu_722_opcode <= "XX";
        end if; 
    end process;


    grp_fu_722_p0_assign_proc : process(reg_729, reg_739, reg_747, reg_753, ap_CS_fsm_state17, ap_CS_fsm_state35, ap_CS_fsm_state72, ap_CS_fsm_state11, ap_CS_fsm_state29, ap_CS_fsm_state47, ap_CS_fsm_state52, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            grp_fu_722_p0 <= reg_739;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            grp_fu_722_p0 <= reg_753;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_722_p0 <= reg_747;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_722_p0 <= reg_729;
        else 
            grp_fu_722_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_722_p1_assign_proc : process(reg_734, reg_747, out_fu_1052_p1, ap_CS_fsm_state17, out_1_fu_1321_p1, ap_CS_fsm_state35, ex_load_2_reg_2517, out_2_fu_2299_p1, ap_CS_fsm_state72, ap_CS_fsm_state11, ap_CS_fsm_state29, ap_CS_fsm_state47, ap_CS_fsm_state52, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_fu_722_p1 <= out_2_fu_2299_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            grp_fu_722_p1 <= reg_747;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_722_p1 <= ex_load_2_reg_2517;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_722_p1 <= out_1_fu_1321_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_722_p1 <= out_fu_1052_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_722_p1 <= reg_734;
        else 
            grp_fu_722_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_726_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(agg_result_V_i_i_reg_2609),64));
    grp_lut_mul7_chunk_fu_607_ap_start <= grp_lut_mul7_chunk_fu_607_ap_start_reg;

    grp_lut_mul7_chunk_fu_607_d_V_assign_proc : process(p_Result_i_i_reg_2549, p_Result_i_i_19_reg_2554, ap_CS_fsm_state63, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_lut_mul7_chunk_fu_607_d_V <= p_Result_i_i_reg_2549;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_lut_mul7_chunk_fu_607_d_V <= p_Result_i_i_19_reg_2554;
        else 
            grp_lut_mul7_chunk_fu_607_d_V <= "XXXXXX";
        end if; 
    end process;

    grp_lut_mul7_chunk_fu_630_ap_start <= grp_lut_mul7_chunk_fu_630_ap_start_reg;

    grp_lut_mul7_chunk_fu_630_d_V_assign_proc : process(p_Result_1_i_i_reg_2559, p_Result_5_i_i_reg_2579, ap_CS_fsm_state63, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_lut_mul7_chunk_fu_630_d_V <= p_Result_5_i_i_reg_2579;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_lut_mul7_chunk_fu_630_d_V <= p_Result_1_i_i_reg_2559;
        else 
            grp_lut_mul7_chunk_fu_630_d_V <= "XXXXXX";
        end if; 
    end process;

    grp_lut_mul7_chunk_fu_653_ap_start <= grp_lut_mul7_chunk_fu_653_ap_start_reg;

    grp_lut_mul7_chunk_fu_653_d_V_assign_proc : process(p_Result_2_i_i_reg_2564, p_Result_6_i_i_reg_2584, ap_CS_fsm_state63, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_lut_mul7_chunk_fu_653_d_V <= p_Result_6_i_i_reg_2584;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_lut_mul7_chunk_fu_653_d_V <= p_Result_2_i_i_reg_2564;
        else 
            grp_lut_mul7_chunk_fu_653_d_V <= "XXXXXX";
        end if; 
    end process;

    grp_lut_mul7_chunk_fu_676_ap_start <= grp_lut_mul7_chunk_fu_676_ap_start_reg;

    grp_lut_mul7_chunk_fu_676_d_V_assign_proc : process(p_Result_3_i_i_reg_2569, p_Result_7_i_i_reg_2589, ap_CS_fsm_state63, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_lut_mul7_chunk_fu_676_d_V <= p_Result_7_i_i_reg_2589;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_lut_mul7_chunk_fu_676_d_V <= p_Result_3_i_i_reg_2569;
        else 
            grp_lut_mul7_chunk_fu_676_d_V <= "XXXXXX";
        end if; 
    end process;

    grp_lut_mul7_chunk_fu_699_ap_start <= grp_lut_mul7_chunk_fu_699_ap_start_reg;

    grp_lut_mul7_chunk_fu_699_d_V_assign_proc : process(p_Result_4_i_i_reg_2574, this_assign_14_i_i_reg_2599, ap_CS_fsm_state63, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_lut_mul7_chunk_fu_699_d_V <= this_assign_14_i_i_reg_2599;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_lut_mul7_chunk_fu_699_d_V <= p_Result_4_i_i_reg_2574;
        else 
            grp_lut_mul7_chunk_fu_699_d_V <= "XXXXXX";
        end if; 
    end process;


    hz_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state25, hz_addr_4_reg_2532, tmp_31_cast_fu_833_p1, tmp_35_cast_fu_1091_p1, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            hz_address0 <= hz_addr_4_reg_2532;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            hz_address0 <= tmp_35_cast_fu_1091_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hz_address0 <= tmp_31_cast_fu_833_p1(20 - 1 downto 0);
        else 
            hz_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hz_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state25, hz_addr_4_reg_2532, tmp_32_cast_fu_844_p1, tmp_36_cast_fu_1113_p1, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            hz_address1 <= hz_addr_4_reg_2532;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            hz_address1 <= tmp_36_cast_fu_1113_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hz_address1 <= tmp_32_cast_fu_844_p1(20 - 1 downto 0);
        else 
            hz_address1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hz_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state28, ap_CS_fsm_state69, ap_CS_fsm_state7, ap_CS_fsm_state25, ap_CS_fsm_state68, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state66, ap_CS_fsm_state67)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            hz_ce0 <= ap_const_logic_1;
        else 
            hz_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hz_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state28, ap_CS_fsm_state7, ap_CS_fsm_state25, ap_CS_fsm_state78, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state77)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            hz_ce1 <= ap_const_logic_1;
        else 
            hz_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    hz_d1 <= reg_739;

    hz_we1_assign_proc : process(ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            hz_we1 <= ap_const_logic_1;
        else 
            hz_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_3_fu_849_p2 <= std_logic_vector(unsigned(i_reg_482) + unsigned(ap_const_lv10_1));
    i_4_fu_1338_p2 <= std_logic_vector(unsigned(i_2_reg_539) + unsigned(ap_const_lv10_1));
    i_5_fu_1069_p2 <= std_logic_vector(unsigned(i_1_reg_505) + unsigned(ap_const_lv10_1));
    i_6_fu_2115_p2 <= std_logic_vector(signed(ap_const_lv6_3F) + signed(i_i_i_i_reg_596));
        i_i_i_i_cast_fu_1995_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_i_i_i_reg_596),8));

    icmp1_fu_1821_p2 <= "1" when (tmp_43_fu_1811_p4 = ap_const_lv2_0) else "0";
    icmp5_fu_1204_p2 <= "0" when (tmp_22_fu_1194_p4 = ap_const_lv10_0) else "1";
    icmp_fu_935_p2 <= "0" when (tmp_11_fu_925_p4 = ap_const_lv10_0) else "1";
    isNeg_fu_1439_p3 <= sh_assign_fu_1433_p2(11 downto 11);
    j_4_fu_781_p2 <= std_logic_vector(unsigned(j_reg_470) + unsigned(ap_const_lv10_1));
    j_5_fu_818_p2 <= std_logic_vector(unsigned(j_1_reg_494) + unsigned(ap_const_lv10_1));
    j_6_fu_1118_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(j_2_reg_528));
    j_7_fu_1354_p2 <= std_logic_vector(unsigned(j_3_reg_562) + unsigned(ap_const_lv10_1));
    loc_V_1_fu_1413_p1 <= p_Val2_2_fu_1399_p1(52 - 1 downto 0);
    loc_V_2_fu_2177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_6_fu_2167_p4),57));
    mant_V_fu_1803_p1 <= p_Val2_5_fu_1782_p1(52 - 1 downto 0);
    new_exp_V_1_fu_897_p2 <= std_logic_vector(signed(ap_const_lv11_7FF) + signed(new_exp_V_fu_867_p4));
    new_exp_V_2_fu_1136_p4 <= p_Val2_1_fu_1124_p1(62 downto 52);
    new_exp_V_3_fu_1166_p2 <= std_logic_vector(signed(ap_const_lv11_7FF) + signed(new_exp_V_2_fu_1136_p4));
    new_exp_V_5_fu_1841_p2 <= std_logic_vector(unsigned(exp_V_fu_1793_p4) - unsigned(p_i31_cast_cast_fu_1827_p3));
    new_exp_V_fu_867_p4 <= p_Val2_s_fu_855_p1(62 downto 52);
    new_mant_V_1_fu_1029_p3 <= 
        tmp_13_fu_1021_p1 when (tmp_8_i_fu_995_p2(0) = '1') else 
        tmp_14_fu_1025_p1;
    new_mant_V_3_fu_1298_p3 <= 
        tmp_25_fu_1290_p1 when (tmp_8_i1_fu_1264_p2(0) = '1') else 
        tmp_26_fu_1294_p1;
    new_mant_V_4_fu_1146_p1 <= p_Val2_1_fu_1124_p1(52 - 1 downto 0);
    new_mant_V_7_fu_2121_p1 <= p_Val2_8_reg_584(52 - 1 downto 0);
    new_mant_V_8_fu_1037_p3 <= 
        new_mant_V_fu_877_p1 when (tmp_i_fu_885_p2(0) = '1') else 
        new_mant_V_1_fu_1029_p3;
    new_mant_V_9_fu_1306_p3 <= 
        new_mant_V_4_fu_1146_p1 when (tmp_i6_fu_1154_p2(0) = '1') else 
        new_mant_V_3_fu_1298_p3;
    new_mant_V_fu_877_p1 <= p_Val2_s_fu_855_p1(52 - 1 downto 0);
    next_mul2_fu_1326_p2 <= std_logic_vector(unsigned(phi_mul1_reg_550) + unsigned(ap_const_lv20_3E8));
    next_mul_fu_1057_p2 <= std_logic_vector(unsigned(phi_mul_reg_516) + unsigned(ap_const_lv20_3E8));
    out_1_fu_1321_p1 <= p_Result_2_fu_1314_p4;
    out_2_fu_2299_p1 <= p_Result_8_fu_2292_p4;
    out_fu_1052_p1 <= p_Result_s_fu_1045_p4;
    p_0274_2_i1_fu_1236_p3 <= 
        p_shift_V_i1_fu_1226_p1 when (tmp_24_fu_1230_p2(0) = '1') else 
        shift_V_i12_cast_fu_1220_p2;
    p_0274_2_i_fu_967_p3 <= 
        p_shift_V_i_fu_957_p1 when (tmp_5_fu_961_p2(0) = '1') else 
        shift_V_i_cast_fu_951_p2;
    p_2_i_fu_2130_p3 <= 
        ap_const_lv11_7FF when (tmp_7_i_fu_2125_p2(0) = '1') else 
        ap_const_lv11_0;
    p_Repl2_10_fu_2143_p3 <= 
        p_2_i_fu_2130_p3 when (tmp_6_i_fu_2138_p2(0) = '1') else 
        new_exp_V_5_reg_2644;
    p_Repl2_1_fu_917_p3 <= 
        p_new_exp_V_1_i_fu_903_p3 when (tmp_6_fu_911_p2(0) = '1') else 
        new_exp_V_1_fu_897_p2;
    p_Repl2_4_fu_1186_p3 <= 
        p_new_exp_V_1_i9_fu_1172_p3 when (tmp_18_fu_1180_p2(0) = '1') else 
        new_exp_V_3_fu_1166_p2;
    p_Repl2_6_fu_2150_p3 <= 
        mant_V_reg_2634 when (tmp_7_i_fu_2125_p2(0) = '1') else 
        new_mant_V_7_fu_2121_p1;
    p_Result_2_fu_1314_p4 <= ((p_Repl2_5_reg_2450 & p_Repl2_4_reg_2455) & new_mant_V_9_reg_2460);
    
    p_Result_3_fu_1971_p4_proc : process(xf_V_13_fu_1963_p3)
    begin
        p_Result_3_fu_1971_p4 <= xf_V_13_fu_1963_p3;
        p_Result_3_fu_1971_p4(52) <= ap_const_lv1_1(0);
    end process;

    p_Result_4_fu_2087_p3 <= (p_Repl2_9_reg_573 & d_chunk_V_fu_2083_p1);
    p_Result_5_fu_2157_p4 <= ((r2_q0 & r1_q0) & r0_q0);
    p_Result_6_fu_2167_p4 <= ((q2_q0 & q1_q0) & q0_q0);
    p_Result_7_fu_2286_p2 <= (tmp_76_fu_2280_p2 or tmp_75_fu_2274_p2);
    p_Result_8_fu_2292_p4 <= ((p_Repl2_11_reg_2624 & p_Repl2_10_reg_2714) & p_Repl2_6_reg_2719);
    
    p_Result_8_i_i_fu_1595_p4_proc : process(smantissa_V_fu_1492_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(169+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(169+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(169 - 1 downto 0);
    variable p_Result_8_i_i_fu_1595_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(169 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(169 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(169 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_6C(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_6B(8 - 1 downto 0);
        v0_cpy := smantissa_V_fu_1492_p3;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(169-1-unsigned(ap_const_lv32_6B(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(169-1-unsigned(ap_const_lv32_6C(8-1 downto 0)));
            for p_Result_8_i_i_fu_1595_p4_i in 0 to 169-1 loop
                v0_cpy(p_Result_8_i_i_fu_1595_p4_i) := smantissa_V_fu_1492_p3(169-1-p_Result_8_i_i_fu_1595_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(169-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_8_i_i_fu_1595_p4 <= resvalue(2-1 downto 0);
    end process;

    p_Result_s_fu_1045_p4 <= ((p_Repl2_2_reg_2394 & p_Repl2_1_reg_2399) & new_mant_V_8_reg_2404);
    p_Val2_1_fu_1124_p1 <= reg_739;
    p_Val2_2_fu_1399_p1 <= grp_fu_722_p2;
    p_Val2_5_fu_1782_p1 <= in_assign_2_reg_2619;
    p_Val2_s_fu_855_p1 <= reg_739;
    p_demorgan_fu_2262_p2 <= (tmp_73_fu_2256_p2 and tmp_72_fu_2250_p2);
    p_fict_s_address0 <= p_fict_addr_reg_2330;

    p_fict_s_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_fict_s_ce0 <= ap_const_logic_1;
        else 
            p_fict_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_i17_cast_fu_1260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_V_3_fu_1252_p3),55));
    p_i31_cast_cast_fu_1827_p3 <= 
        ap_const_lv11_4 when (icmp1_fu_1821_p2(0) = '1') else 
        ap_const_lv11_3;
    p_i_cast_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_V_fu_983_p3),55));
    p_new_exp_V_1_i9_fu_1172_p3 <= 
        ap_const_lv11_7FF when (tmp_i6_fu_1154_p2(0) = '1') else 
        ap_const_lv11_0;
    p_new_exp_V_1_i_fu_903_p3 <= 
        ap_const_lv11_7FF when (tmp_i_fu_885_p2(0) = '1') else 
        ap_const_lv11_0;
    p_shift_V_i1_fu_1226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_i7_fu_1160_p2),2));
    p_shift_V_i_fu_957_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_i_fu_891_p2),2));
    p_shl_i_i_i_cast_fu_2019_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_i_i_fu_2011_p3),8));
    p_shl_i_i_i_fu_2011_p3 <= (tmp_47_fu_2007_p1 & ap_const_lv2_0);
    q0_address0 <= tmp_i_i_i_i_fu_2095_p1(6 - 1 downto 0);

    q0_ce0_assign_proc : process(ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            q0_ce0 <= ap_const_logic_1;
        else 
            q0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q1_address0 <= tmp_i_i_i_i_fu_2095_p1(6 - 1 downto 0);

    q1_ce0_assign_proc : process(ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            q1_ce0 <= ap_const_logic_1;
        else 
            q1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q2_address0 <= tmp_i_i_i_i_fu_2095_p1(6 - 1 downto 0);

    q2_ce0_assign_proc : process(ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            q2_ce0 <= ap_const_logic_1;
        else 
            q2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r0_address0 <= tmp_i_i_i_i_fu_2095_p1(6 - 1 downto 0);

    r0_ce0_assign_proc : process(ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            r0_ce0 <= ap_const_logic_1;
        else 
            r0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r1_address0 <= tmp_i_i_i_i_fu_2095_p1(6 - 1 downto 0);

    r1_ce0_assign_proc : process(ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            r1_ce0 <= ap_const_logic_1;
        else 
            r1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r2_address0 <= tmp_i_i_i_i_fu_2095_p1(6 - 1 downto 0);

    r2_ce0_assign_proc : process(ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            r2_ce0 <= ap_const_logic_1;
        else 
            r2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_11_fu_1725_p3 <= (tmp_32_fu_1721_p1 & ap_const_lv48_0);
    r_V_15_fu_1009_p2 <= std_logic_vector(shift_right(unsigned(xf_V_fu_983_p3),to_integer(unsigned('0' & tmp_9_i_cast_fu_1005_p1(31-1 downto 0)))));
    r_V_16_fu_1015_p2 <= std_logic_vector(shift_left(unsigned(p_i_cast_fu_991_p1),to_integer(unsigned('0' & tmp_9_i_fu_1001_p1(31-1 downto 0)))));
    r_V_17_fu_1278_p2 <= std_logic_vector(shift_right(unsigned(xf_V_3_fu_1252_p3),to_integer(unsigned('0' & tmp_9_i19_cast_fu_1274_p1(31-1 downto 0)))));
    r_V_18_fu_1284_p2 <= std_logic_vector(shift_left(unsigned(p_i17_cast_fu_1260_p1),to_integer(unsigned('0' & tmp_9_i1_fu_1270_p1(31-1 downto 0)))));
    r_V_19_fu_1947_p2 <= std_logic_vector(shift_right(unsigned(mant_V_fu_1803_p1),to_integer(unsigned('0' & tmp_5_i_cast_fu_1943_p1(31-1 downto 0)))));
    r_V_20_fu_1957_p2 <= std_logic_vector(shift_left(unsigned(xf_V_6_fu_1807_p1),to_integer(unsigned('0' & tmp_5_i_fu_1939_p1(31-1 downto 0)))));
    r_V_2_i_cast_fu_1953_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_19_fu_1947_p2),57));
    r_V_4_cast_fu_1629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_4_fu_1621_p3),22));
    r_V_4_fu_1621_p3 <= (grp_lut_mul7_chunk_fu_630_ap_return & ap_const_lv12_0);
    r_V_5_cast_fu_1641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_5_fu_1633_p3),40));
    r_V_5_fu_1633_p3 <= (grp_lut_mul7_chunk_fu_653_ap_return & ap_const_lv18_0);
    r_V_6_cast_fu_1653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_6_fu_1645_p3),40));
    r_V_6_fu_1645_p3 <= (grp_lut_mul7_chunk_fu_676_ap_return & ap_const_lv24_0);
    r_V_7_cast_fu_1665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_7_fu_1657_p3),40));
    r_V_7_fu_1657_p3 <= (grp_lut_mul7_chunk_fu_699_ap_return & ap_const_lv30_0);
    r_V_8_cast_fu_1705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_8_fu_1697_p3),52));
    r_V_8_fu_1697_p3 <= (grp_lut_mul7_chunk_fu_630_ap_return & ap_const_lv36_0);
    r_V_9_cast_fu_1717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_9_fu_1709_p3),52));
    r_V_9_fu_1709_p3 <= (grp_lut_mul7_chunk_fu_653_ap_return & ap_const_lv42_0);
    r_V_cast_fu_1617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_1609_p3),22));
    r_V_fu_1609_p3 <= (grp_lut_mul7_chunk_fu_607_ap_return & ap_const_lv6_0);
    sel_tmp1_i_fu_1891_p2 <= (tmp_2_i2_fu_1853_p2 and sel_tmp_i_fu_1885_p2);
    sel_tmp5_demorgan_i_fu_1905_p2 <= (tmp_2_i2_fu_1853_p2 or tmp_1_i1_fu_1847_p2);
    sel_tmp5_i_fu_1911_p2 <= (sel_tmp5_demorgan_i_fu_1905_p2 xor ap_const_lv1_1);
    sel_tmp6_i_fu_1917_p2 <= (tmp_3_i_fu_1867_p2 and sel_tmp5_i_fu_1911_p2);
    sel_tmp_i_fu_1885_p2 <= (tmp_1_i1_fu_1847_p2 xor ap_const_lv1_1);
        sh_assign_1_cast_fu_1464_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_1456_p3),32));

    sh_assign_1_fu_1456_p3 <= 
        tmp_41_i_i_i_cast_fu_1452_p1 when (isNeg_fu_1439_p3(0) = '1') else 
        sh_assign_fu_1433_p2;
    sh_assign_fu_1433_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_cast_fu_1430_p1));
    shift_V_1_fu_1879_p2 <= std_logic_vector(signed(ap_const_lv11_7FE) + signed(exp_V_fu_1793_p4));
    shift_V_2_fu_1897_p3 <= 
        shift_V_i34_cast_cas_fu_1859_p3 when (sel_tmp1_i_fu_1891_p2(0) = '1') else 
        shift_V_1_fu_1879_p2;
    shift_V_3_fu_1923_p3 <= 
        shift_V_fu_1873_p2 when (sel_tmp6_i_fu_1917_p2(0) = '1') else 
        shift_V_2_fu_1897_p3;
    shift_V_4_fu_1931_p3 <= 
        ap_const_lv11_1 when (tmp_1_i1_fu_1847_p2(0) = '1') else 
        shift_V_3_fu_1923_p3;
    shift_V_fu_1873_p2 <= std_logic_vector(unsigned(ap_const_lv11_2) - unsigned(exp_V_fu_1793_p4));
    shift_V_i12_cast_fu_1220_p2 <= std_logic_vector(signed(ap_const_lv2_2) - signed(tmp_21_fu_1210_p4));
    shift_V_i34_cast_cas_fu_1859_p3 <= 
        ap_const_lv11_3 when (icmp1_fu_1821_p2(0) = '1') else 
        ap_const_lv11_2;
    shift_V_i_cast_fu_951_p2 <= std_logic_vector(signed(ap_const_lv2_2) - signed(tmp_7_fu_941_p4));
    smantissa_V_fu_1492_p3 <= 
        tmp_43_i_i_i_cast_fu_1482_p1 when (isNeg_fu_1439_p3(0) = '1') else 
        tmp_44_i_i_i_fu_1486_p2;
    t_1_fu_764_p2 <= std_logic_vector(unsigned(t_reg_459) + unsigned(ap_const_lv6_1));
    this_assign_14_i_i_fu_1605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_8_i_i_reg_2594),6));
    tmp32_fu_1669_p2 <= std_logic_vector(unsigned(r_V_4_cast_fu_1629_p1) + unsigned(r_V_cast_fu_1617_p1));
    tmp33_fu_1679_p2 <= std_logic_vector(unsigned(r_V_7_cast_fu_1665_p1) + unsigned(r_V_6_cast_fu_1653_p1));
    tmp34_fu_1685_p2 <= std_logic_vector(unsigned(r_V_5_cast_fu_1641_p1) + unsigned(tmp33_fu_1679_p2));
    tmp35_fu_1691_p2 <= std_logic_vector(unsigned(tmp40_cast_fu_1675_p1) + unsigned(tmp34_fu_1685_p2));
    tmp36_fu_1736_p2 <= std_logic_vector(unsigned(r_V_9_cast_fu_1717_p1) + unsigned(r_V_8_cast_fu_1705_p1));
    tmp38_fu_1750_p4 <= ((tmp_37_fu_1746_p1 & ap_const_lv45_0) & grp_lut_mul7_chunk_fu_607_ap_return);
    tmp39_cast_fu_1733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp35_reg_2604),56));
    tmp39_fu_1760_p2 <= std_logic_vector(unsigned(r_V_11_fu_1725_p3) + unsigned(tmp38_fu_1750_p4));
    tmp40_cast_fu_1675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp32_fu_1669_p2),40));
    tmp40_fu_1766_p2 <= std_logic_vector(unsigned(tmp44_cast_fu_1742_p1) + unsigned(tmp39_fu_1760_p2));
    tmp44_cast_fu_1742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp36_fu_1736_p2),56));
    tmp_10_fu_2316_p0 <= tmp_10_fu_2316_p00(10 - 1 downto 0);
    tmp_10_fu_2316_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_fu_1338_p2),20));
    tmp_10_fu_2316_p1 <= ap_const_lv20_3E8(11 - 1 downto 0);
    tmp_11_cast_fu_1081_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_528),20));
    tmp_11_fu_925_p4 <= p_Val2_s_fu_855_p1(62 downto 53);
    tmp_12_fu_1097_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(j_2_reg_528));
    tmp_13_cast_fu_1103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_1097_p2),20));
    tmp_13_fu_1021_p1 <= r_V_15_fu_1009_p2(52 - 1 downto 0);
    tmp_14_fu_1025_p1 <= r_V_16_fu_1015_p2(52 - 1 downto 0);
    tmp_15_fu_1085_p2 <= std_logic_vector(unsigned(tmp_11_cast_fu_1081_p1) + unsigned(phi_mul_reg_516));
    tmp_17_cast_fu_1360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_reg_562),20));
    tmp_17_fu_1107_p2 <= std_logic_vector(unsigned(tmp_13_cast_fu_1103_p1) + unsigned(phi_mul_reg_516));
    tmp_18_cast_fu_1380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_7_fu_1354_p2),20));
    tmp_18_fu_1180_p2 <= (tmp_i6_fu_1154_p2 or tmp_1_i7_fu_1160_p2);
    tmp_1_fu_2304_p0 <= tmp_1_fu_2304_p00(10 - 1 downto 0);
    tmp_1_fu_2304_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_482),20));
    tmp_1_fu_2304_p1 <= ap_const_lv20_3E8(11 - 1 downto 0);
    tmp_1_i1_fu_1847_p2 <= "1" when (exp_V_fu_1793_p4 = ap_const_lv11_0) else "0";
    tmp_1_i7_fu_1160_p2 <= "1" when (new_exp_V_2_fu_1136_p4 = ap_const_lv11_0) else "0";
    tmp_1_i_fu_891_p2 <= "1" when (new_exp_V_fu_867_p4 = ap_const_lv11_0) else "0";
    tmp_21_fu_1210_p4 <= p_Val2_1_fu_1124_p1(53 downto 52);
    tmp_22_fu_1194_p4 <= p_Val2_1_fu_1124_p1(62 downto 53);
    tmp_24_fu_1230_p2 <= (tmp_1_i7_fu_1160_p2 or icmp5_fu_1204_p2);
    tmp_25_fu_1290_p1 <= r_V_17_fu_1278_p2(52 - 1 downto 0);
    tmp_26_fu_1294_p1 <= r_V_18_fu_1284_p2(52 - 1 downto 0);
    tmp_27_fu_1364_p2 <= std_logic_vector(unsigned(tmp_17_cast_fu_1360_p1) + unsigned(phi_mul1_reg_550));
    tmp_28_fu_1375_p2 <= std_logic_vector(unsigned(tmp_17_cast_fu_1360_p1) + unsigned(tmp_10_reg_2483));
    tmp_29_fu_1384_p2 <= std_logic_vector(unsigned(tmp_18_cast_fu_1380_p1) + unsigned(phi_mul1_reg_550));
    tmp_2_fu_2310_p0 <= tmp_2_fu_2310_p00(10 - 1 downto 0);
    tmp_2_fu_2310_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_802_p2),20));
    tmp_2_fu_2310_p1 <= ap_const_lv20_3E8(11 - 1 downto 0);
    tmp_2_i1_fu_1244_p3 <= (ap_const_lv1_1 & new_mant_V_4_fu_1146_p1);
    tmp_2_i2_fu_1853_p2 <= "1" when (unsigned(p_i31_cast_cast_fu_1827_p3) < unsigned(exp_V_fu_1793_p4)) else "0";
    tmp_2_i_fu_975_p3 <= (ap_const_lv1_1 & new_mant_V_fu_877_p1);
    tmp_31_cast_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_828_p2),64));
    tmp_32_cast_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_839_p2),64));
    tmp_32_fu_1721_p1 <= grp_lut_mul7_chunk_fu_676_ap_return(8 - 1 downto 0);
    tmp_35_cast_fu_1091_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_1085_p2),64));
    tmp_36_cast_fu_1113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_1107_p2),64));
    tmp_37_fu_1746_p1 <= grp_lut_mul7_chunk_fu_699_ap_return(2 - 1 downto 0);
    tmp_38_cast_fu_1370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_1364_p2),64));
    tmp_39_cast_fu_1395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_reg_2507),64));
    tmp_3_fu_828_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_824_p1) + unsigned(tmp_1_reg_2356));
    tmp_3_i_fu_1867_p2 <= "1" when (unsigned(exp_V_fu_1793_p4) < unsigned(ap_const_lv11_3)) else "0";
    tmp_40_cast_fu_1390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_1384_p2),64));
        tmp_41_i_i_i_cast_fu_1452_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_41_i_i_i_fu_1447_p2),12));

    tmp_41_i_i_i_fu_1447_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_reg_2538));
    tmp_42_i_i_i_cast_fu_1472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_1464_p1),54));
    tmp_42_i_i_i_fu_1468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_1464_p1),169));
    tmp_43_fu_1811_p4 <= p_Val2_5_fu_1782_p1(51 downto 50);
    tmp_43_i_i_i_cast_fu_1482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_i_i_i_fu_1476_p2),169));
    tmp_43_i_i_i_fu_1476_p2 <= std_logic_vector(shift_right(unsigned(tmp_i_i_i_fu_1417_p4),to_integer(unsigned('0' & tmp_42_i_i_i_cast_fu_1472_p1(31-1 downto 0)))));
    tmp_44_i_i_i_fu_1486_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_i_cast_fu_1426_p1),to_integer(unsigned('0' & tmp_42_i_i_i_fu_1468_p1(31-1 downto 0)))));
    tmp_45_fu_1999_p3 <= i_i_i_i_reg_596(5 downto 5);
    tmp_47_fu_2007_p1 <= i_i_i_i_reg_596(5 - 1 downto 0);
    tmp_48_fu_2029_p1 <= Lo_assign_fu_2023_p2(6 - 1 downto 0);
    tmp_49_fu_2033_p2 <= "1" when (unsigned(Lo_assign_fu_2023_p2) > unsigned(ap_const_lv8_FD)) else "0";
    tmp_4_fu_839_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_824_p1) + unsigned(tmp_2_reg_2361));
    tmp_50_fu_2039_p1 <= Lo_assign_fu_2023_p2(6 - 1 downto 0);
    
    tmp_51_fu_2043_p4_proc : process(xf_V_14_reg_2649)
    variable vlo_cpy : STD_LOGIC_VECTOR(57+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(57+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(57 - 1 downto 0);
    variable tmp_51_fu_2043_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(57 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(57 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(57 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_38(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := xf_V_14_reg_2649;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(57-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(57-1-unsigned(ap_const_lv32_38(6-1 downto 0)));
            for tmp_51_fu_2043_p4_i in 0 to 57-1 loop
                v0_cpy(tmp_51_fu_2043_p4_i) := xf_V_14_reg_2649(57-1-tmp_51_fu_2043_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(57-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_51_fu_2043_p4 <= resvalue(57-1 downto 0);
    end process;

    tmp_52_fu_2052_p2 <= std_logic_vector(signed(ap_const_lv6_38) - signed(tmp_50_fu_2039_p1));
    tmp_53_fu_2058_p3 <= 
        tmp_51_fu_2043_p4 when (tmp_49_fu_2033_p2(0) = '1') else 
        xf_V_14_reg_2649;
    tmp_54_fu_2065_p3 <= 
        tmp_52_fu_2052_p2 when (tmp_49_fu_2033_p2(0) = '1') else 
        tmp_50_fu_2039_p1;
    tmp_55_fu_2073_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_2065_p3),57));
    tmp_56_fu_2077_p2 <= std_logic_vector(shift_right(unsigned(tmp_53_fu_2058_p3),to_integer(unsigned('0' & tmp_55_fu_2073_p1(31-1 downto 0)))));
    tmp_58_fu_2105_p2 <= "1" when (unsigned(Lo_assign_fu_2023_p2) > unsigned(ap_const_lv8_FD)) else "0";
    tmp_59_fu_2111_p1 <= Lo_assign_fu_2023_p2(6 - 1 downto 0);
    tmp_5_cast_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_494),20));
    tmp_5_fu_961_p2 <= (tmp_1_i_fu_891_p2 or icmp_fu_935_p2);
    tmp_5_i_cast_fu_1943_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_V_4_fu_1931_p3),52));
    tmp_5_i_fu_1939_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_V_4_fu_1931_p3),57));
    tmp_60_fu_2181_p2 <= std_logic_vector(unsigned(ap_const_lv6_2) + unsigned(tmp_48_reg_2658));
    tmp_61_fu_2186_p2 <= std_logic_vector(signed(ap_const_lv6_38) - signed(tmp_59_reg_2701));
    tmp_62_fu_2191_p3 <= 
        tmp_59_reg_2701 when (tmp_58_reg_2693(0) = '1') else 
        tmp_60_fu_2181_p2;
    tmp_63_fu_2197_p3 <= 
        tmp_60_fu_2181_p2 when (tmp_58_reg_2693(0) = '1') else 
        tmp_59_reg_2701;
    tmp_64_fu_2203_p3 <= 
        tmp_61_fu_2186_p2 when (tmp_58_reg_2693(0) = '1') else 
        tmp_59_reg_2701;
    tmp_65_fu_2209_p2 <= std_logic_vector(signed(ap_const_lv6_38) - signed(tmp_62_fu_2191_p3));
    tmp_66_fu_2215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_fu_2203_p3),57));
    tmp_67_fu_2219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_2197_p3),57));
    tmp_68_fu_2223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_65_fu_2209_p2),57));
    tmp_69_fu_2227_p2 <= std_logic_vector(shift_left(unsigned(loc_V_2_fu_2177_p1),to_integer(unsigned('0' & tmp_66_fu_2215_p1(31-1 downto 0)))));
    tmp_6_fu_911_p2 <= (tmp_i_fu_885_p2 or tmp_1_i_fu_891_p2);
    tmp_6_i_fu_2138_p2 <= (tmp_i_20_reg_2639 or tmp_7_i_fu_2125_p2);
    
    tmp_70_fu_2233_p4_proc : process(tmp_69_fu_2227_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(57+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(57+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(57 - 1 downto 0);
    variable tmp_70_fu_2233_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(57 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(57 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(57 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_38(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_69_fu_2227_p2;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(57-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(57-1-unsigned(ap_const_lv32_38(6-1 downto 0)));
            for tmp_70_fu_2233_p4_i in 0 to 57-1 loop
                v0_cpy(tmp_70_fu_2233_p4_i) := tmp_69_fu_2227_p2(57-1-tmp_70_fu_2233_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(57-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_70_fu_2233_p4 <= resvalue(57-1 downto 0);
    end process;

    tmp_71_fu_2243_p3 <= 
        tmp_70_fu_2233_p4 when (tmp_58_reg_2693(0) = '1') else 
        tmp_69_fu_2227_p2;
    tmp_72_fu_2250_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv57_1FFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_67_fu_2219_p1(31-1 downto 0)))));
    tmp_73_fu_2256_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv57_1FFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_68_fu_2223_p1(31-1 downto 0)))));
    tmp_74_fu_2268_p2 <= (p_demorgan_fu_2262_p2 xor ap_const_lv57_1FFFFFFFFFFFFFF);
    tmp_75_fu_2274_p2 <= (tmp_74_fu_2268_p2 and p_Val2_8_reg_584);
    tmp_76_fu_2280_p2 <= (tmp_71_fu_2243_p3 and p_demorgan_fu_2262_p2);
    tmp_7_fu_941_p4 <= p_Val2_s_fu_855_p1(53 downto 52);
    tmp_7_i_fu_2125_p2 <= "1" when (exp_V_reg_2629 = ap_const_lv11_7FF) else "0";
    tmp_8_i1_fu_1264_p2 <= "1" when (unsigned(new_exp_V_2_fu_1136_p4) < unsigned(ap_const_lv11_3)) else "0";
    tmp_8_i_fu_995_p2 <= "1" when (unsigned(new_exp_V_fu_867_p4) < unsigned(ap_const_lv11_3)) else "0";
    tmp_9_fu_802_p2 <= std_logic_vector(unsigned(i_reg_482) + unsigned(ap_const_lv10_3FF));
    tmp_9_i19_cast_fu_1274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0274_2_i1_fu_1236_p3),53));
    tmp_9_i1_fu_1270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0274_2_i1_fu_1236_p3),55));
    tmp_9_i_cast_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0274_2_i_fu_967_p3),53));
    tmp_9_i_fu_1001_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0274_2_i_fu_967_p3),55));
    tmp_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_reg_459),64));
    tmp_i6_fu_1154_p2 <= "1" when (new_exp_V_2_fu_1136_p4 = ap_const_lv11_7FF) else "0";
    tmp_i_20_fu_1835_p2 <= "1" when (unsigned(p_i31_cast_cast_fu_1827_p3) > unsigned(exp_V_fu_1793_p4)) else "0";
    tmp_i_fu_885_p2 <= "1" when (new_exp_V_fu_867_p4 = ap_const_lv11_7FF) else "0";
    tmp_i_i_i_cast_fu_1426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_i_fu_1417_p4),169));
    tmp_i_i_i_fu_1417_p4 <= ((ap_const_lv1_1 & loc_V_1_reg_2544) & ap_const_lv1_0);
    tmp_i_i_i_i_cast_fu_1430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_reg_2538),12));
    tmp_i_i_i_i_fu_2095_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_4_fu_2087_p3),64));
    tmp_s_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_470),64));
    xf_V_11_fu_1981_p3 <= 
        xf_V_13_fu_1963_p3 when (tmp_1_i1_fu_1847_p2(0) = '1') else 
        p_Result_3_fu_1971_p4;
    xf_V_13_fu_1963_p3 <= 
        r_V_2_i_cast_fu_1953_p1 when (tmp_3_i_fu_1867_p2(0) = '1') else 
        r_V_20_fu_1957_p2;
    xf_V_14_fu_1989_p2 <= std_logic_vector(unsigned(ap_const_lv57_2) + unsigned(xf_V_11_fu_1981_p3));
    xf_V_3_fu_1252_p3 <= 
        xf_V_4_i5_cast_fu_1150_p1 when (tmp_1_i7_fu_1160_p2(0) = '1') else 
        tmp_2_i1_fu_1244_p3;
    xf_V_4_i5_cast_fu_1150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_mant_V_4_fu_1146_p1),53));
    xf_V_4_i_cast_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_mant_V_fu_877_p1),53));
    xf_V_6_fu_1807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mant_V_fu_1803_p1),57));
    xf_V_fu_983_p3 <= 
        xf_V_4_i_cast_fu_881_p1 when (tmp_1_i_fu_891_p2(0) = '1') else 
        tmp_2_i_fu_975_p3;
end behav;
