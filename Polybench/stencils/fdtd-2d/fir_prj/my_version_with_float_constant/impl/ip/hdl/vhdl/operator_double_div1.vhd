-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity operator_double_div1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of operator_double_div1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (49 downto 0) := "00000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (49 downto 0) := "00000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (49 downto 0) := "00000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (49 downto 0) := "00000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (49 downto 0) := "00000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (49 downto 0) := "00000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (49 downto 0) := "00001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (49 downto 0) := "00010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (49 downto 0) := "00100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (49 downto 0) := "01000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (49 downto 0) := "10000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_7FE : STD_LOGIC_VECTOR (10 downto 0) := "11111111110";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv57_2 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_161 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_lut_div5_chunk_fu_138_ap_idle : STD_LOGIC;
    signal grp_lut_div5_chunk_fu_138_ap_ready : STD_LOGIC;
    signal grp_lut_div5_chunk_fu_138_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal p_Repl2_2_reg_681 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_exp_V_1_reg_686 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_mant_V_1_fu_188_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal new_mant_V_1_reg_698 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_705 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_cast_fu_208_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_cast_cast_reg_711 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_717 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_725 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_1_fu_225_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_1_reg_731 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_736 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal shift_V_4_fu_296_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_4_reg_741 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_1_fu_322_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Repl2_1_reg_752 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_339_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal r_V_20_reg_772 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_344_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal r_V_21_reg_777 : STD_LOGIC_VECTOR (56 downto 0);
    signal xf_V_7_fu_353_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal xf_V_7_reg_782 : STD_LOGIC_VECTOR (56 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal d_chunk_V_reg_788 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal d_chunk_V_1_reg_793 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_chunk_V_2_reg_798 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_chunk_V_3_reg_803 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_chunk_V_4_reg_808 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_chunk_V_5_reg_813 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_chunk_V_6_reg_818 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_chunk_V_7_reg_823 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_chunk_V_8_reg_828 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_chunk_V_9_reg_833 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_chunk_V_10_reg_838 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_chunk_V_11_reg_843 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_chunk_V_12_reg_848 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_chunk_V_13_reg_853 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_chunk_V_14_reg_858 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_chunk_V_15_reg_863 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_chunk_V_16_reg_868 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_chunk_V_17_reg_873 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_chunk_V_18_fu_560_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_chunk_V_18_reg_878 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lut_div5_chunk_fu_138_ap_return_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lut_div5_chunk_fu_138_ap_return_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal call_ret2_i_i_reg_883_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal call_ret3_i_i_reg_888_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal call_ret4_i_i_reg_893_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal call_ret5_i_i_reg_898_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal call_ret6_i_i_reg_903_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal call_ret7_i_i_reg_908_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal call_ret8_i_i_reg_913_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal call_ret9_i_i_reg_918_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal call_ret10_i_i_reg_923_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal call_ret11_i_i_reg_928_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal call_ret12_i_i_reg_933_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal call_ret13_i_i_reg_938_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal call_ret14_i_i_reg_943_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal call_ret15_i_i_reg_948_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal call_ret16_i_i_reg_953_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal call_ret17_i_i_reg_958_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal call_ret18_i_i_reg_963_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lut_div5_chunk_fu_138_ap_start : STD_LOGIC;
    signal grp_lut_div5_chunk_fu_138_d_V : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lut_div5_chunk_fu_138_r_in_V : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lut_div5_chunk_fu_138_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal p_Val2_s_fu_166_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_192_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_cast_cast_fu_238_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sel_tmp5_demorgan_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_fu_250_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_2_fu_265_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_3_fu_288_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_2_fu_308_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_exp_V_fu_234_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_339_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_344_p0 : STD_LOGIC_VECTOR (56 downto 0);
    signal grp_fu_344_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal r_V_23_cast_fu_350_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal p_Result_s_fu_359_p4 : STD_LOGIC_VECTOR (56 downto 0);
    signal xf_V_5_fu_368_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal xf_V_8_fu_374_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_10_fu_619_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_mant_V_fu_623_p19 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Repl2_s_fu_663_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_1_fu_669_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_fu_677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (49 downto 0);

    component lut_div5_chunk IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        d_V : IN STD_LOGIC_VECTOR (2 downto 0);
        r_in_V : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component kernel_fdtd_2d_opbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (51 downto 0);
        din1 : IN STD_LOGIC_VECTOR (51 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component kernel_fdtd_2d_opcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (56 downto 0);
        din1 : IN STD_LOGIC_VECTOR (56 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (56 downto 0) );
    end component;



begin
    grp_lut_div5_chunk_fu_138 : component lut_div5_chunk
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lut_div5_chunk_fu_138_ap_start,
        ap_done => grp_lut_div5_chunk_fu_138_ap_done,
        ap_idle => grp_lut_div5_chunk_fu_138_ap_idle,
        ap_ready => grp_lut_div5_chunk_fu_138_ap_ready,
        d_V => grp_lut_div5_chunk_fu_138_d_V,
        r_in_V => grp_lut_div5_chunk_fu_138_r_in_V,
        ap_return_0 => grp_lut_div5_chunk_fu_138_ap_return_0,
        ap_return_1 => grp_lut_div5_chunk_fu_138_ap_return_1);

    kernel_fdtd_2d_opbkb_U9 : component kernel_fdtd_2d_opbkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        OP => 1,
        din0_WIDTH => 52,
        din1_WIDTH => 11,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => new_mant_V_1_reg_698,
        din1 => grp_fu_339_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_339_p2);

    kernel_fdtd_2d_opcud_U10 : component kernel_fdtd_2d_opcud
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        OP => 0,
        din0_WIDTH => 57,
        din1_WIDTH => 11,
        dout_WIDTH => 57)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_344_p0,
        din1 => grp_fu_344_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_344_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv64_0;
            else
                if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                    ap_return_preg <= out_fu_677_p1;
                end if; 
            end if;
        end if;
    end process;


    grp_lut_div5_chunk_fu_138_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lut_div5_chunk_fu_138_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    grp_lut_div5_chunk_fu_138_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lut_div5_chunk_fu_138_ap_ready = ap_const_logic_1)) then 
                    grp_lut_div5_chunk_fu_138_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                call_ret10_i_i_reg_923_0 <= grp_lut_div5_chunk_fu_138_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                call_ret11_i_i_reg_928_0 <= grp_lut_div5_chunk_fu_138_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                call_ret12_i_i_reg_933_0 <= grp_lut_div5_chunk_fu_138_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                call_ret13_i_i_reg_938_0 <= grp_lut_div5_chunk_fu_138_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                call_ret14_i_i_reg_943_0 <= grp_lut_div5_chunk_fu_138_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                call_ret15_i_i_reg_948_0 <= grp_lut_div5_chunk_fu_138_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                call_ret16_i_i_reg_953_0 <= grp_lut_div5_chunk_fu_138_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                call_ret17_i_i_reg_958_0 <= grp_lut_div5_chunk_fu_138_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                call_ret18_i_i_reg_963_0 <= grp_lut_div5_chunk_fu_138_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                call_ret2_i_i_reg_883_0 <= grp_lut_div5_chunk_fu_138_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                call_ret3_i_i_reg_888_0 <= grp_lut_div5_chunk_fu_138_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                call_ret4_i_i_reg_893_0 <= grp_lut_div5_chunk_fu_138_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                call_ret5_i_i_reg_898_0 <= grp_lut_div5_chunk_fu_138_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                call_ret6_i_i_reg_903_0 <= grp_lut_div5_chunk_fu_138_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                call_ret7_i_i_reg_908_0 <= grp_lut_div5_chunk_fu_138_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                call_ret8_i_i_reg_913_0 <= grp_lut_div5_chunk_fu_138_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                call_ret9_i_i_reg_918_0 <= grp_lut_div5_chunk_fu_138_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                d_chunk_V_10_reg_838 <= xf_V_8_fu_374_p2(26 downto 24);
                d_chunk_V_11_reg_843 <= xf_V_8_fu_374_p2(23 downto 21);
                d_chunk_V_12_reg_848 <= xf_V_8_fu_374_p2(20 downto 18);
                d_chunk_V_13_reg_853 <= xf_V_8_fu_374_p2(17 downto 15);
                d_chunk_V_14_reg_858 <= xf_V_8_fu_374_p2(14 downto 12);
                d_chunk_V_15_reg_863 <= xf_V_8_fu_374_p2(11 downto 9);
                d_chunk_V_16_reg_868 <= xf_V_8_fu_374_p2(8 downto 6);
                d_chunk_V_17_reg_873 <= xf_V_8_fu_374_p2(5 downto 3);
                d_chunk_V_18_reg_878 <= d_chunk_V_18_fu_560_p1;
                d_chunk_V_1_reg_793 <= xf_V_8_fu_374_p2(53 downto 51);
                d_chunk_V_2_reg_798 <= xf_V_8_fu_374_p2(50 downto 48);
                d_chunk_V_3_reg_803 <= xf_V_8_fu_374_p2(47 downto 45);
                d_chunk_V_4_reg_808 <= xf_V_8_fu_374_p2(44 downto 42);
                d_chunk_V_5_reg_813 <= xf_V_8_fu_374_p2(41 downto 39);
                d_chunk_V_6_reg_818 <= xf_V_8_fu_374_p2(38 downto 36);
                d_chunk_V_7_reg_823 <= xf_V_8_fu_374_p2(35 downto 33);
                d_chunk_V_8_reg_828 <= xf_V_8_fu_374_p2(32 downto 30);
                d_chunk_V_9_reg_833 <= xf_V_8_fu_374_p2(29 downto 27);
                d_chunk_V_reg_788 <= xf_V_8_fu_374_p2(56 downto 54);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_reg_705 <= icmp_fu_202_p2;
                new_exp_V_1_reg_686 <= p_Val2_s_fu_166_p1(62 downto 52);
                new_mant_V_1_reg_698 <= new_mant_V_1_fu_188_p1;
                p_Repl2_2_reg_681 <= p_Val2_s_fu_166_p1(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p_Repl2_1_reg_752 <= p_Repl2_1_fu_322_p3;
                shift_V_4_reg_741 <= shift_V_4_fu_296_p3;
                tmp_4_reg_736 <= tmp_4_fu_245_p2;
                tmp_7_reg_747 <= tmp_7_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    p_cast_cast_reg_711(2 downto 0) <= p_cast_cast_fu_208_p3(2 downto 0);
                shift_V_1_reg_731 <= shift_V_1_fu_225_p2;
                tmp_1_reg_717 <= tmp_1_fu_215_p2;
                tmp_3_reg_725 <= tmp_3_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_reg_736 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                r_V_20_reg_772 <= grp_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_reg_736 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                r_V_21_reg_777 <= grp_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then
                reg_161 <= grp_lut_div5_chunk_fu_138_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                xf_V_7_reg_782 <= xf_V_7_fu_353_p3;
            end if;
        end if;
    end process;
    p_cast_cast_reg_711(10 downto 3) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state14, grp_lut_div5_chunk_fu_138_ap_done, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state50)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_lut_div5_chunk_fu_138_ap_done, ap_CS_fsm_state50)
    begin
        if ((((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_lut_div5_chunk_fu_138_ap_done, ap_CS_fsm_state50)
    begin
        if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(grp_lut_div5_chunk_fu_138_ap_done, ap_CS_fsm_state50, out_fu_677_p1, ap_return_preg)
    begin
        if (((grp_lut_div5_chunk_fu_138_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            ap_return <= out_fu_677_p1;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    d_chunk_V_18_fu_560_p1 <= xf_V_8_fu_374_p2(3 - 1 downto 0);
    grp_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_V_4_reg_741),52));
    grp_fu_344_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_mant_V_1_reg_698),57));
    grp_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_V_4_reg_741),57));
    grp_lut_div5_chunk_fu_138_ap_start <= grp_lut_div5_chunk_fu_138_ap_start_reg;

    grp_lut_div5_chunk_fu_138_d_V_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, d_chunk_V_reg_788, d_chunk_V_1_reg_793, d_chunk_V_2_reg_798, d_chunk_V_3_reg_803, d_chunk_V_4_reg_808, d_chunk_V_5_reg_813, d_chunk_V_6_reg_818, d_chunk_V_7_reg_823, d_chunk_V_8_reg_828, d_chunk_V_9_reg_833, d_chunk_V_10_reg_838, d_chunk_V_11_reg_843, d_chunk_V_12_reg_848, d_chunk_V_13_reg_853, d_chunk_V_14_reg_858, d_chunk_V_15_reg_863, d_chunk_V_16_reg_868, d_chunk_V_17_reg_873, d_chunk_V_18_reg_878, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_lut_div5_chunk_fu_138_d_V <= d_chunk_V_18_reg_878;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_lut_div5_chunk_fu_138_d_V <= d_chunk_V_17_reg_873;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_lut_div5_chunk_fu_138_d_V <= d_chunk_V_16_reg_868;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_lut_div5_chunk_fu_138_d_V <= d_chunk_V_15_reg_863;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_lut_div5_chunk_fu_138_d_V <= d_chunk_V_14_reg_858;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_lut_div5_chunk_fu_138_d_V <= d_chunk_V_13_reg_853;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_lut_div5_chunk_fu_138_d_V <= d_chunk_V_12_reg_848;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_lut_div5_chunk_fu_138_d_V <= d_chunk_V_11_reg_843;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_lut_div5_chunk_fu_138_d_V <= d_chunk_V_10_reg_838;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_lut_div5_chunk_fu_138_d_V <= d_chunk_V_9_reg_833;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_lut_div5_chunk_fu_138_d_V <= d_chunk_V_8_reg_828;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_lut_div5_chunk_fu_138_d_V <= d_chunk_V_7_reg_823;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_lut_div5_chunk_fu_138_d_V <= d_chunk_V_6_reg_818;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_lut_div5_chunk_fu_138_d_V <= d_chunk_V_5_reg_813;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_lut_div5_chunk_fu_138_d_V <= d_chunk_V_4_reg_808;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_lut_div5_chunk_fu_138_d_V <= d_chunk_V_3_reg_803;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_lut_div5_chunk_fu_138_d_V <= d_chunk_V_2_reg_798;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_lut_div5_chunk_fu_138_d_V <= d_chunk_V_1_reg_793;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_lut_div5_chunk_fu_138_d_V <= d_chunk_V_reg_788;
        else 
            grp_lut_div5_chunk_fu_138_d_V <= "XXX";
        end if; 
    end process;


    grp_lut_div5_chunk_fu_138_r_in_V_assign_proc : process(reg_161, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_lut_div5_chunk_fu_138_r_in_V <= reg_161;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_lut_div5_chunk_fu_138_r_in_V <= ap_const_lv3_0;
        else 
            grp_lut_div5_chunk_fu_138_r_in_V <= "XXX";
        end if; 
    end process;

    icmp_fu_202_p2 <= "1" when (tmp_fu_192_p4 = ap_const_lv2_0) else "0";
    new_exp_V_fu_234_p2 <= std_logic_vector(unsigned(new_exp_V_1_reg_686) - unsigned(p_cast_cast_reg_711));
    new_mant_V_1_fu_188_p1 <= p_Val2_s_fu_166_p1(52 - 1 downto 0);
    new_mant_V_fu_623_p19 <= (((((((((((((((((tmp_10_fu_619_p1 & call_ret3_i_i_reg_888_0) & call_ret4_i_i_reg_893_0) & call_ret5_i_i_reg_898_0) & call_ret6_i_i_reg_903_0) & call_ret7_i_i_reg_908_0) & call_ret8_i_i_reg_913_0) & call_ret9_i_i_reg_918_0) & call_ret10_i_i_reg_923_0) & call_ret11_i_i_reg_928_0) & call_ret12_i_i_reg_933_0) & call_ret13_i_i_reg_938_0) & call_ret14_i_i_reg_943_0) & call_ret15_i_i_reg_948_0) & call_ret16_i_i_reg_953_0) & call_ret17_i_i_reg_958_0) & call_ret18_i_i_reg_963_0) & grp_lut_div5_chunk_fu_138_ap_return_0);
    out_fu_677_p1 <= p_Result_1_fu_669_p4;
    p_2_fu_308_p3 <= 
        ap_const_lv11_7FF when (tmp_7_fu_303_p2(0) = '1') else 
        ap_const_lv11_0;
    p_Repl2_1_fu_322_p3 <= 
        p_2_fu_308_p3 when (tmp_2_fu_316_p2(0) = '1') else 
        new_exp_V_fu_234_p2;
    p_Repl2_s_fu_663_p3 <= 
        new_mant_V_1_reg_698 when (tmp_7_reg_747(0) = '1') else 
        new_mant_V_fu_623_p19;
    p_Result_1_fu_669_p4 <= ((p_Repl2_2_reg_681 & p_Repl2_1_reg_752) & p_Repl2_s_fu_663_p3);
    
    p_Result_s_fu_359_p4_proc : process(xf_V_7_reg_782)
    begin
        p_Result_s_fu_359_p4 <= xf_V_7_reg_782;
        p_Result_s_fu_359_p4(52) <= ap_const_lv1_1(0);
    end process;

    p_Val2_s_fu_166_p1 <= in_r;
    p_cast_cast_fu_208_p3 <= 
        ap_const_lv11_4 when (icmp_reg_705(0) = '1') else 
        ap_const_lv11_3;
    r_V_23_cast_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_20_reg_772),57));
    sel_tmp1_fu_260_p2 <= (tmp_3_reg_725 and sel_tmp_fu_255_p2);
    sel_tmp5_demorgan_fu_272_p2 <= (tmp_3_reg_725 or tmp_1_reg_717);
    sel_tmp5_fu_276_p2 <= (sel_tmp5_demorgan_fu_272_p2 xor ap_const_lv1_1);
    sel_tmp6_fu_282_p2 <= (tmp_4_fu_245_p2 and sel_tmp5_fu_276_p2);
    sel_tmp_fu_255_p2 <= (tmp_1_reg_717 xor ap_const_lv1_1);
    shift_V_1_fu_225_p2 <= std_logic_vector(signed(ap_const_lv11_7FE) + signed(new_exp_V_1_reg_686));
    shift_V_2_fu_265_p3 <= 
        shift_V_cast_cast_fu_238_p3 when (sel_tmp1_fu_260_p2(0) = '1') else 
        shift_V_1_reg_731;
    shift_V_3_fu_288_p3 <= 
        shift_V_fu_250_p2 when (sel_tmp6_fu_282_p2(0) = '1') else 
        shift_V_2_fu_265_p3;
    shift_V_4_fu_296_p3 <= 
        ap_const_lv11_1 when (tmp_1_reg_717(0) = '1') else 
        shift_V_3_fu_288_p3;
    shift_V_cast_cast_fu_238_p3 <= 
        ap_const_lv11_3 when (icmp_reg_705(0) = '1') else 
        ap_const_lv11_2;
    shift_V_fu_250_p2 <= std_logic_vector(unsigned(ap_const_lv11_2) - unsigned(new_exp_V_1_reg_686));
    tmp_10_fu_619_p1 <= call_ret2_i_i_reg_883_0(1 - 1 downto 0);
    tmp_1_fu_215_p2 <= "1" when (new_exp_V_1_reg_686 = ap_const_lv11_0) else "0";
    tmp_2_fu_316_p2 <= (tmp_s_fu_230_p2 or tmp_7_fu_303_p2);
    tmp_3_fu_220_p2 <= "1" when (unsigned(p_cast_cast_fu_208_p3) < unsigned(new_exp_V_1_reg_686)) else "0";
    tmp_4_fu_245_p2 <= "1" when (unsigned(new_exp_V_1_reg_686) < unsigned(ap_const_lv11_3)) else "0";
    tmp_7_fu_303_p2 <= "1" when (new_exp_V_1_reg_686 = ap_const_lv11_7FF) else "0";
    tmp_fu_192_p4 <= p_Val2_s_fu_166_p1(51 downto 50);
    tmp_s_fu_230_p2 <= "1" when (unsigned(p_cast_cast_reg_711) > unsigned(new_exp_V_1_reg_686)) else "0";
    xf_V_5_fu_368_p3 <= 
        xf_V_7_reg_782 when (tmp_1_reg_717(0) = '1') else 
        p_Result_s_fu_359_p4;
    xf_V_7_fu_353_p3 <= 
        r_V_23_cast_fu_350_p1 when (tmp_4_reg_736(0) = '1') else 
        r_V_21_reg_777;
    xf_V_8_fu_374_p2 <= std_logic_vector(unsigned(ap_const_lv57_2) + unsigned(xf_V_5_fu_368_p3));
end behav;
