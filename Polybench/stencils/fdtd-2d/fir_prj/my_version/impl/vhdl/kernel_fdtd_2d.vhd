-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_fdtd_2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tmax : IN STD_LOGIC_VECTOR (31 downto 0);
    nx : IN STD_LOGIC_VECTOR (31 downto 0);
    ny : IN STD_LOGIC_VECTOR (31 downto 0);
    ex_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ex_ce0 : OUT STD_LOGIC;
    ex_we0 : OUT STD_LOGIC;
    ex_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ex_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    ex_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ex_ce1 : OUT STD_LOGIC;
    ex_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    ey_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ey_ce0 : OUT STD_LOGIC;
    ey_we0 : OUT STD_LOGIC;
    ey_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ey_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    hz_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    hz_ce0 : OUT STD_LOGIC;
    hz_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    hz_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    hz_ce1 : OUT STD_LOGIC;
    hz_we1 : OUT STD_LOGIC;
    hz_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    hz_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_fict_s_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_fict_s_ce0 : OUT STD_LOGIC;
    p_fict_s_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of kernel_fdtd_2d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel_fdtd_2d,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.334000,HLS_SYN_LAT=3245651601,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=17,HLS_SYN_FF=1781,HLS_SYN_LUT=3275,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (72 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (72 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (72 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (72 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (72 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (72 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (72 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (72 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (72 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (72 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv64_3FE6666666666666 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100110011001100110011001100110011001100110011001100110";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv20_3E8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001111101000";
    constant ap_const_lv10_3E7 : STD_LOGIC_VECTOR (9 downto 0) := "1111100111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_334 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal reg_339 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_325_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_344 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal reg_353 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal reg_359 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal t_1_fu_370_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_1_reg_1026 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_fict_addr_reg_1031 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond7_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_387_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_4_reg_1039 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_1_fu_1005_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_1_reg_1057 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond5_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_1011_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_3_reg_1062 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_5_fu_424_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_5_reg_1070 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ey_addr_1_reg_1075 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond4_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_455_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Repl2_2_reg_1095 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_1_fu_523_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Repl2_1_reg_1100 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_mant_V_6_fu_643_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal new_mant_V_6_reg_1105 : STD_LOGIC_VECTOR (51 downto 0);
    signal out_fu_658_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal next_mul_fu_663_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal next_mul_reg_1115 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal i_5_fu_675_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_5_reg_1123 : STD_LOGIC_VECTOR (9 downto 0);
    signal ex_addr_reg_1131 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal exitcond2_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_6_fu_724_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_6_reg_1146 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Repl2_5_reg_1151 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_4_fu_792_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Repl2_4_reg_1156 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_mant_V_7_fu_912_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal new_mant_V_7_reg_1161 : STD_LOGIC_VECTOR (51 downto 0);
    signal out_1_fu_927_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal next_mul2_fu_932_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal next_mul2_reg_1171 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal i_4_fu_944_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_4_reg_1179 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_1017_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_10_reg_1184 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond1_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_7_fu_960_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_7_reg_1192 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_39_cast_fu_976_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_cast_reg_1197 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_981_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_30_fu_981_p2 : signal is "no";
    signal tmp_30_reg_1208 : STD_LOGIC_VECTOR (19 downto 0);
    signal ex_load_2_reg_1218 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal hz_addr_4_reg_1233 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_329_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_reg_1239 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_reg_211 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_222 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_reg_234 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond6_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_reg_246 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_1_reg_257 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_mul_reg_268 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_2_reg_280 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal exitcond3_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_291 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_mul1_reg_302 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_3_reg_314 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal tmp_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_cast_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_cast_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_cast_fu_697_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_cast_fu_719_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_cast_fu_996_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_cast_fu_1001_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_fu_325_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal tmp_2_fu_408_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_cast_fu_430_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_4_fu_434_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of tmp_4_fu_434_p2 : signal is "no";
    signal tmp_5_fu_445_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of tmp_5_fu_445_p2 : signal is "no";
    signal p_Val2_s_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal new_mant_V_fu_483_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal new_exp_V_fu_473_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_new_exp_V_1_i_fu_509_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_exp_V_1_fu_503_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_531_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_547_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shift_V_i_fu_563_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shift_V_i_cast_fu_557_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xf_V_4_i_cast_fu_487_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_2_i_fu_581_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal xf_V_fu_589_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_0274_2_i_fu_573_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_i_cast_fu_611_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_i_cast_fu_597_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_9_i_fu_607_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_fu_615_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal r_V_1_fu_621_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_8_i_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_627_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_14_fu_631_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal new_mant_V_1_fu_635_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_s_fu_651_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_cast_fu_687_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_15_fu_691_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_12_fu_703_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_cast_fu_709_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_17_fu_713_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_1_fu_730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal new_mant_V_4_fu_752_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal new_exp_V_2_fu_742_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i6_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i7_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_new_exp_V_1_i9_fu_778_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_exp_V_3_fu_772_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_25_fu_800_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_fu_816_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp5_fu_810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shift_V_i1_fu_832_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shift_V_i12_cast_fu_826_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xf_V_4_i5_cast_fu_756_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_2_i1_fu_850_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal xf_V_3_fu_858_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_0274_2_i1_fu_842_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_i19_cast_fu_880_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_i17_cast_fu_866_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_9_i1_fu_876_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_2_fu_884_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal r_V_3_fu_890_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_8_i1_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_896_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_28_fu_900_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal new_mant_V_3_fu_904_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_1_fu_920_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_cast_fu_966_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_29_fu_970_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_18_cast_fu_986_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_31_fu_990_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_1_fu_1005_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_1005_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_1011_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_1011_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_fu_1017_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_1017_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_325_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (72 downto 0);
    signal tmp_10_fu_1017_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_1_fu_1005_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_3_fu_1011_p00 : STD_LOGIC_VECTOR (19 downto 0);

    component kernel_fdtd_2d_dabkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_fdtd_2d_dmcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_fdtd_2d_mudEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    kernel_fdtd_2d_dabkb_U1 : component kernel_fdtd_2d_dabkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_325_p0,
        din1 => grp_fu_325_p1,
        opcode => grp_fu_325_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_325_p2);

    kernel_fdtd_2d_dmcud_U2 : component kernel_fdtd_2d_dmcud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_344,
        din1 => ap_const_lv64_3FE6666666666666,
        ce => ap_const_logic_1,
        dout => grp_fu_329_p2);

    kernel_fdtd_2d_mudEe_U3 : component kernel_fdtd_2d_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_1_fu_1005_p0,
        din1 => tmp_1_fu_1005_p1,
        dout => tmp_1_fu_1005_p2);

    kernel_fdtd_2d_mudEe_U4 : component kernel_fdtd_2d_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_3_fu_1011_p0,
        din1 => tmp_3_fu_1011_p1,
        dout => tmp_3_fu_1011_p2);

    kernel_fdtd_2d_mudEe_U5 : component kernel_fdtd_2d_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_10_fu_1017_p0,
        din1 => tmp_10_fu_1017_p1,
        dout => tmp_10_fu_1017_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_398_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_1_reg_257 <= ap_const_lv10_0;
            elsif (((exitcond2_fu_681_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                i_1_reg_257 <= i_5_reg_1123;
            end if; 
        end if;
    end process;

    i_2_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_669_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                i_2_reg_291 <= ap_const_lv10_0;
            elsif (((exitcond_fu_954_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                i_2_reg_291 <= i_4_reg_1179;
            end if; 
        end if;
    end process;

    i_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_234 <= ap_const_lv10_1;
            elsif (((exitcond4_fu_418_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_reg_234 <= i_3_fu_455_p2;
            end if; 
        end if;
    end process;

    j_1_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_398_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_1_reg_246 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                j_1_reg_246 <= j_5_reg_1070;
            end if; 
        end if;
    end process;

    j_2_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_669_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                j_2_reg_280 <= ap_const_lv10_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                j_2_reg_280 <= j_6_reg_1146;
            end if; 
        end if;
    end process;

    j_3_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_938_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                j_3_reg_314 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                j_3_reg_314 <= j_7_reg_1192;
            end if; 
        end if;
    end process;

    j_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_364_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_222 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_reg_222 <= j_4_reg_1039;
            end if; 
        end if;
    end process;

    phi_mul1_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_669_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                phi_mul1_reg_302 <= ap_const_lv20_0;
            elsif (((exitcond_fu_954_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                phi_mul1_reg_302 <= next_mul2_reg_1171;
            end if; 
        end if;
    end process;

    phi_mul_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_398_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul_reg_268 <= ap_const_lv20_0;
            elsif (((exitcond2_fu_681_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                phi_mul_reg_268 <= next_mul_reg_1115;
            end if; 
        end if;
    end process;

    t_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_938_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                t_reg_211 <= t_1_reg_1026;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_reg_211 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_681_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                ex_addr_reg_1131 <= tmp_37_cast_fu_697_p1(20 - 1 downto 0);
                j_6_reg_1146 <= j_6_fu_724_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                ex_load_2_reg_1218 <= ex_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_418_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                ey_addr_1_reg_1075 <= tmp_33_cast_fu_439_p1(20 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                hz_addr_4_reg_1233 <= tmp_39_cast_reg_1197(20 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                i_4_reg_1179 <= i_4_fu_944_p2;
                next_mul2_reg_1171 <= next_mul2_fu_932_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                i_5_reg_1123 <= i_5_fu_675_p2;
                next_mul_reg_1115 <= next_mul_fu_663_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_4_reg_1039 <= j_4_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_5_reg_1070 <= j_5_fu_424_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                j_7_reg_1192 <= j_7_fu_960_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                new_mant_V_6_reg_1105 <= new_mant_V_6_fu_643_p3;
                p_Repl2_1_reg_1100 <= p_Repl2_1_fu_523_p3;
                p_Repl2_2_reg_1095 <= p_Val2_s_fu_461_p1(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                new_mant_V_7_reg_1161 <= new_mant_V_7_fu_912_p3;
                p_Repl2_4_reg_1156 <= p_Repl2_4_fu_792_p3;
                p_Repl2_5_reg_1151 <= p_Val2_1_fu_730_p1(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_364_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_fict_addr_reg_1031 <= tmp_fu_376_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_334 <= hz_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_339 <= hz_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_344 <= grp_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state51))) then
                reg_353 <= ey_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34))) then
                reg_359 <= ex_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                t_1_reg_1026 <= t_1_fu_370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_938_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                tmp_10_reg_1184 <= tmp_10_fu_1017_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_398_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_1_reg_1057 <= tmp_1_fu_1005_p2;
                tmp_3_reg_1062 <= tmp_3_fu_1011_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                tmp_22_reg_1239 <= grp_fu_329_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_954_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                tmp_30_reg_1208 <= tmp_30_fu_981_p2;
                    tmp_39_cast_reg_1197(19 downto 0) <= tmp_39_cast_fu_976_p1(19 downto 0);
            end if;
        end if;
    end process;
    tmp_39_cast_reg_1197(63 downto 20) <= "00000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond7_fu_364_p2, ap_CS_fsm_state3, ap_CS_fsm_state6, exitcond5_fu_398_p2, ap_CS_fsm_state7, exitcond4_fu_418_p2, ap_CS_fsm_state24, ap_CS_fsm_state25, exitcond2_fu_681_p2, ap_CS_fsm_state42, exitcond1_fu_938_p2, ap_CS_fsm_state43, exitcond_fu_954_p2, exitcond6_fu_381_p2, exitcond3_fu_669_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond7_fu_364_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond6_fu_381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((exitcond5_fu_398_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((exitcond4_fu_418_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state24 => 
                if (((exitcond3_fu_669_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                if (((exitcond2_fu_681_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state42 => 
                if (((exitcond1_fu_938_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                if (((exitcond_fu_954_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond7_fu_364_p2)
    begin
        if (((exitcond7_fu_364_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond7_fu_364_p2)
    begin
        if (((exitcond7_fu_364_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ex_address0_assign_proc : process(ex_addr_reg_1131, ap_CS_fsm_state43, tmp_41_cast_fu_996_p1, ap_CS_fsm_state31, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            ex_address0 <= tmp_41_cast_fu_996_p1(20 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            ex_address0 <= ex_addr_reg_1131;
        else 
            ex_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    ex_address1 <= tmp_39_cast_fu_976_p1(20 - 1 downto 0);

    ex_ce0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state46, ap_CS_fsm_state43, ap_CS_fsm_state41, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state40, ap_CS_fsm_state44, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            ex_ce0 <= ap_const_logic_1;
        else 
            ex_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ex_ce1_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            ex_ce1 <= ap_const_logic_1;
        else 
            ex_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ex_d0 <= reg_344;

    ex_we0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            ex_we0 <= ap_const_logic_1;
        else 
            ex_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_938_p2 <= "1" when (i_2_reg_291 = ap_const_lv10_3E7) else "0";
    exitcond2_fu_681_p2 <= "1" when (j_2_reg_280 = ap_const_lv10_3E8) else "0";
    exitcond3_fu_669_p2 <= "1" when (i_1_reg_257 = ap_const_lv10_3E8) else "0";
    exitcond4_fu_418_p2 <= "1" when (j_1_reg_246 = ap_const_lv10_3E8) else "0";
    exitcond5_fu_398_p2 <= "1" when (i_reg_234 = ap_const_lv10_3E8) else "0";
    exitcond6_fu_381_p2 <= "1" when (j_reg_222 = ap_const_lv10_3E8) else "0";
    exitcond7_fu_364_p2 <= "1" when (t_reg_211 = ap_const_lv6_32) else "0";
    exitcond_fu_954_p2 <= "1" when (j_3_reg_314 = ap_const_lv10_3E7) else "0";

    ey_address0_assign_proc : process(ap_CS_fsm_state4, ey_addr_1_reg_1075, tmp_39_cast_reg_1197, ap_CS_fsm_state48, ap_CS_fsm_state53, tmp_s_fu_393_p1, tmp_40_cast_fu_1001_p1, ap_CS_fsm_state13, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            ey_address0 <= tmp_39_cast_reg_1197(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            ey_address0 <= tmp_40_cast_fu_1001_p1(20 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ey_address0 <= ey_addr_1_reg_1075;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ey_address0 <= tmp_s_fu_393_p1(20 - 1 downto 0);
        else 
            ey_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ey_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state51, ap_CS_fsm_state56, ap_CS_fsm_state16, ap_CS_fsm_state4, ap_CS_fsm_state48, ap_CS_fsm_state53, ap_CS_fsm_state5, ap_CS_fsm_state23, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state22, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state54, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ey_ce0 <= ap_const_logic_1;
        else 
            ey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ey_d0_assign_proc : process(p_fict_s_q0, reg_344, ap_CS_fsm_state4, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ey_d0 <= reg_344;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ey_d0 <= p_fict_s_q0;
        else 
            ey_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ey_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ey_we0 <= ap_const_logic_1;
        else 
            ey_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_325_opcode_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state35, ap_CS_fsm_state11, ap_CS_fsm_state29, ap_CS_fsm_state47, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state67)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_325_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_325_opcode <= ap_const_lv2_0;
        else 
            grp_fu_325_opcode <= "XX";
        end if; 
    end process;


    grp_fu_325_p0_assign_proc : process(reg_334, reg_344, reg_353, reg_359, ap_CS_fsm_state17, ap_CS_fsm_state35, ap_CS_fsm_state11, ap_CS_fsm_state29, ap_CS_fsm_state47, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state67)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            grp_fu_325_p0 <= reg_344;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            grp_fu_325_p0 <= reg_359;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_325_p0 <= reg_353;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_325_p0 <= reg_334;
        else 
            grp_fu_325_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_325_p1_assign_proc : process(reg_339, reg_353, out_fu_658_p1, ap_CS_fsm_state17, out_1_fu_927_p1, ap_CS_fsm_state35, ex_load_2_reg_1218, tmp_22_reg_1239, ap_CS_fsm_state11, ap_CS_fsm_state29, ap_CS_fsm_state47, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_325_p1 <= tmp_22_reg_1239;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            grp_fu_325_p1 <= reg_353;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_325_p1 <= ex_load_2_reg_1218;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_325_p1 <= out_1_fu_927_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_325_p1 <= out_fu_658_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_325_p1 <= reg_339;
        else 
            grp_fu_325_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hz_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state25, hz_addr_4_reg_1233, tmp_33_cast_fu_439_p1, tmp_37_cast_fu_697_p1, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            hz_address0 <= hz_addr_4_reg_1233;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            hz_address0 <= tmp_37_cast_fu_697_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hz_address0 <= tmp_33_cast_fu_439_p1(20 - 1 downto 0);
        else 
            hz_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hz_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state25, hz_addr_4_reg_1233, tmp_34_cast_fu_450_p1, tmp_38_cast_fu_719_p1, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            hz_address1 <= hz_addr_4_reg_1233;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            hz_address1 <= tmp_38_cast_fu_719_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hz_address1 <= tmp_34_cast_fu_450_p1(20 - 1 downto 0);
        else 
            hz_address1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hz_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state28, ap_CS_fsm_state66, ap_CS_fsm_state7, ap_CS_fsm_state25, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            hz_ce0 <= ap_const_logic_1;
        else 
            hz_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hz_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state28, ap_CS_fsm_state7, ap_CS_fsm_state25, ap_CS_fsm_state73, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            hz_ce1 <= ap_const_logic_1;
        else 
            hz_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    hz_d1 <= reg_344;

    hz_we1_assign_proc : process(ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            hz_we1 <= ap_const_logic_1;
        else 
            hz_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_3_fu_455_p2 <= std_logic_vector(unsigned(i_reg_234) + unsigned(ap_const_lv10_1));
    i_4_fu_944_p2 <= std_logic_vector(unsigned(i_2_reg_291) + unsigned(ap_const_lv10_1));
    i_5_fu_675_p2 <= std_logic_vector(unsigned(i_1_reg_257) + unsigned(ap_const_lv10_1));
    icmp5_fu_810_p2 <= "0" when (tmp_25_fu_800_p4 = ap_const_lv10_0) else "1";
    icmp_fu_541_p2 <= "0" when (tmp_11_fu_531_p4 = ap_const_lv10_0) else "1";
    j_4_fu_387_p2 <= std_logic_vector(unsigned(j_reg_222) + unsigned(ap_const_lv10_1));
    j_5_fu_424_p2 <= std_logic_vector(unsigned(j_1_reg_246) + unsigned(ap_const_lv10_1));
    j_6_fu_724_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(j_2_reg_280));
    j_7_fu_960_p2 <= std_logic_vector(unsigned(j_3_reg_314) + unsigned(ap_const_lv10_1));
    new_exp_V_1_fu_503_p2 <= std_logic_vector(signed(ap_const_lv11_7FF) + signed(new_exp_V_fu_473_p4));
    new_exp_V_2_fu_742_p4 <= p_Val2_1_fu_730_p1(62 downto 52);
    new_exp_V_3_fu_772_p2 <= std_logic_vector(signed(ap_const_lv11_7FF) + signed(new_exp_V_2_fu_742_p4));
    new_exp_V_fu_473_p4 <= p_Val2_s_fu_461_p1(62 downto 52);
    new_mant_V_1_fu_635_p3 <= 
        tmp_13_fu_627_p1 when (tmp_8_i_fu_601_p2(0) = '1') else 
        tmp_14_fu_631_p1;
    new_mant_V_3_fu_904_p3 <= 
        tmp_27_fu_896_p1 when (tmp_8_i1_fu_870_p2(0) = '1') else 
        tmp_28_fu_900_p1;
    new_mant_V_4_fu_752_p1 <= p_Val2_1_fu_730_p1(52 - 1 downto 0);
    new_mant_V_6_fu_643_p3 <= 
        new_mant_V_fu_483_p1 when (tmp_i_fu_491_p2(0) = '1') else 
        new_mant_V_1_fu_635_p3;
    new_mant_V_7_fu_912_p3 <= 
        new_mant_V_4_fu_752_p1 when (tmp_i6_fu_760_p2(0) = '1') else 
        new_mant_V_3_fu_904_p3;
    new_mant_V_fu_483_p1 <= p_Val2_s_fu_461_p1(52 - 1 downto 0);
    next_mul2_fu_932_p2 <= std_logic_vector(unsigned(phi_mul1_reg_302) + unsigned(ap_const_lv20_3E8));
    next_mul_fu_663_p2 <= std_logic_vector(unsigned(phi_mul_reg_268) + unsigned(ap_const_lv20_3E8));
    out_1_fu_927_p1 <= p_Result_1_fu_920_p4;
    out_fu_658_p1 <= p_Result_s_fu_651_p4;
    p_0274_2_i1_fu_842_p3 <= 
        p_shift_V_i1_fu_832_p1 when (tmp_26_fu_836_p2(0) = '1') else 
        shift_V_i12_cast_fu_826_p2;
    p_0274_2_i_fu_573_p3 <= 
        p_shift_V_i_fu_563_p1 when (tmp_9_fu_567_p2(0) = '1') else 
        shift_V_i_cast_fu_557_p2;
    p_Repl2_1_fu_523_p3 <= 
        p_new_exp_V_1_i_fu_509_p3 when (tmp_6_fu_517_p2(0) = '1') else 
        new_exp_V_1_fu_503_p2;
    p_Repl2_4_fu_792_p3 <= 
        p_new_exp_V_1_i9_fu_778_p3 when (tmp_18_fu_786_p2(0) = '1') else 
        new_exp_V_3_fu_772_p2;
    p_Result_1_fu_920_p4 <= ((p_Repl2_5_reg_1151 & p_Repl2_4_reg_1156) & new_mant_V_7_reg_1161);
    p_Result_s_fu_651_p4 <= ((p_Repl2_2_reg_1095 & p_Repl2_1_reg_1100) & new_mant_V_6_reg_1105);
    p_Val2_1_fu_730_p1 <= reg_344;
    p_Val2_s_fu_461_p1 <= reg_344;
    p_fict_s_address0 <= p_fict_addr_reg_1031;

    p_fict_s_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_fict_s_ce0 <= ap_const_logic_1;
        else 
            p_fict_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_i17_cast_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_V_3_fu_858_p3),55));
    p_i_cast_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_V_fu_589_p3),55));
    p_new_exp_V_1_i9_fu_778_p3 <= 
        ap_const_lv11_7FF when (tmp_i6_fu_760_p2(0) = '1') else 
        ap_const_lv11_0;
    p_new_exp_V_1_i_fu_509_p3 <= 
        ap_const_lv11_7FF when (tmp_i_fu_491_p2(0) = '1') else 
        ap_const_lv11_0;
    p_shift_V_i1_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_i7_fu_766_p2),2));
    p_shift_V_i_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_i_fu_497_p2),2));
    r_V_1_fu_621_p2 <= std_logic_vector(shift_left(unsigned(p_i_cast_fu_597_p1),to_integer(unsigned('0' & tmp_9_i_fu_607_p1(31-1 downto 0)))));
    r_V_2_fu_884_p2 <= std_logic_vector(shift_right(unsigned(xf_V_3_fu_858_p3),to_integer(unsigned('0' & tmp_9_i19_cast_fu_880_p1(31-1 downto 0)))));
    r_V_3_fu_890_p2 <= std_logic_vector(shift_left(unsigned(p_i17_cast_fu_866_p1),to_integer(unsigned('0' & tmp_9_i1_fu_876_p1(31-1 downto 0)))));
    r_V_fu_615_p2 <= std_logic_vector(shift_right(unsigned(xf_V_fu_589_p3),to_integer(unsigned('0' & tmp_9_i_cast_fu_611_p1(31-1 downto 0)))));
    shift_V_i12_cast_fu_826_p2 <= std_logic_vector(signed(ap_const_lv2_2) - signed(tmp_24_fu_816_p4));
    shift_V_i_cast_fu_557_p2 <= std_logic_vector(signed(ap_const_lv2_2) - signed(tmp_7_fu_547_p4));
    t_1_fu_370_p2 <= std_logic_vector(unsigned(t_reg_211) + unsigned(ap_const_lv6_1));
    tmp_10_fu_1017_p0 <= tmp_10_fu_1017_p00(10 - 1 downto 0);
    tmp_10_fu_1017_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_fu_944_p2),20));
    tmp_10_fu_1017_p1 <= ap_const_lv20_3E8(11 - 1 downto 0);
    tmp_11_cast_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_280),20));
    tmp_11_fu_531_p4 <= p_Val2_s_fu_461_p1(62 downto 53);
    tmp_12_fu_703_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(j_2_reg_280));
    tmp_13_cast_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_703_p2),20));
    tmp_13_fu_627_p1 <= r_V_fu_615_p2(52 - 1 downto 0);
    tmp_14_fu_631_p1 <= r_V_1_fu_621_p2(52 - 1 downto 0);
    tmp_15_fu_691_p2 <= std_logic_vector(unsigned(tmp_11_cast_fu_687_p1) + unsigned(phi_mul_reg_268));
    tmp_17_cast_fu_966_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_reg_314),20));
    tmp_17_fu_713_p2 <= std_logic_vector(unsigned(tmp_13_cast_fu_709_p1) + unsigned(phi_mul_reg_268));
    tmp_18_cast_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_7_fu_960_p2),20));
    tmp_18_fu_786_p2 <= (tmp_i6_fu_760_p2 or tmp_1_i7_fu_766_p2);
    tmp_1_fu_1005_p0 <= tmp_1_fu_1005_p00(10 - 1 downto 0);
    tmp_1_fu_1005_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_234),20));
    tmp_1_fu_1005_p1 <= ap_const_lv20_3E8(11 - 1 downto 0);
    tmp_1_i7_fu_766_p2 <= "1" when (new_exp_V_2_fu_742_p4 = ap_const_lv11_0) else "0";
    tmp_1_i_fu_497_p2 <= "1" when (new_exp_V_fu_473_p4 = ap_const_lv11_0) else "0";
    tmp_24_fu_816_p4 <= p_Val2_1_fu_730_p1(53 downto 52);
    tmp_25_fu_800_p4 <= p_Val2_1_fu_730_p1(62 downto 53);
    tmp_26_fu_836_p2 <= (tmp_1_i7_fu_766_p2 or icmp5_fu_810_p2);
    tmp_27_fu_896_p1 <= r_V_2_fu_884_p2(52 - 1 downto 0);
    tmp_28_fu_900_p1 <= r_V_3_fu_890_p2(52 - 1 downto 0);
    tmp_29_fu_970_p2 <= std_logic_vector(unsigned(phi_mul1_reg_302) + unsigned(tmp_17_cast_fu_966_p1));
    tmp_2_fu_408_p2 <= std_logic_vector(unsigned(i_reg_234) + unsigned(ap_const_lv10_3FF));
    tmp_2_i1_fu_850_p3 <= (ap_const_lv1_1 & new_mant_V_4_fu_752_p1);
    tmp_2_i_fu_581_p3 <= (ap_const_lv1_1 & new_mant_V_fu_483_p1);
    tmp_30_fu_981_p2 <= std_logic_vector(unsigned(tmp_10_reg_1184) + unsigned(tmp_17_cast_fu_966_p1));
    tmp_31_fu_990_p2 <= std_logic_vector(unsigned(phi_mul1_reg_302) + unsigned(tmp_18_cast_fu_986_p1));
    tmp_33_cast_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_434_p2),64));
    tmp_34_cast_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_445_p2),64));
    tmp_37_cast_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_691_p2),64));
    tmp_38_cast_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_713_p2),64));
    tmp_39_cast_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_970_p2),64));
    tmp_3_fu_1011_p0 <= tmp_3_fu_1011_p00(10 - 1 downto 0);
    tmp_3_fu_1011_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_408_p2),20));
    tmp_3_fu_1011_p1 <= ap_const_lv20_3E8(11 - 1 downto 0);
    tmp_40_cast_fu_1001_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_reg_1208),64));
    tmp_41_cast_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_990_p2),64));
    tmp_4_fu_434_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_430_p1) + unsigned(tmp_1_reg_1057));
    tmp_5_cast_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_246),20));
    tmp_5_fu_445_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_430_p1) + unsigned(tmp_3_reg_1062));
    tmp_6_fu_517_p2 <= (tmp_i_fu_491_p2 or tmp_1_i_fu_497_p2);
    tmp_7_fu_547_p4 <= p_Val2_s_fu_461_p1(53 downto 52);
    tmp_8_i1_fu_870_p2 <= "1" when (unsigned(new_exp_V_2_fu_742_p4) < unsigned(ap_const_lv11_3)) else "0";
    tmp_8_i_fu_601_p2 <= "1" when (unsigned(new_exp_V_fu_473_p4) < unsigned(ap_const_lv11_3)) else "0";
    tmp_9_fu_567_p2 <= (tmp_1_i_fu_497_p2 or icmp_fu_541_p2);
    tmp_9_i19_cast_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0274_2_i1_fu_842_p3),53));
    tmp_9_i1_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0274_2_i1_fu_842_p3),55));
    tmp_9_i_cast_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0274_2_i_fu_573_p3),53));
    tmp_9_i_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0274_2_i_fu_573_p3),55));
    tmp_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_reg_211),64));
    tmp_i6_fu_760_p2 <= "1" when (new_exp_V_2_fu_742_p4 = ap_const_lv11_7FF) else "0";
    tmp_i_fu_491_p2 <= "1" when (new_exp_V_fu_473_p4 = ap_const_lv11_7FF) else "0";
    tmp_s_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_222),64));
    xf_V_3_fu_858_p3 <= 
        xf_V_4_i5_cast_fu_756_p1 when (tmp_1_i7_fu_766_p2(0) = '1') else 
        tmp_2_i1_fu_850_p3;
    xf_V_4_i5_cast_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_mant_V_4_fu_752_p1),53));
    xf_V_4_i_cast_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_mant_V_fu_483_p1),53));
    xf_V_fu_589_p3 <= 
        xf_V_4_i_cast_fu_487_p1 when (tmp_1_i_fu_497_p2(0) = '1') else 
        tmp_2_i_fu_581_p3;
end behav;
