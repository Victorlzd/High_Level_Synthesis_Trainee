-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_fdtd_2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tmax : IN STD_LOGIC_VECTOR (31 downto 0);
    nx : IN STD_LOGIC_VECTOR (31 downto 0);
    ny : IN STD_LOGIC_VECTOR (31 downto 0);
    ex_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ex_ce0 : OUT STD_LOGIC;
    ex_we0 : OUT STD_LOGIC;
    ex_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ex_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    ex_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ex_ce1 : OUT STD_LOGIC;
    ex_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    ey_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ey_ce0 : OUT STD_LOGIC;
    ey_we0 : OUT STD_LOGIC;
    ey_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ey_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    hz_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    hz_ce0 : OUT STD_LOGIC;
    hz_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    hz_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    hz_ce1 : OUT STD_LOGIC;
    hz_we1 : OUT STD_LOGIC;
    hz_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    hz_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_fict_s_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_fict_s_ce0 : OUT STD_LOGIC;
    p_fict_s_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of kernel_fdtd_2d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel_fdtd_2d,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.334000,HLS_SYN_LAT=3645251601,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=17,HLS_SYN_FF=1661,HLS_SYN_LUT=2131,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (80 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (80 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (80 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (80 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (80 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (80 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (80 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (80 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (80 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (80 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (80 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (80 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FE6666666666666 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100110011001100110011001100110011001100110011001100110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv20_3E8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001111101000";
    constant ap_const_lv10_3E7 : STD_LOGIC_VECTOR (9 downto 0) := "1111100111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_307 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal reg_312 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_297_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_317 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal reg_326 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_301_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_332 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal reg_337 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal t_1_fu_348_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_1_reg_600 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_fict_addr_reg_605 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond7_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_365_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_4_reg_613 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_3_fu_579_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_3_reg_631 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond5_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_585_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_5_reg_636 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_5_fu_402_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_5_reg_644 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ey_addr_1_reg_649 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond4_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_433_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul_fu_439_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal next_mul_reg_669 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal i_5_fu_451_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_5_reg_677 : STD_LOGIC_VECTOR (9 downto 0);
    signal ex_addr_reg_685 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal exitcond2_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_6_fu_500_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_6_reg_700 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul2_fu_506_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal next_mul2_reg_705 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal i_4_fu_518_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_4_reg_713 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_591_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_8_reg_718 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond1_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_7_fu_534_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_7_reg_726 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal tmp_33_cast_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_cast_reg_731 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_555_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_17_fu_555_p2 : signal is "no";
    signal tmp_17_reg_742 : STD_LOGIC_VECTOR (19 downto 0);
    signal ex_load_2_reg_752 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal hz_addr_4_reg_767 : STD_LOGIC_VECTOR (19 downto 0);
    signal t_reg_183 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_194 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_reg_206 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond6_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_reg_218 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i_1_reg_229 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_mul_reg_240 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_2_reg_252 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal exitcond3_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_263 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_mul1_reg_274 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_3_reg_286 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal tmp_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_cast_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_cast_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_cast_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_cast_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_cast_fu_570_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_cast_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_fu_297_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal grp_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal tmp_4_fu_386_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_cast_fu_408_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_6_fu_412_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of tmp_6_fu_412_p2 : signal is "no";
    signal tmp_7_fu_423_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of tmp_7_fu_423_p2 : signal is "no";
    signal tmp_11_cast_fu_463_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_10_fu_467_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_11_fu_479_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_cast_fu_485_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_12_fu_489_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_17_cast_fu_540_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_16_fu_544_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_18_cast_fu_560_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_18_fu_564_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_3_fu_579_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_579_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_585_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_585_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_fu_591_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_591_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_297_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (80 downto 0);
    signal tmp_3_fu_579_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_5_fu_585_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_8_fu_591_p00 : STD_LOGIC_VECTOR (19 downto 0);

    component kernel_fdtd_2d_dabkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_fdtd_2d_dmcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_fdtd_2d_mudEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    kernel_fdtd_2d_dabkb_U1 : component kernel_fdtd_2d_dabkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_297_p0,
        din1 => grp_fu_297_p1,
        opcode => grp_fu_297_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_297_p2);

    kernel_fdtd_2d_dmcud_U2 : component kernel_fdtd_2d_dmcud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_317,
        din1 => grp_fu_301_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_301_p2);

    kernel_fdtd_2d_mudEe_U3 : component kernel_fdtd_2d_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_3_fu_579_p0,
        din1 => tmp_3_fu_579_p1,
        dout => tmp_3_fu_579_p2);

    kernel_fdtd_2d_mudEe_U4 : component kernel_fdtd_2d_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_5_fu_585_p0,
        din1 => tmp_5_fu_585_p1,
        dout => tmp_5_fu_585_p2);

    kernel_fdtd_2d_mudEe_U5 : component kernel_fdtd_2d_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_8_fu_591_p0,
        din1 => tmp_8_fu_591_p1,
        dout => tmp_8_fu_591_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_1_reg_229 <= ap_const_lv10_0;
            elsif (((exitcond2_fu_457_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                i_1_reg_229 <= i_5_reg_677;
            end if; 
        end if;
    end process;

    i_2_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_445_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                i_2_reg_263 <= ap_const_lv10_0;
            elsif (((exitcond_fu_528_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                i_2_reg_263 <= i_4_reg_713;
            end if; 
        end if;
    end process;

    i_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_359_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_206 <= ap_const_lv10_1;
            elsif (((exitcond4_fu_396_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_reg_206 <= i_3_fu_433_p2;
            end if; 
        end if;
    end process;

    j_1_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_376_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_1_reg_218 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                j_1_reg_218 <= j_5_reg_644;
            end if; 
        end if;
    end process;

    j_2_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_445_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                j_2_reg_252 <= ap_const_lv10_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                j_2_reg_252 <= j_6_reg_700;
            end if; 
        end if;
    end process;

    j_3_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_512_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                j_3_reg_286 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                j_3_reg_286 <= j_7_reg_726;
            end if; 
        end if;
    end process;

    j_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_342_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_194 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_reg_194 <= j_4_reg_613;
            end if; 
        end if;
    end process;

    phi_mul1_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_445_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                phi_mul1_reg_274 <= ap_const_lv20_0;
            elsif (((exitcond_fu_528_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                phi_mul1_reg_274 <= next_mul2_reg_705;
            end if; 
        end if;
    end process;

    phi_mul_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul_reg_240 <= ap_const_lv20_0;
            elsif (((exitcond2_fu_457_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                phi_mul_reg_240 <= next_mul_reg_669;
            end if; 
        end if;
    end process;

    t_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_512_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                t_reg_183 <= t_1_reg_600;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_reg_183 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_457_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                ex_addr_reg_685 <= tmp_31_cast_fu_473_p1(20 - 1 downto 0);
                j_6_reg_700 <= j_6_fu_500_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                ex_load_2_reg_752 <= ex_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_396_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                ey_addr_1_reg_649 <= tmp_27_cast_fu_417_p1(20 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                hz_addr_4_reg_767 <= tmp_33_cast_reg_731(20 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                i_4_reg_713 <= i_4_fu_518_p2;
                next_mul2_reg_705 <= next_mul2_fu_506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                i_5_reg_677 <= i_5_fu_451_p2;
                next_mul_reg_669 <= next_mul_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_4_reg_613 <= j_4_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_5_reg_644 <= j_5_fu_402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                j_7_reg_726 <= j_7_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_342_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_fict_addr_reg_605 <= tmp_fu_354_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_307 <= hz_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_312 <= hz_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_317 <= grp_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59))) then
                reg_326 <= ey_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state74))) then
                reg_332 <= grp_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state42))) then
                reg_337 <= ex_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                t_1_reg_600 <= t_1_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_528_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                tmp_17_reg_742 <= tmp_17_fu_555_p2;
                    tmp_33_cast_reg_731(19 downto 0) <= tmp_33_cast_fu_550_p1(19 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_376_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_3_reg_631 <= tmp_3_fu_579_p2;
                tmp_5_reg_636 <= tmp_5_fu_585_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_512_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                tmp_8_reg_718 <= tmp_8_fu_591_p2;
            end if;
        end if;
    end process;
    tmp_33_cast_reg_731(63 downto 20) <= "00000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond7_fu_342_p2, ap_CS_fsm_state3, ap_CS_fsm_state6, exitcond5_fu_376_p2, ap_CS_fsm_state7, exitcond4_fu_396_p2, ap_CS_fsm_state28, ap_CS_fsm_state29, exitcond2_fu_457_p2, ap_CS_fsm_state50, exitcond1_fu_512_p2, ap_CS_fsm_state51, exitcond_fu_528_p2, exitcond6_fu_359_p2, exitcond3_fu_445_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond7_fu_342_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond6_fu_359_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((exitcond5_fu_376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((exitcond4_fu_396_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state28 => 
                if (((exitcond3_fu_445_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                if (((exitcond2_fu_457_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state50 => 
                if (((exitcond1_fu_512_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state51 => 
                if (((exitcond_fu_528_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond7_fu_342_p2)
    begin
        if (((exitcond7_fu_342_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond7_fu_342_p2)
    begin
        if (((exitcond7_fu_342_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ex_address0_assign_proc : process(ex_addr_reg_685, ap_CS_fsm_state51, tmp_35_cast_fu_570_p1, ap_CS_fsm_state39, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            ex_address0 <= tmp_35_cast_fu_570_p1(20 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            ex_address0 <= ex_addr_reg_685;
        else 
            ex_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    ex_address1 <= tmp_33_cast_fu_550_p1(20 - 1 downto 0);

    ex_ce0_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state54, ap_CS_fsm_state51, ap_CS_fsm_state49, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state48, ap_CS_fsm_state52, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            ex_ce0 <= ap_const_logic_1;
        else 
            ex_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ex_ce1_assign_proc : process(ap_CS_fsm_state54, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state54))) then 
            ex_ce1 <= ap_const_logic_1;
        else 
            ex_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ex_d0 <= reg_317;

    ex_we0_assign_proc : process(ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            ex_we0 <= ap_const_logic_1;
        else 
            ex_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_512_p2 <= "1" when (i_2_reg_263 = ap_const_lv10_3E7) else "0";
    exitcond2_fu_457_p2 <= "1" when (j_2_reg_252 = ap_const_lv10_3E8) else "0";
    exitcond3_fu_445_p2 <= "1" when (i_1_reg_229 = ap_const_lv10_3E8) else "0";
    exitcond4_fu_396_p2 <= "1" when (j_1_reg_218 = ap_const_lv10_3E8) else "0";
    exitcond5_fu_376_p2 <= "1" when (i_reg_206 = ap_const_lv10_3E8) else "0";
    exitcond6_fu_359_p2 <= "1" when (j_reg_194 = ap_const_lv10_3E8) else "0";
    exitcond7_fu_342_p2 <= "1" when (t_reg_183 = ap_const_lv6_32) else "0";
    exitcond_fu_528_p2 <= "1" when (j_3_reg_286 = ap_const_lv10_3E7) else "0";

    ey_address0_assign_proc : process(ap_CS_fsm_state4, ey_addr_1_reg_649, tmp_33_cast_reg_731, ap_CS_fsm_state56, ap_CS_fsm_state61, tmp_1_fu_371_p1, tmp_34_cast_fu_575_p1, ap_CS_fsm_state17, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            ey_address0 <= tmp_33_cast_reg_731(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            ey_address0 <= tmp_34_cast_fu_575_p1(20 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ey_address0 <= ey_addr_1_reg_649;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ey_address0 <= tmp_1_fu_371_p1(20 - 1 downto 0);
        else 
            ey_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ey_ce0_assign_proc : process(ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state20, ap_CS_fsm_state4, ap_CS_fsm_state56, ap_CS_fsm_state61, ap_CS_fsm_state5, ap_CS_fsm_state27, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state62, ap_CS_fsm_state63)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            ey_ce0 <= ap_const_logic_1;
        else 
            ey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ey_d0_assign_proc : process(p_fict_s_q0, reg_317, ap_CS_fsm_state4, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            ey_d0 <= reg_317;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ey_d0 <= p_fict_s_q0;
        else 
            ey_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ey_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ey_we0 <= ap_const_logic_1;
        else 
            ey_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_297_opcode_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state21, ap_CS_fsm_state33, ap_CS_fsm_state43, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state65, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_297_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_297_opcode <= ap_const_lv2_0;
        else 
            grp_fu_297_opcode <= "XX";
        end if; 
    end process;


    grp_fu_297_p0_assign_proc : process(reg_307, reg_317, reg_326, reg_337, ap_CS_fsm_state11, ap_CS_fsm_state21, ap_CS_fsm_state33, ap_CS_fsm_state43, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state65, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            grp_fu_297_p0 <= reg_317;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            grp_fu_297_p0 <= reg_337;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_297_p0 <= reg_326;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_297_p0 <= reg_307;
        else 
            grp_fu_297_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_297_p1_assign_proc : process(reg_312, reg_326, reg_332, ex_load_2_reg_752, ap_CS_fsm_state11, ap_CS_fsm_state21, ap_CS_fsm_state33, ap_CS_fsm_state43, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state65, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            grp_fu_297_p1 <= reg_326;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_297_p1 <= ex_load_2_reg_752;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_fu_297_p1 <= reg_332;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_297_p1 <= reg_312;
        else 
            grp_fu_297_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_301_p1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state38, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            grp_fu_301_p1 <= ap_const_lv64_3FE6666666666666;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_301_p1 <= ap_const_lv64_3FE0000000000000;
        else 
            grp_fu_301_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hz_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state29, hz_addr_4_reg_767, tmp_27_cast_fu_417_p1, tmp_31_cast_fu_473_p1, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            hz_address0 <= hz_addr_4_reg_767;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            hz_address0 <= tmp_31_cast_fu_473_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hz_address0 <= tmp_27_cast_fu_417_p1(20 - 1 downto 0);
        else 
            hz_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hz_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state29, hz_addr_4_reg_767, tmp_28_cast_fu_428_p1, tmp_32_cast_fu_495_p1, ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            hz_address1 <= hz_addr_4_reg_767;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            hz_address1 <= tmp_32_cast_fu_495_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hz_address1 <= tmp_28_cast_fu_428_p1(20 - 1 downto 0);
        else 
            hz_address1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hz_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state32, ap_CS_fsm_state74, ap_CS_fsm_state7, ap_CS_fsm_state29, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            hz_ce0 <= ap_const_logic_1;
        else 
            hz_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hz_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state32, ap_CS_fsm_state7, ap_CS_fsm_state29, ap_CS_fsm_state81, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            hz_ce1 <= ap_const_logic_1;
        else 
            hz_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    hz_d1 <= reg_317;

    hz_we1_assign_proc : process(ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            hz_we1 <= ap_const_logic_1;
        else 
            hz_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_3_fu_433_p2 <= std_logic_vector(unsigned(i_reg_206) + unsigned(ap_const_lv10_1));
    i_4_fu_518_p2 <= std_logic_vector(unsigned(i_2_reg_263) + unsigned(ap_const_lv10_1));
    i_5_fu_451_p2 <= std_logic_vector(unsigned(i_1_reg_229) + unsigned(ap_const_lv10_1));
    j_4_fu_365_p2 <= std_logic_vector(unsigned(j_reg_194) + unsigned(ap_const_lv10_1));
    j_5_fu_402_p2 <= std_logic_vector(unsigned(j_1_reg_218) + unsigned(ap_const_lv10_1));
    j_6_fu_500_p2 <= std_logic_vector(unsigned(j_2_reg_252) + unsigned(ap_const_lv10_1));
    j_7_fu_534_p2 <= std_logic_vector(unsigned(j_3_reg_286) + unsigned(ap_const_lv10_1));
    next_mul2_fu_506_p2 <= std_logic_vector(unsigned(phi_mul1_reg_274) + unsigned(ap_const_lv20_3E8));
    next_mul_fu_439_p2 <= std_logic_vector(unsigned(phi_mul_reg_240) + unsigned(ap_const_lv20_3E8));
    p_fict_s_address0 <= p_fict_addr_reg_605;

    p_fict_s_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_fict_s_ce0 <= ap_const_logic_1;
        else 
            p_fict_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    t_1_fu_348_p2 <= std_logic_vector(unsigned(t_reg_183) + unsigned(ap_const_lv6_1));
    tmp_10_fu_467_p2 <= std_logic_vector(unsigned(phi_mul_reg_240) + unsigned(tmp_11_cast_fu_463_p1));
    tmp_11_cast_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_252),20));
    tmp_11_fu_479_p2 <= std_logic_vector(unsigned(j_2_reg_252) + unsigned(ap_const_lv10_3FF));
    tmp_12_fu_489_p2 <= std_logic_vector(unsigned(phi_mul_reg_240) + unsigned(tmp_13_cast_fu_485_p1));
    tmp_13_cast_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_479_p2),20));
    tmp_16_fu_544_p2 <= std_logic_vector(unsigned(phi_mul1_reg_274) + unsigned(tmp_17_cast_fu_540_p1));
    tmp_17_cast_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_reg_286),20));
    tmp_17_fu_555_p2 <= std_logic_vector(unsigned(tmp_8_reg_718) + unsigned(tmp_17_cast_fu_540_p1));
    tmp_18_cast_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_7_fu_534_p2),20));
    tmp_18_fu_564_p2 <= std_logic_vector(unsigned(phi_mul1_reg_274) + unsigned(tmp_18_cast_fu_560_p1));
    tmp_1_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_194),64));
    tmp_27_cast_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_412_p2),64));
    tmp_28_cast_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_423_p2),64));
    tmp_31_cast_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_467_p2),64));
    tmp_32_cast_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_489_p2),64));
    tmp_33_cast_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_544_p2),64));
    tmp_34_cast_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_reg_742),64));
    tmp_35_cast_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_564_p2),64));
    tmp_3_fu_579_p0 <= tmp_3_fu_579_p00(10 - 1 downto 0);
    tmp_3_fu_579_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_206),20));
    tmp_3_fu_579_p1 <= ap_const_lv20_3E8(11 - 1 downto 0);
    tmp_4_fu_386_p2 <= std_logic_vector(unsigned(i_reg_206) + unsigned(ap_const_lv10_3FF));
    tmp_5_fu_585_p0 <= tmp_5_fu_585_p00(10 - 1 downto 0);
    tmp_5_fu_585_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_386_p2),20));
    tmp_5_fu_585_p1 <= ap_const_lv20_3E8(11 - 1 downto 0);
    tmp_6_fu_412_p2 <= std_logic_vector(unsigned(tmp_3_reg_631) + unsigned(tmp_8_cast_fu_408_p1));
    tmp_7_fu_423_p2 <= std_logic_vector(unsigned(tmp_5_reg_636) + unsigned(tmp_8_cast_fu_408_p1));
    tmp_8_cast_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_218),20));
    tmp_8_fu_591_p0 <= tmp_8_fu_591_p00(10 - 1 downto 0);
    tmp_8_fu_591_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_fu_518_p2),20));
    tmp_8_fu_591_p1 <= ap_const_lv20_3E8(11 - 1 downto 0);
    tmp_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_reg_183),64));
end behav;
