-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_seidel_2d_my_version is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tsteps : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_we1 : OUT STD_LOGIC;
    A_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of kernel_seidel_2d_my_version is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel_seidel_2d_my_version,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.134875,HLS_SYN_LAT=1095644361,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=1310,HLS_SYN_LUT=5714,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (50 downto 0) := "000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (50 downto 0) := "000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (50 downto 0) := "000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (50 downto 0) := "000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (50 downto 0) := "000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (50 downto 0) := "000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (50 downto 0) := "000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (50 downto 0) := "000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (50 downto 0) := "000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (50 downto 0) := "001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (50 downto 0) := "010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (50 downto 0) := "100000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_3E7 : STD_LOGIC_VECTOR (9 downto 0) := "1111100111";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv57_4 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv20_3E8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001111101000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_211 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_207_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_218 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_1_fu_229_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_1_reg_649 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_fu_628_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_s_reg_657 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond1_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_634_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_1_reg_664 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_1_fu_255_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_671 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_640_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_4_reg_676 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_7_cast_fu_277_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_7_cast_reg_686 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_cast_fu_291_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_8_cast_reg_697 : STD_LOGIC_VECTOR (19 downto 0);
    signal A_load_1_reg_708 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_fu_305_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_reg_713 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_1_cast_fu_311_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_1_cast_reg_718 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_8_fu_334_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_8_fu_334_p2 : signal is "no";
    signal tmp_8_reg_734 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal A_addr_4_reg_739 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_17_fu_347_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of tmp_17_fu_347_p2 : signal is "no";
    signal tmp_17_reg_745 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_19_fu_351_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of tmp_19_fu_351_p2 : signal is "no";
    signal tmp_19_reg_750 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_20_fu_355_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of tmp_20_fu_355_p2 : signal is "no";
    signal tmp_20_reg_755 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal p_Val2_s_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_reg_780 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal p_Repl2_2_reg_785 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_exp_V_reg_790 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_mant_V_fu_397_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal new_mant_V_reg_801 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_1_fu_456_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Repl2_1_reg_816 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal xf_V_4_fu_604_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal xf_V_4_reg_821 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_1_i_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_mant_V_1_fu_611_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_int_57_div9_fu_202_ap_idle : STD_LOGIC;
    signal grp_int_57_div9_fu_202_ap_ready : STD_LOGIC;
    signal grp_int_57_div9_fu_202_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_int_57_div9_fu_202_ap_start : STD_LOGIC;
    signal grp_int_57_div9_fu_202_ap_return : STD_LOGIC_VECTOR (56 downto 0);
    signal t_reg_159 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_170 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond2_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_181 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal p_Repl2_s_reg_193 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_int_57_div9_fu_202_ap_start_reg : STD_LOGIC := '0';
    signal tmp_18_cast_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_cast_fu_300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_cast_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_cast_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_cast_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_cast_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_cast_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_cast_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_cast_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_fu_207_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_fu_241_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_271_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_281_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of tmp_5_fu_281_p2 : signal is "no";
    signal tmp_15_fu_295_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of tmp_15_fu_295_p2 : signal is "no";
    signal tmp_18_fu_315_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of tmp_18_fu_315_p2 : signal is "no";
    signal tmp_7_fu_325_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of tmp_7_fu_325_p2 : signal is "no";
    signal tmp_16_fu_338_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of tmp_16_fu_338_p2 : signal is "no";
    signal tmp_23_fu_401_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal shift_V_i_cast_cast_fu_420_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_i_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_new_exp_V_1_i_fu_442_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_exp_V_1_fu_437_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_24_fu_474_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_i_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_demorgan_i_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp3_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_i_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_i_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_fu_489_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_1_fu_494_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_2_fu_517_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sel_tmp7_i_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_i_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_3_fu_525_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal xf_V_5_i_cast_fu_417_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_3_i_fu_553_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal xf_V_fu_560_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal shift_V_4_fu_545_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_cast_fu_576_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal r_V_fu_580_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_i_cast_fu_568_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_i_fu_572_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal r_V_i_cast_fu_586_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal r_V_1_fu_590_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal xf_V_3_fu_596_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal p_Result_s_fu_615_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_628_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_628_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_fu_634_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_634_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_640_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_640_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_1_fu_634_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_4_fu_640_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_s_fu_628_p00 : STD_LOGIC_VECTOR (19 downto 0);

    component int_57_div9 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V : IN STD_LOGIC_VECTOR (56 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (56 downto 0) );
    end component;


    component kernel_seidel_2d_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_seidel_2d_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    grp_int_57_div9_fu_202 : component int_57_div9
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_int_57_div9_fu_202_ap_start,
        ap_done => grp_int_57_div9_fu_202_ap_done,
        ap_idle => grp_int_57_div9_fu_202_ap_idle,
        ap_ready => grp_int_57_div9_fu_202_ap_ready,
        in_V => xf_V_4_reg_821,
        ap_return => grp_int_57_div9_fu_202_ap_return);

    kernel_seidel_2d_cud_U16 : component kernel_seidel_2d_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_207_p0,
        din1 => grp_fu_207_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_207_p2);

    kernel_seidel_2d_dEe_U17 : component kernel_seidel_2d_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_s_fu_628_p0,
        din1 => tmp_s_fu_628_p1,
        dout => tmp_s_fu_628_p2);

    kernel_seidel_2d_dEe_U18 : component kernel_seidel_2d_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_1_fu_634_p0,
        din1 => tmp_1_fu_634_p1,
        dout => tmp_1_fu_634_p2);

    kernel_seidel_2d_dEe_U19 : component kernel_seidel_2d_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_4_fu_640_p0,
        din1 => tmp_4_fu_640_p1,
        dout => tmp_4_fu_640_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_int_57_div9_fu_202_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_int_57_div9_fu_202_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state48) and (tmp_1_i_fu_427_p2 = ap_const_lv1_0))) then 
                    grp_int_57_div9_fu_202_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_int_57_div9_fu_202_ap_ready = ap_const_logic_1)) then 
                    grp_int_57_div9_fu_202_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_223_p2 = ap_const_lv1_0))) then 
                i_reg_170 <= ap_const_lv10_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_265_p2 = ap_const_lv1_1))) then 
                i_reg_170 <= i_1_reg_671;
            end if; 
        end if;
    end process;

    j_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_235_p2 = ap_const_lv1_0))) then 
                j_reg_181 <= ap_const_lv10_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                j_reg_181 <= j_1_reg_713;
            end if; 
        end if;
    end process;

    p_Repl2_s_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_i_fu_427_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                p_Repl2_s_reg_193 <= new_mant_V_reg_801;
            elsif (((grp_int_57_div9_fu_202_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                p_Repl2_s_reg_193 <= new_mant_V_1_fu_611_p1;
            end if; 
        end if;
    end process;

    reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                reg_211 <= A_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                reg_211 <= A_q0;
            end if; 
        end if;
    end process;

    t_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_235_p2 = ap_const_lv1_1))) then 
                t_reg_159 <= t_1_reg_649;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_reg_159 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                A_addr_4_reg_739 <= tmp_22_cast_fu_342_p1(20 - 1 downto 0);
                tmp_17_reg_745 <= tmp_17_fu_347_p2;
                tmp_19_reg_750 <= tmp_19_fu_351_p2;
                tmp_20_reg_755 <= tmp_20_fu_355_p2;
                tmp_8_reg_734 <= tmp_8_fu_334_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                A_load_1_reg_708 <= A_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_235_p2 = ap_const_lv1_0))) then
                i_1_reg_671 <= i_1_fu_255_p2;
                tmp_1_reg_664 <= tmp_1_fu_634_p2;
                tmp_4_reg_676 <= tmp_4_fu_640_p2;
                tmp_s_reg_657 <= tmp_s_fu_628_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                icmp_reg_808 <= icmp_fu_411_p2;
                new_exp_V_reg_790 <= p_Val2_s_fu_375_p1(62 downto 52);
                new_mant_V_reg_801 <= new_mant_V_fu_397_p1;
                p_Repl2_2_reg_785 <= p_Val2_s_fu_375_p1(63 downto 63);
                p_Val2_s_reg_780 <= p_Val2_s_fu_375_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                j_1_reg_713 <= j_1_fu_305_p2;
                    tmp_1_cast_reg_718(9 downto 0) <= tmp_1_cast_fu_311_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                p_Repl2_1_reg_816 <= p_Repl2_1_fu_456_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then
                reg_218 <= grp_fu_207_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                t_1_reg_649 <= t_1_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_265_p2 = ap_const_lv1_0))) then
                    tmp_7_cast_reg_686(9 downto 0) <= tmp_7_cast_fu_277_p1(9 downto 0);
                    tmp_8_cast_reg_697(9 downto 0) <= tmp_8_cast_fu_291_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state48) and (tmp_1_i_fu_427_p2 = ap_const_lv1_0))) then
                xf_V_4_reg_821 <= xf_V_4_fu_604_p2;
            end if;
        end if;
    end process;
    tmp_7_cast_reg_686(19 downto 10) <= "0000000000";
    tmp_8_cast_reg_697(19 downto 10) <= "0000000000";
    tmp_1_cast_reg_718(19 downto 10) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond1_fu_235_p2, ap_CS_fsm_state4, exitcond_fu_265_p2, ap_CS_fsm_state48, tmp_1_i_fu_427_p2, ap_CS_fsm_state49, grp_int_57_div9_fu_202_ap_done, exitcond2_fu_223_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond2_fu_223_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_235_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_265_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((tmp_1_i_fu_427_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                if (((grp_int_57_div9_fu_202_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state39, tmp_18_cast_fu_286_p1, tmp_24_cast_fu_320_p1, tmp_22_cast_fu_342_p1, tmp_20_cast_fu_363_p1, tmp_26_cast_fu_371_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            A_address0 <= tmp_26_cast_fu_371_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            A_address0 <= tmp_20_cast_fu_363_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            A_address0 <= tmp_22_cast_fu_342_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            A_address0 <= tmp_24_cast_fu_320_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address0 <= tmp_18_cast_fu_286_p1(20 - 1 downto 0);
        else 
            A_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state14, A_addr_4_reg_739, ap_CS_fsm_state24, ap_CS_fsm_state34, ap_CS_fsm_state50, tmp_21_cast_fu_300_p1, tmp_19_cast_fu_329_p1, tmp_25_cast_fu_359_p1, tmp_23_cast_fu_367_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            A_address1 <= A_addr_4_reg_739;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            A_address1 <= tmp_23_cast_fu_367_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            A_address1 <= tmp_25_cast_fu_359_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            A_address1 <= tmp_19_cast_fu_329_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address1 <= tmp_21_cast_fu_300_p1(20 - 1 downto 0);
        else 
            A_address1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state22, ap_CS_fsm_state32, ap_CS_fsm_state42, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state39, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state17, ap_CS_fsm_state27, ap_CS_fsm_state37, ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state34, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state35, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_d1 <= p_Result_s_fu_615_p4;

    A_we1_assign_proc : process(ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            A_we1 <= ap_const_logic_1;
        else 
            A_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_223_p2)
    begin
        if (((exitcond2_fu_223_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_223_p2)
    begin
        if (((exitcond2_fu_223_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_235_p2 <= "1" when (i_reg_170 = ap_const_lv10_3E7) else "0";
    exitcond2_fu_223_p2 <= "1" when (t_reg_159 = ap_const_lv5_14) else "0";
    exitcond_fu_265_p2 <= "1" when (j_reg_181 = ap_const_lv10_3E7) else "0";

    grp_fu_207_p0_assign_proc : process(reg_211, reg_218, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state38, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_207_p0 <= reg_218;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_207_p0 <= reg_211;
        else 
            grp_fu_207_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_207_p1_assign_proc : process(reg_211, A_load_1_reg_708, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state38, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_207_p1 <= reg_211;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_207_p1 <= A_load_1_reg_708;
        else 
            grp_fu_207_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_int_57_div9_fu_202_ap_start <= grp_int_57_div9_fu_202_ap_start_reg;
    i_1_fu_255_p2 <= std_logic_vector(unsigned(i_reg_170) + unsigned(ap_const_lv10_1));
    icmp3_fu_483_p2 <= "1" when (tmp_24_fu_474_p4 = ap_const_lv10_0) else "0";
    icmp_fu_411_p2 <= "1" when (tmp_23_fu_401_p4 = ap_const_lv3_0) else "0";
    j_1_fu_305_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(j_reg_181));
    new_exp_V_1_fu_437_p2 <= std_logic_vector(unsigned(new_exp_V_reg_790) - unsigned(shift_V_i_cast_cast_fu_420_p3));
    new_mant_V_1_fu_611_p1 <= grp_int_57_div9_fu_202_ap_return(52 - 1 downto 0);
    new_mant_V_fu_397_p1 <= p_Val2_s_fu_375_p1(52 - 1 downto 0);
    p_Repl2_1_fu_456_p3 <= 
        p_new_exp_V_1_i_fu_442_p3 when (tmp_14_fu_450_p2(0) = '1') else 
        new_exp_V_1_fu_437_p2;
    p_Result_s_fu_615_p4 <= ((p_Repl2_2_reg_785 & p_Repl2_1_reg_816) & p_Repl2_s_reg_193);
    p_Val2_s_fu_375_p1 <= grp_fu_207_p2;
    p_i_cast_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_V_fu_560_p3),57));
    p_new_exp_V_1_i_fu_442_p3 <= 
        ap_const_lv11_7FF when (tmp_1_i_fu_427_p2(0) = '1') else 
        ap_const_lv11_0;
    r_V_1_fu_590_p2 <= std_logic_vector(shift_left(unsigned(p_i_cast_fu_568_p1),to_integer(unsigned('0' & tmp_i_fu_572_p1(31-1 downto 0)))));
    r_V_fu_580_p2 <= std_logic_vector(shift_right(unsigned(xf_V_fu_560_p3),to_integer(unsigned('0' & tmp_i_cast_fu_576_p1(31-1 downto 0)))));
    r_V_i_cast_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_580_p2),57));
    sel_tmp3_demorgan_i_fu_499_p2 <= (tmp_5_i_fu_469_p2 or tmp_4_i_fu_464_p2);
    sel_tmp3_i_fu_505_p2 <= (sel_tmp3_demorgan_i_fu_499_p2 xor ap_const_lv1_1);
    sel_tmp4_i_fu_511_p2 <= (sel_tmp3_i_fu_505_p2 and icmp3_fu_483_p2);
    sel_tmp7_i_fu_533_p2 <= (tmp_4_i_fu_464_p2 xor ap_const_lv1_1);
    sel_tmp8_i_fu_539_p2 <= (tmp_5_i_fu_469_p2 and sel_tmp7_i_fu_533_p2);
    shift_V_1_fu_494_p2 <= std_logic_vector(signed(ap_const_lv11_7FF) + signed(new_exp_V_reg_790));
    shift_V_2_fu_517_p3 <= 
        shift_V_fu_489_p2 when (sel_tmp4_i_fu_511_p2(0) = '1') else 
        shift_V_1_fu_494_p2;
    shift_V_3_fu_525_p3 <= 
        ap_const_lv11_0 when (tmp_4_i_fu_464_p2(0) = '1') else 
        shift_V_2_fu_517_p3;
    shift_V_4_fu_545_p3 <= 
        shift_V_i_cast_cast_fu_420_p3 when (sel_tmp8_i_fu_539_p2(0) = '1') else 
        shift_V_3_fu_525_p3;
    shift_V_fu_489_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) - unsigned(new_exp_V_reg_790));
    shift_V_i_cast_cast_fu_420_p3 <= 
        ap_const_lv11_4 when (icmp_reg_808(0) = '1') else 
        ap_const_lv11_3;
    t_1_fu_229_p2 <= std_logic_vector(unsigned(t_reg_159) + unsigned(ap_const_lv5_1));
    tmp_14_fu_450_p2 <= (tmp_2_i_fu_432_p2 or tmp_1_i_fu_427_p2);
    tmp_15_fu_295_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_291_p1) + unsigned(tmp_s_reg_657));
    tmp_16_fu_338_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_697) + unsigned(tmp_1_reg_664));
    tmp_17_fu_347_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_697) + unsigned(tmp_4_reg_676));
    tmp_18_cast_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_281_p2),64));
    tmp_18_fu_315_p2 <= std_logic_vector(unsigned(tmp_1_cast_fu_311_p1) + unsigned(tmp_s_reg_657));
    tmp_19_cast_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_325_p2),64));
    tmp_19_fu_351_p2 <= std_logic_vector(unsigned(tmp_1_cast_reg_718) + unsigned(tmp_1_reg_664));
    tmp_1_cast_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_fu_305_p2),20));
    tmp_1_fu_634_p0 <= tmp_1_fu_634_p00(10 - 1 downto 0);
    tmp_1_fu_634_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_170),20));
    tmp_1_fu_634_p1 <= ap_const_lv20_3E8(11 - 1 downto 0);
    tmp_1_i_fu_427_p2 <= "1" when (new_exp_V_reg_790 = ap_const_lv11_7FF) else "0";
    tmp_20_cast_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_734),64));
    tmp_20_fu_355_p2 <= std_logic_vector(unsigned(tmp_1_cast_reg_718) + unsigned(tmp_4_reg_676));
    tmp_21_cast_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_295_p2),64));
    tmp_22_cast_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_338_p2),64));
    tmp_23_cast_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_reg_745),64));
    tmp_23_fu_401_p4 <= p_Val2_s_fu_375_p1(51 downto 49);
    tmp_24_cast_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_315_p2),64));
    tmp_24_fu_474_p4 <= p_Val2_s_reg_780(62 downto 53);
    tmp_25_cast_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_reg_750),64));
    tmp_26_cast_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_reg_755),64));
    tmp_2_i_fu_432_p2 <= "1" when (unsigned(shift_V_i_cast_cast_fu_420_p3) > unsigned(new_exp_V_reg_790)) else "0";
    tmp_3_i_fu_553_p3 <= (ap_const_lv1_1 & new_mant_V_reg_801);
    tmp_4_fu_640_p0 <= tmp_4_fu_640_p00(10 - 1 downto 0);
    tmp_4_fu_640_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_255_p2),20));
    tmp_4_fu_640_p1 <= ap_const_lv20_3E8(11 - 1 downto 0);
    tmp_4_i_fu_464_p2 <= "1" when (new_exp_V_reg_790 = ap_const_lv11_0) else "0";
    tmp_5_fu_281_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_277_p1) + unsigned(tmp_s_reg_657));
    tmp_5_i_fu_469_p2 <= "1" when (unsigned(shift_V_i_cast_cast_fu_420_p3) < unsigned(new_exp_V_reg_790)) else "0";
    tmp_6_fu_271_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(j_reg_181));
    tmp_7_cast_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_271_p2),20));
    tmp_7_fu_325_p2 <= std_logic_vector(unsigned(tmp_7_cast_reg_686) + unsigned(tmp_1_reg_664));
    tmp_8_cast_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_181),20));
    tmp_8_fu_334_p2 <= std_logic_vector(unsigned(tmp_7_cast_reg_686) + unsigned(tmp_4_reg_676));
    tmp_fu_241_p2 <= std_logic_vector(unsigned(i_reg_170) + unsigned(ap_const_lv10_3FF));
    tmp_i_cast_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_V_4_fu_545_p3),53));
    tmp_i_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_V_4_fu_545_p3),57));
    tmp_s_fu_628_p0 <= tmp_s_fu_628_p00(10 - 1 downto 0);
    tmp_s_fu_628_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_241_p2),20));
    tmp_s_fu_628_p1 <= ap_const_lv20_3E8(11 - 1 downto 0);
    xf_V_3_fu_596_p3 <= 
        r_V_i_cast_fu_586_p1 when (icmp3_fu_483_p2(0) = '1') else 
        r_V_1_fu_590_p2;
    xf_V_4_fu_604_p2 <= std_logic_vector(unsigned(ap_const_lv57_4) + unsigned(xf_V_3_fu_596_p3));
    xf_V_5_i_cast_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_mant_V_reg_801),53));
    xf_V_fu_560_p3 <= 
        xf_V_5_i_cast_fu_417_p1 when (tmp_4_i_fu_464_p2(0) = '1') else 
        tmp_3_i_fu_553_p3;
end behav;
