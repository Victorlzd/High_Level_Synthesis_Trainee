-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_jacobi_2d_imper is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tsteps : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_we1 : OUT STD_LOGIC;
    A_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_we0 : OUT STD_LOGIC;
    B_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    B_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of kernel_jacobi_2d_imper is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel_jacobi_2d_imper,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=41.410375,HLS_SYN_LAT=677362621,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=7,HLS_SYN_FF=1185,HLS_SYN_LUT=20337,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_3E7 : STD_LOGIC_VECTOR (9 downto 0) := "1111100111";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv20_3E8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001111101000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_182 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_178_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_189 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal t_1_fu_201_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_1_reg_383 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_fu_356_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_s_reg_391 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond3_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_217_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_2_reg_398 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_362_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_2_reg_403 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_5_fu_368_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_5_reg_408 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_18_cast_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_cast_reg_416 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond2_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_257_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_9_fu_257_p2 : signal is "no";
    signal tmp_9_reg_426 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_13_fu_262_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of tmp_13_fu_262_p2 : signal is "no";
    signal tmp_13_reg_431 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_2_fu_287_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_2_reg_441 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_fu_297_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of tmp_15_fu_297_p2 : signal is "no";
    signal tmp_15_reg_446 : STD_LOGIC_VECTOR (19 downto 0);
    signal A_load_1_reg_451 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_operator_double_div5_fu_173_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_reg_471 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_operator_double_div5_fu_173_ap_idle : STD_LOGIC;
    signal grp_operator_double_div5_fu_173_ap_ready : STD_LOGIC;
    signal grp_operator_double_div5_fu_173_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_6_fu_374_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_6_reg_484 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal exitcond1_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_cast_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_cast_reg_492 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal exitcond_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_344_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_3_reg_502 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_3_fu_350_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_operator_double_div5_fu_173_ap_start : STD_LOGIC;
    signal t_reg_117 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_128 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond4_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_139 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal i_1_reg_150 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_reg_162 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal grp_operator_double_div5_fu_173_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_21_cast_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_cast_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_cast_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_cast_fu_310_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_fu_178_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_4_fu_227_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_cast_fu_243_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_7_fu_247_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of tmp_7_fu_247_p2 : signal is "no";
    signal tmp_8_fu_267_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_cast_fu_273_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_14_fu_277_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of tmp_14_fu_277_p2 : signal is "no";
    signal tmp_2_cast_fu_293_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_13_cast_fu_330_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_16_fu_334_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of tmp_16_fu_334_p2 : signal is "no";
    signal tmp_s_fu_356_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_356_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_362_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_362_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_368_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_368_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_374_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_374_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_2_fu_362_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_5_fu_368_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_6_fu_374_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_s_fu_356_p00 : STD_LOGIC_VECTOR (19 downto 0);

    component operator_double_div5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_jacobi_2d_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_jacobi_2d_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    grp_operator_double_div5_fu_173 : component operator_double_div5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_operator_double_div5_fu_173_ap_start,
        ap_done => grp_operator_double_div5_fu_173_ap_done,
        ap_idle => grp_operator_double_div5_fu_173_ap_idle,
        ap_ready => grp_operator_double_div5_fu_173_ap_ready,
        in_r => reg_189,
        ap_return => grp_operator_double_div5_fu_173_ap_return);

    kernel_jacobi_2d_cud_U16 : component kernel_jacobi_2d_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_178_p0,
        din1 => grp_fu_178_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_178_p2);

    kernel_jacobi_2d_dEe_U17 : component kernel_jacobi_2d_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_s_fu_356_p0,
        din1 => tmp_s_fu_356_p1,
        dout => tmp_s_fu_356_p2);

    kernel_jacobi_2d_dEe_U18 : component kernel_jacobi_2d_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_2_fu_362_p0,
        din1 => tmp_2_fu_362_p1,
        dout => tmp_2_fu_362_p2);

    kernel_jacobi_2d_dEe_U19 : component kernel_jacobi_2d_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_5_fu_368_p0,
        din1 => tmp_5_fu_368_p1,
        dout => tmp_5_fu_368_p2);

    kernel_jacobi_2d_dEe_U20 : component kernel_jacobi_2d_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_6_fu_374_p0,
        din1 => tmp_6_fu_374_p1,
        dout => tmp_6_fu_374_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_operator_double_div5_fu_173_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_operator_double_div5_fu_173_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    grp_operator_double_div5_fu_173_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_operator_double_div5_fu_173_ap_ready = ap_const_logic_1)) then 
                    grp_operator_double_div5_fu_173_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_207_p2 = ap_const_lv1_1))) then 
                i_1_reg_150 <= ap_const_lv10_1;
            elsif (((exitcond_fu_324_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                i_1_reg_150 <= i_3_fu_350_p2;
            end if; 
        end if;
    end process;

    i_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_195_p2 = ap_const_lv1_0))) then 
                i_reg_128 <= ap_const_lv10_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_237_p2 = ap_const_lv1_1))) then 
                i_reg_128 <= i_2_reg_398;
            end if; 
        end if;
    end process;

    j_1_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) and (exitcond1_fu_314_p2 = ap_const_lv1_0))) then 
                j_1_reg_162 <= ap_const_lv10_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                j_1_reg_162 <= j_3_reg_502;
            end if; 
        end if;
    end process;

    j_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_207_p2 = ap_const_lv1_0))) then 
                j_reg_139 <= ap_const_lv10_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                j_reg_139 <= j_2_reg_441;
            end if; 
        end if;
    end process;

    reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                reg_182 <= A_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                reg_182 <= A_q0;
            end if; 
        end if;
    end process;

    t_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_314_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                t_reg_117 <= t_1_reg_383;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_reg_117 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                A_load_1_reg_451 <= A_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_207_p2 = ap_const_lv1_0))) then
                i_2_reg_398 <= i_2_fu_217_p2;
                tmp_2_reg_403 <= tmp_2_fu_362_p2;
                tmp_5_reg_408 <= tmp_5_fu_368_p2;
                tmp_s_reg_391 <= tmp_s_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_237_p2 = ap_const_lv1_0))) then
                j_2_reg_441 <= j_2_fu_287_p2;
                tmp_13_reg_431 <= tmp_13_fu_262_p2;
                tmp_15_reg_446 <= tmp_15_fu_297_p2;
                    tmp_18_cast_reg_416(19 downto 0) <= tmp_18_cast_fu_252_p1(19 downto 0);
                tmp_9_reg_426 <= tmp_9_fu_257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond_fu_324_p2 = ap_const_lv1_0))) then
                j_3_reg_502 <= j_3_fu_344_p2;
                    tmp_23_cast_reg_492(19 downto 0) <= tmp_23_cast_fu_339_p1(19 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state27))) then
                reg_189 <= grp_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                t_1_reg_383 <= t_1_fu_201_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (grp_operator_double_div5_fu_173_ap_done = ap_const_logic_1))) then
                tmp_12_reg_471 <= grp_operator_double_div5_fu_173_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) and (exitcond1_fu_314_p2 = ap_const_lv1_0))) then
                tmp_6_reg_484 <= tmp_6_fu_374_p2;
            end if;
        end if;
    end process;
    tmp_18_cast_reg_416(63 downto 20) <= "00000000000000000000000000000000000000000000";
    tmp_23_cast_reg_492(63 downto 20) <= "00000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond3_fu_207_p2, ap_CS_fsm_state4, exitcond2_fu_237_p2, ap_CS_fsm_state29, grp_operator_double_div5_fu_173_ap_done, ap_CS_fsm_state32, exitcond1_fu_314_p2, ap_CS_fsm_state33, exitcond_fu_324_p2, exitcond4_fu_195_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_195_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_207_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_237_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (grp_operator_double_div5_fu_173_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state32 => 
                if (((exitcond1_fu_314_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state33 => 
                if (((exitcond_fu_324_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(tmp_18_cast_fu_252_p1, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state19, tmp_22_cast_fu_302_p1, tmp_20_cast_fu_310_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            A_address0 <= tmp_20_cast_fu_310_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            A_address0 <= tmp_22_cast_fu_302_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address0 <= tmp_18_cast_fu_252_p1(20 - 1 downto 0);
        else 
            A_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state14, tmp_23_cast_reg_492, ap_CS_fsm_state36, tmp_21_cast_fu_282_p1, tmp_19_cast_fu_306_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            A_address1 <= tmp_23_cast_reg_492(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            A_address1 <= tmp_19_cast_fu_306_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address1 <= tmp_21_cast_fu_282_p1(20 - 1 downto 0);
        else 
            A_address1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state22, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state17, ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_d1 <= B_q0;

    A_we1_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            A_we1 <= ap_const_logic_1;
        else 
            A_we1 <= ap_const_logic_0;
        end if; 
    end process;


    B_address0_assign_proc : process(tmp_18_cast_reg_416, ap_CS_fsm_state30, tmp_23_cast_fu_339_p1, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            B_address0 <= tmp_23_cast_fu_339_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            B_address0 <= tmp_18_cast_reg_416(20 - 1 downto 0);
        else 
            B_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state36, ap_CS_fsm_state31, ap_CS_fsm_state34, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_d0 <= tmp_12_reg_471;

    B_we0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            B_we0 <= ap_const_logic_1;
        else 
            B_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_195_p2)
    begin
        if (((exitcond4_fu_195_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_195_p2)
    begin
        if (((exitcond4_fu_195_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_314_p2 <= "1" when (i_1_reg_150 = ap_const_lv10_3E7) else "0";
    exitcond2_fu_237_p2 <= "1" when (j_reg_139 = ap_const_lv10_3E7) else "0";
    exitcond3_fu_207_p2 <= "1" when (i_reg_128 = ap_const_lv10_3E7) else "0";
    exitcond4_fu_195_p2 <= "1" when (t_reg_117 = ap_const_lv5_14) else "0";
    exitcond_fu_324_p2 <= "1" when (j_1_reg_162 = ap_const_lv10_3E7) else "0";

    grp_fu_178_p0_assign_proc : process(reg_182, reg_189, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state18, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_178_p0 <= reg_189;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_178_p0 <= reg_182;
        else 
            grp_fu_178_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_178_p1_assign_proc : process(reg_182, A_load_1_reg_451, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state18, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_178_p1 <= reg_182;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_178_p1 <= A_load_1_reg_451;
        else 
            grp_fu_178_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_operator_double_div5_fu_173_ap_start <= grp_operator_double_div5_fu_173_ap_start_reg;
    i_2_fu_217_p2 <= std_logic_vector(unsigned(i_reg_128) + unsigned(ap_const_lv10_1));
    i_3_fu_350_p2 <= std_logic_vector(unsigned(i_1_reg_150) + unsigned(ap_const_lv10_1));
    j_2_fu_287_p2 <= std_logic_vector(unsigned(j_reg_139) + unsigned(ap_const_lv10_1));
    j_3_fu_344_p2 <= std_logic_vector(unsigned(j_1_reg_162) + unsigned(ap_const_lv10_1));
    t_1_fu_201_p2 <= std_logic_vector(unsigned(t_reg_117) + unsigned(ap_const_lv5_1));
    tmp_13_cast_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_162),20));
    tmp_13_fu_262_p2 <= std_logic_vector(unsigned(tmp_5_reg_408) + unsigned(tmp_7_cast_fu_243_p1));
    tmp_14_fu_277_p2 <= std_logic_vector(unsigned(tmp_s_reg_391) + unsigned(tmp_9_cast_fu_273_p1));
    tmp_15_fu_297_p2 <= std_logic_vector(unsigned(tmp_s_reg_391) + unsigned(tmp_2_cast_fu_293_p1));
    tmp_16_fu_334_p2 <= std_logic_vector(unsigned(tmp_6_reg_484) + unsigned(tmp_13_cast_fu_330_p1));
    tmp_18_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_247_p2),64));
    tmp_19_cast_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_426),64));
    tmp_20_cast_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_reg_431),64));
    tmp_21_cast_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_277_p2),64));
    tmp_22_cast_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_reg_446),64));
    tmp_23_cast_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_334_p2),64));
    tmp_2_cast_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_fu_287_p2),20));
    tmp_2_fu_362_p0 <= tmp_2_fu_362_p00(10 - 1 downto 0);
    tmp_2_fu_362_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_fu_217_p2),20));
    tmp_2_fu_362_p1 <= ap_const_lv20_3E8(11 - 1 downto 0);
    tmp_4_fu_227_p2 <= std_logic_vector(unsigned(i_reg_128) + unsigned(ap_const_lv10_3FF));
    tmp_5_fu_368_p0 <= tmp_5_fu_368_p00(10 - 1 downto 0);
    tmp_5_fu_368_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_227_p2),20));
    tmp_5_fu_368_p1 <= ap_const_lv20_3E8(11 - 1 downto 0);
    tmp_6_fu_374_p0 <= tmp_6_fu_374_p00(10 - 1 downto 0);
    tmp_6_fu_374_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_150),20));
    tmp_6_fu_374_p1 <= ap_const_lv20_3E8(11 - 1 downto 0);
    tmp_7_cast_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_139),20));
    tmp_7_fu_247_p2 <= std_logic_vector(unsigned(tmp_s_reg_391) + unsigned(tmp_7_cast_fu_243_p1));
    tmp_8_fu_267_p2 <= std_logic_vector(unsigned(j_reg_139) + unsigned(ap_const_lv10_3FF));
    tmp_9_cast_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_267_p2),20));
    tmp_9_fu_257_p2 <= std_logic_vector(unsigned(tmp_2_reg_403) + unsigned(tmp_7_cast_fu_243_p1));
    tmp_s_fu_356_p0 <= tmp_s_fu_356_p00(10 - 1 downto 0);
    tmp_s_fu_356_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_128),20));
    tmp_s_fu_356_p1 <= ap_const_lv20_3E8(11 - 1 downto 0);
end behav;
