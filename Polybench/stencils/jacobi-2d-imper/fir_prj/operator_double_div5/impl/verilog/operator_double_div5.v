// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="operator_double_div5,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.691250,HLS_SYN_LAT=37,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=225,HLS_SYN_LUT=1999,HLS_VERSION=2018_2}" *)

module operator_double_div5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] in_r;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] r0_address0;
reg    r0_ce0;
wire   [0:0] r0_q0;
wire   [5:0] r1_address0;
reg    r1_ce0;
wire   [0:0] r1_q0;
wire   [5:0] r2_address0;
reg    r2_ce0;
wire   [0:0] r2_q0;
wire   [5:0] q0_address0;
reg    q0_ce0;
wire   [0:0] q0_q0;
wire   [5:0] q1_address0;
reg    q1_ce0;
wire   [0:0] q1_q0;
wire   [5:0] q2_address0;
reg    q2_ce0;
wire   [0:0] q2_q0;
reg   [0:0] p_Repl2_3_reg_748;
wire   [10:0] new_exp_V_1_fu_234_p4;
reg   [10:0] new_exp_V_1_reg_753;
wire   [51:0] new_mant_V_1_fu_244_p1;
reg   [51:0] new_mant_V_1_reg_758;
wire   [0:0] tmp_1_fu_276_p2;
reg   [0:0] tmp_1_reg_763;
wire   [10:0] new_exp_V_fu_282_p2;
reg   [10:0] new_exp_V_reg_768;
wire   [55:0] xf_V_8_fu_432_p2;
reg   [55:0] xf_V_8_reg_773;
wire   [5:0] tmp_13_fu_472_p1;
reg   [5:0] tmp_13_reg_782;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_10_fu_442_p3;
wire   [0:0] tmp_23_fu_548_p2;
reg   [0:0] tmp_23_reg_817;
wire   [5:0] tmp_24_fu_554_p1;
reg   [5:0] tmp_24_reg_825;
wire   [5:0] i_fu_558_p2;
reg   [5:0] i_reg_833;
wire   [2:0] p_Result_3_fu_613_p4;
wire    ap_CS_fsm_state3;
wire   [55:0] p_Result_5_fu_742_p2;
reg   [2:0] p_Repl2_1_reg_188;
reg   [55:0] p_Val2_3_reg_199;
reg  signed [5:0] i_i_i_reg_211;
wire   [63:0] tmp_i_i_i_fu_538_p1;
wire   [63:0] p_Val2_s_fu_222_p1;
wire   [1:0] tmp_fu_252_p4;
wire   [0:0] icmp_fu_262_p2;
wire   [10:0] shift_V_cast_cast_fu_268_p3;
wire   [9:0] tmp_7_fu_300_p4;
wire   [0:0] tmp_3_fu_288_p2;
wire   [0:0] tmp_4_fu_294_p2;
wire   [0:0] sel_tmp2_demorgan_fu_328_p2;
wire   [0:0] icmp4_fu_310_p2;
wire   [0:0] sel_tmp2_fu_334_p2;
wire   [0:0] sel_tmp3_fu_340_p2;
wire   [10:0] shift_V_fu_316_p2;
wire   [10:0] shift_V_1_fu_322_p2;
wire   [10:0] shift_V_2_fu_346_p3;
wire   [0:0] sel_tmp6_fu_362_p2;
wire   [0:0] sel_tmp7_fu_368_p2;
wire   [10:0] shift_V_3_fu_354_p3;
wire   [10:0] shift_V_4_fu_374_p3;
wire   [51:0] tmp_9_cast_fu_386_p1;
wire   [51:0] r_V_1_fu_390_p2;
wire   [55:0] xf_V_fu_248_p1;
wire   [55:0] tmp_9_fu_382_p1;
wire   [55:0] r_V_1_cast_fu_396_p1;
wire   [55:0] r_V_2_fu_400_p2;
wire   [55:0] xf_V_7_fu_406_p3;
reg   [55:0] p_Result_s_fu_414_p4;
wire   [55:0] xf_V_5_fu_424_p3;
wire   [4:0] tmp_12_fu_450_p1;
wire   [6:0] p_shl_i_i_fu_454_p3;
wire   [7:0] p_shl_i_i_cast_fu_462_p1;
wire  signed [7:0] i_i_i_cast_fu_438_p1;
wire   [7:0] Lo_assign_fu_466_p2;
wire   [5:0] tmp_15_fu_482_p1;
wire   [0:0] tmp_14_fu_476_p2;
reg   [55:0] tmp_16_fu_486_p4;
wire   [5:0] tmp_17_fu_495_p2;
wire   [5:0] tmp_19_fu_508_p3;
wire   [55:0] tmp_18_fu_501_p3;
wire   [55:0] tmp_20_fu_516_p1;
wire   [55:0] tmp_21_fu_520_p2;
wire   [2:0] d_chunk_V_fu_526_p1;
wire   [5:0] p_Result_2_fu_530_p3;
wire   [0:0] tmp_2_fu_568_p2;
wire   [0:0] tmp_6_fu_581_p2;
wire   [10:0] p_s_fu_573_p3;
wire   [51:0] new_mant_V_fu_564_p1;
wire   [10:0] p_Repl2_2_fu_586_p3;
wire   [51:0] p_Repl2_s_fu_593_p3;
wire   [63:0] p_Result_6_fu_600_p4;
wire   [2:0] p_Result_4_fu_623_p4;
wire   [5:0] tmp_25_fu_637_p2;
wire   [5:0] tmp_26_fu_642_p2;
wire   [5:0] tmp_27_fu_647_p3;
wire   [5:0] tmp_29_fu_659_p3;
wire   [5:0] tmp_28_fu_653_p3;
wire   [5:0] tmp_30_fu_665_p2;
wire   [55:0] loc_V_fu_633_p1;
wire   [55:0] tmp_31_fu_671_p1;
wire   [55:0] tmp_34_fu_683_p2;
reg   [55:0] tmp_35_fu_689_p4;
wire   [55:0] tmp_32_fu_675_p1;
wire   [55:0] tmp_33_fu_679_p1;
wire   [55:0] tmp_37_fu_706_p2;
wire   [55:0] tmp_38_fu_712_p2;
wire   [55:0] p_demorgan_fu_718_p2;
wire   [55:0] tmp_39_fu_724_p2;
wire   [55:0] tmp_36_fu_699_p3;
wire   [55:0] tmp_40_fu_730_p2;
wire   [55:0] tmp_41_fu_736_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

operator_double_dbkb #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
r0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(r0_address0),
    .ce0(r0_ce0),
    .q0(r0_q0)
);

operator_double_dcud #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
r1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(r1_address0),
    .ce0(r1_ce0),
    .q0(r1_q0)
);

operator_double_ddEe #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
r2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(r2_address0),
    .ce0(r2_ce0),
    .q0(r2_q0)
);

operator_double_deOg #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q0_address0),
    .ce0(q0_ce0),
    .q0(q0_q0)
);

operator_double_dfYi #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q1_address0),
    .ce0(q1_ce0),
    .q0(q1_q0)
);

operator_double_dg8j #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q2_address0),
    .ce0(q2_ce0),
    .q0(q2_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_i_i_reg_211 <= i_reg_833;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_i_reg_211 <= 6'd17;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Repl2_1_reg_188 <= p_Result_3_fu_613_p4;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Repl2_1_reg_188 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_fu_442_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_833 <= i_fu_558_p2;
        tmp_13_reg_782 <= tmp_13_fu_472_p1;
        tmp_23_reg_817 <= tmp_23_fu_548_p2;
        tmp_24_reg_825 <= tmp_24_fu_554_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        new_exp_V_1_reg_753 <= {{p_Val2_s_fu_222_p1[62:52]}};
        new_exp_V_reg_768 <= new_exp_V_fu_282_p2;
        new_mant_V_1_reg_758 <= new_mant_V_1_fu_244_p1;
        p_Repl2_3_reg_748 <= p_Val2_s_fu_222_p1[32'd63];
        tmp_1_reg_763 <= tmp_1_fu_276_p2;
        xf_V_8_reg_773 <= xf_V_8_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Val2_3_reg_199 <= p_Result_5_fu_742_p2;
    end
end

always @ (*) begin
    if (((tmp_10_fu_442_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_10_fu_442_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        q0_ce0 = 1'b1;
    end else begin
        q0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        q1_ce0 = 1'b1;
    end else begin
        q1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        q2_ce0 = 1'b1;
    end else begin
        q2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r0_ce0 = 1'b1;
    end else begin
        r0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r1_ce0 = 1'b1;
    end else begin
        r1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r2_ce0 = 1'b1;
    end else begin
        r2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_10_fu_442_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Lo_assign_fu_466_p2 = ($signed(p_shl_i_i_cast_fu_462_p1) - $signed(i_i_i_cast_fu_438_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_return = p_Result_6_fu_600_p4;

assign d_chunk_V_fu_526_p1 = tmp_21_fu_520_p2[2:0];

assign i_fu_558_p2 = ($signed(6'd63) + $signed(i_i_i_reg_211));

assign i_i_i_cast_fu_438_p1 = i_i_i_reg_211;

assign icmp4_fu_310_p2 = ((tmp_7_fu_300_p4 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_fu_262_p2 = ((tmp_fu_252_p4 == 2'd0) ? 1'b1 : 1'b0);

assign loc_V_fu_633_p1 = p_Result_4_fu_623_p4;

assign new_exp_V_1_fu_234_p4 = {{p_Val2_s_fu_222_p1[62:52]}};

assign new_exp_V_fu_282_p2 = (new_exp_V_1_fu_234_p4 - shift_V_cast_cast_fu_268_p3);

assign new_mant_V_1_fu_244_p1 = p_Val2_s_fu_222_p1[51:0];

assign new_mant_V_fu_564_p1 = p_Val2_3_reg_199[51:0];

assign p_Repl2_2_fu_586_p3 = ((tmp_6_fu_581_p2[0:0] === 1'b1) ? p_s_fu_573_p3 : new_exp_V_reg_768);

assign p_Repl2_s_fu_593_p3 = ((tmp_2_fu_568_p2[0:0] === 1'b1) ? new_mant_V_1_reg_758 : new_mant_V_fu_564_p1);

assign p_Result_2_fu_530_p3 = {{p_Repl2_1_reg_188}, {d_chunk_V_fu_526_p1}};

assign p_Result_3_fu_613_p4 = {{{r2_q0}, {r1_q0}}, {r0_q0}};

assign p_Result_4_fu_623_p4 = {{{q2_q0}, {q1_q0}}, {q0_q0}};

assign p_Result_5_fu_742_p2 = (tmp_41_fu_736_p2 | tmp_40_fu_730_p2);

assign p_Result_6_fu_600_p4 = {{{p_Repl2_3_reg_748}, {p_Repl2_2_fu_586_p3}}, {p_Repl2_s_fu_593_p3}};

always @ (*) begin
    p_Result_s_fu_414_p4 = xf_V_7_fu_406_p3;
    p_Result_s_fu_414_p4[32'd52] = |(1'd1);
end

assign p_Val2_s_fu_222_p1 = in_r;

assign p_demorgan_fu_718_p2 = (tmp_38_fu_712_p2 & tmp_37_fu_706_p2);

assign p_s_fu_573_p3 = ((tmp_2_fu_568_p2[0:0] === 1'b1) ? 11'd2047 : 11'd0);

assign p_shl_i_i_cast_fu_462_p1 = p_shl_i_i_fu_454_p3;

assign p_shl_i_i_fu_454_p3 = {{tmp_12_fu_450_p1}, {2'd0}};

assign q0_address0 = tmp_i_i_i_fu_538_p1;

assign q1_address0 = tmp_i_i_i_fu_538_p1;

assign q2_address0 = tmp_i_i_i_fu_538_p1;

assign r0_address0 = tmp_i_i_i_fu_538_p1;

assign r1_address0 = tmp_i_i_i_fu_538_p1;

assign r2_address0 = tmp_i_i_i_fu_538_p1;

assign r_V_1_cast_fu_396_p1 = r_V_1_fu_390_p2;

assign r_V_1_fu_390_p2 = new_mant_V_1_fu_244_p1 >> tmp_9_cast_fu_386_p1;

assign r_V_2_fu_400_p2 = xf_V_fu_248_p1 << tmp_9_fu_382_p1;

assign sel_tmp2_demorgan_fu_328_p2 = (tmp_4_fu_294_p2 | tmp_3_fu_288_p2);

assign sel_tmp2_fu_334_p2 = (sel_tmp2_demorgan_fu_328_p2 ^ 1'd1);

assign sel_tmp3_fu_340_p2 = (sel_tmp2_fu_334_p2 & icmp4_fu_310_p2);

assign sel_tmp6_fu_362_p2 = (tmp_3_fu_288_p2 ^ 1'd1);

assign sel_tmp7_fu_368_p2 = (tmp_4_fu_294_p2 & sel_tmp6_fu_362_p2);

assign shift_V_1_fu_322_p2 = ($signed(11'd2047) + $signed(new_exp_V_1_fu_234_p4));

assign shift_V_2_fu_346_p3 = ((sel_tmp3_fu_340_p2[0:0] === 1'b1) ? shift_V_fu_316_p2 : shift_V_1_fu_322_p2);

assign shift_V_3_fu_354_p3 = ((tmp_3_fu_288_p2[0:0] === 1'b1) ? 11'd0 : shift_V_2_fu_346_p3);

assign shift_V_4_fu_374_p3 = ((sel_tmp7_fu_368_p2[0:0] === 1'b1) ? shift_V_cast_cast_fu_268_p3 : shift_V_3_fu_354_p3);

assign shift_V_cast_cast_fu_268_p3 = ((icmp_fu_262_p2[0:0] === 1'b1) ? 11'd3 : 11'd2);

assign shift_V_fu_316_p2 = (11'd1 - new_exp_V_1_fu_234_p4);

assign tmp_10_fu_442_p3 = i_i_i_reg_211[32'd5];

assign tmp_12_fu_450_p1 = i_i_i_reg_211[4:0];

assign tmp_13_fu_472_p1 = Lo_assign_fu_466_p2[5:0];

assign tmp_14_fu_476_p2 = ((Lo_assign_fu_466_p2 > 8'd253) ? 1'b1 : 1'b0);

assign tmp_15_fu_482_p1 = Lo_assign_fu_466_p2[5:0];

integer ap_tvar_int_0;

always @ (xf_V_8_reg_773) begin
    for (ap_tvar_int_0 = 56 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 55 - 0) begin
            tmp_16_fu_486_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_16_fu_486_p4[ap_tvar_int_0] = xf_V_8_reg_773[55 - ap_tvar_int_0];
        end
    end
end

assign tmp_17_fu_495_p2 = ($signed(6'd55) - $signed(tmp_15_fu_482_p1));

assign tmp_18_fu_501_p3 = ((tmp_14_fu_476_p2[0:0] === 1'b1) ? tmp_16_fu_486_p4 : xf_V_8_reg_773);

assign tmp_19_fu_508_p3 = ((tmp_14_fu_476_p2[0:0] === 1'b1) ? tmp_17_fu_495_p2 : tmp_15_fu_482_p1);

assign tmp_1_fu_276_p2 = ((shift_V_cast_cast_fu_268_p3 > new_exp_V_1_fu_234_p4) ? 1'b1 : 1'b0);

assign tmp_20_fu_516_p1 = tmp_19_fu_508_p3;

assign tmp_21_fu_520_p2 = tmp_18_fu_501_p3 >> tmp_20_fu_516_p1;

assign tmp_23_fu_548_p2 = ((Lo_assign_fu_466_p2 > 8'd253) ? 1'b1 : 1'b0);

assign tmp_24_fu_554_p1 = Lo_assign_fu_466_p2[5:0];

assign tmp_25_fu_637_p2 = (6'd2 + tmp_13_reg_782);

assign tmp_26_fu_642_p2 = ($signed(6'd55) - $signed(tmp_24_reg_825));

assign tmp_27_fu_647_p3 = ((tmp_23_reg_817[0:0] === 1'b1) ? tmp_24_reg_825 : tmp_25_fu_637_p2);

assign tmp_28_fu_653_p3 = ((tmp_23_reg_817[0:0] === 1'b1) ? tmp_25_fu_637_p2 : tmp_24_reg_825);

assign tmp_29_fu_659_p3 = ((tmp_23_reg_817[0:0] === 1'b1) ? tmp_26_fu_642_p2 : tmp_24_reg_825);

assign tmp_2_fu_568_p2 = ((new_exp_V_1_reg_753 == 11'd2047) ? 1'b1 : 1'b0);

assign tmp_30_fu_665_p2 = ($signed(6'd55) - $signed(tmp_27_fu_647_p3));

assign tmp_31_fu_671_p1 = tmp_29_fu_659_p3;

assign tmp_32_fu_675_p1 = tmp_28_fu_653_p3;

assign tmp_33_fu_679_p1 = tmp_30_fu_665_p2;

assign tmp_34_fu_683_p2 = loc_V_fu_633_p1 << tmp_31_fu_671_p1;

integer ap_tvar_int_1;

always @ (tmp_34_fu_683_p2) begin
    for (ap_tvar_int_1 = 56 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 55 - 0) begin
            tmp_35_fu_689_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_35_fu_689_p4[ap_tvar_int_1] = tmp_34_fu_683_p2[55 - ap_tvar_int_1];
        end
    end
end

assign tmp_36_fu_699_p3 = ((tmp_23_reg_817[0:0] === 1'b1) ? tmp_35_fu_689_p4 : tmp_34_fu_683_p2);

assign tmp_37_fu_706_p2 = 56'd72057594037927935 << tmp_32_fu_675_p1;

assign tmp_38_fu_712_p2 = 56'd72057594037927935 >> tmp_33_fu_679_p1;

assign tmp_39_fu_724_p2 = (p_demorgan_fu_718_p2 ^ 56'd72057594037927935);

assign tmp_3_fu_288_p2 = ((new_exp_V_1_fu_234_p4 == 11'd0) ? 1'b1 : 1'b0);

assign tmp_40_fu_730_p2 = (tmp_39_fu_724_p2 & p_Val2_3_reg_199);

assign tmp_41_fu_736_p2 = (tmp_36_fu_699_p3 & p_demorgan_fu_718_p2);

assign tmp_4_fu_294_p2 = ((shift_V_cast_cast_fu_268_p3 < new_exp_V_1_fu_234_p4) ? 1'b1 : 1'b0);

assign tmp_6_fu_581_p2 = (tmp_2_fu_568_p2 | tmp_1_reg_763);

assign tmp_7_fu_300_p4 = {{p_Val2_s_fu_222_p1[62:53]}};

assign tmp_9_cast_fu_386_p1 = shift_V_4_fu_374_p3;

assign tmp_9_fu_382_p1 = shift_V_4_fu_374_p3;

assign tmp_fu_252_p4 = {{p_Val2_s_fu_222_p1[51:50]}};

assign tmp_i_i_i_fu_538_p1 = p_Result_2_fu_530_p3;

assign xf_V_5_fu_424_p3 = ((tmp_3_fu_288_p2[0:0] === 1'b1) ? xf_V_7_fu_406_p3 : p_Result_s_fu_414_p4);

assign xf_V_7_fu_406_p3 = ((icmp4_fu_310_p2[0:0] === 1'b1) ? r_V_1_cast_fu_396_p1 : r_V_2_fu_400_p2);

assign xf_V_8_fu_432_p2 = (56'd2 + xf_V_5_fu_424_p3);

assign xf_V_fu_248_p1 = new_mant_V_1_fu_244_p1;

endmodule //operator_double_div5
