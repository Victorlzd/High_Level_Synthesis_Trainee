-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity operator_double_div5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of operator_double_div5 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "operator_double_div5,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.691250,HLS_SYN_LAT=37,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=225,HLS_SYN_LUT=1999,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_11 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv56_2 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv6_37 : STD_LOGIC_VECTOR (5 downto 0) := "110111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv56_FFFFFFFFFFFFFF : STD_LOGIC_VECTOR (55 downto 0) := "11111111111111111111111111111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal r0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r0_ce0 : STD_LOGIC;
    signal r0_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal r1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r1_ce0 : STD_LOGIC;
    signal r1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal r2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r2_ce0 : STD_LOGIC;
    signal r2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal q0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal q0_ce0 : STD_LOGIC;
    signal q0_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal q1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal q1_ce0 : STD_LOGIC;
    signal q1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal q2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal q2_ce0 : STD_LOGIC;
    signal q2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_3_reg_748 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_exp_V_1_fu_234_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_exp_V_1_reg_753 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_mant_V_1_fu_244_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal new_mant_V_1_reg_758 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_1_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_763 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_exp_V_fu_282_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_exp_V_reg_768 : STD_LOGIC_VECTOR (10 downto 0);
    signal xf_V_8_fu_432_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal xf_V_8_reg_773 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_13_fu_472_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_reg_782 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_10_fu_442_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_817 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_554_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_24_reg_825 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_558_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_833 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_3_fu_613_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_Result_5_fu_742_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Repl2_1_reg_188 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_3_reg_199 : STD_LOGIC_VECTOR (55 downto 0);
    signal i_i_i_reg_211 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i_i_i_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_252_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_cast_cast_fu_268_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_300_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_demorgan_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp4_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_fu_316_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_1_fu_322_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_2_fu_346_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sel_tmp6_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_3_fu_354_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_4_fu_374_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_cast_fu_386_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal r_V_1_fu_390_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal xf_V_fu_248_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_9_fu_382_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_1_cast_fu_396_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_2_fu_400_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal xf_V_7_fu_406_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Result_s_fu_414_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal xf_V_5_fu_424_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_12_fu_450_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_i_i_fu_454_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_i_i_cast_fu_462_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_i_i_cast_fu_438_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Lo_assign_fu_466_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_482_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_486_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_17_fu_495_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_19_fu_508_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_18_fu_501_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_20_fu_516_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_21_fu_520_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal d_chunk_V_fu_526_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_2_fu_530_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_573_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_mant_V_fu_564_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Repl2_2_fu_586_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Repl2_s_fu_593_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_6_fu_600_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_4_fu_623_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_25_fu_637_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_26_fu_642_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_27_fu_647_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_29_fu_659_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_28_fu_653_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_30_fu_665_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal loc_V_fu_633_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_31_fu_671_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_34_fu_683_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_35_fu_689_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_32_fu_675_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_33_fu_679_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_37_fu_706_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_38_fu_712_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_demorgan_fu_718_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_39_fu_724_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_36_fu_699_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_40_fu_730_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_41_fu_736_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component operator_double_dbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component operator_double_dcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component operator_double_ddEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component operator_double_deOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component operator_double_dfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component operator_double_dg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    r0_U : component operator_double_dbkb
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => r0_address0,
        ce0 => r0_ce0,
        q0 => r0_q0);

    r1_U : component operator_double_dcud
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => r1_address0,
        ce0 => r1_ce0,
        q0 => r1_q0);

    r2_U : component operator_double_ddEe
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => r2_address0,
        ce0 => r2_ce0,
        q0 => r2_q0);

    q0_U : component operator_double_deOg
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => q0_address0,
        ce0 => q0_ce0,
        q0 => q0_q0);

    q1_U : component operator_double_dfYi
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => q1_address0,
        ce0 => q1_ce0,
        q0 => q1_q0);

    q2_U : component operator_double_dg8j
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => q2_address0,
        ce0 => q2_ce0,
        q0 => q2_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_i_i_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_i_i_reg_211 <= i_reg_833;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_i_i_reg_211 <= ap_const_lv6_11;
            end if; 
        end if;
    end process;

    p_Repl2_1_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_Repl2_1_reg_188 <= p_Result_3_fu_613_p4;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Repl2_1_reg_188 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_fu_442_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_833 <= i_fu_558_p2;
                tmp_13_reg_782 <= tmp_13_fu_472_p1;
                tmp_23_reg_817 <= tmp_23_fu_548_p2;
                tmp_24_reg_825 <= tmp_24_fu_554_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                new_exp_V_1_reg_753 <= p_Val2_s_fu_222_p1(62 downto 52);
                new_exp_V_reg_768 <= new_exp_V_fu_282_p2;
                new_mant_V_1_reg_758 <= new_mant_V_1_fu_244_p1;
                p_Repl2_3_reg_748 <= p_Val2_s_fu_222_p1(63 downto 63);
                tmp_1_reg_763 <= tmp_1_fu_276_p2;
                xf_V_8_reg_773 <= xf_V_8_fu_432_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p_Val2_3_reg_199 <= p_Result_5_fu_742_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_10_fu_442_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_10_fu_442_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    Lo_assign_fu_466_p2 <= std_logic_vector(unsigned(p_shl_i_i_cast_fu_462_p1) - unsigned(i_i_i_cast_fu_438_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_10_fu_442_p3)
    begin
        if (((tmp_10_fu_442_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_10_fu_442_p3)
    begin
        if (((tmp_10_fu_442_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_6_fu_600_p4;
    d_chunk_V_fu_526_p1 <= tmp_21_fu_520_p2(3 - 1 downto 0);
    i_fu_558_p2 <= std_logic_vector(signed(ap_const_lv6_3F) + signed(i_i_i_reg_211));
        i_i_i_cast_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_i_i_reg_211),8));

    icmp4_fu_310_p2 <= "1" when (tmp_7_fu_300_p4 = ap_const_lv10_0) else "0";
    icmp_fu_262_p2 <= "1" when (tmp_fu_252_p4 = ap_const_lv2_0) else "0";
    loc_V_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_4_fu_623_p4),56));
    new_exp_V_1_fu_234_p4 <= p_Val2_s_fu_222_p1(62 downto 52);
    new_exp_V_fu_282_p2 <= std_logic_vector(unsigned(new_exp_V_1_fu_234_p4) - unsigned(shift_V_cast_cast_fu_268_p3));
    new_mant_V_1_fu_244_p1 <= p_Val2_s_fu_222_p1(52 - 1 downto 0);
    new_mant_V_fu_564_p1 <= p_Val2_3_reg_199(52 - 1 downto 0);
    p_Repl2_2_fu_586_p3 <= 
        p_s_fu_573_p3 when (tmp_6_fu_581_p2(0) = '1') else 
        new_exp_V_reg_768;
    p_Repl2_s_fu_593_p3 <= 
        new_mant_V_1_reg_758 when (tmp_2_fu_568_p2(0) = '1') else 
        new_mant_V_fu_564_p1;
    p_Result_2_fu_530_p3 <= (p_Repl2_1_reg_188 & d_chunk_V_fu_526_p1);
    p_Result_3_fu_613_p4 <= ((r2_q0 & r1_q0) & r0_q0);
    p_Result_4_fu_623_p4 <= ((q2_q0 & q1_q0) & q0_q0);
    p_Result_5_fu_742_p2 <= (tmp_41_fu_736_p2 or tmp_40_fu_730_p2);
    p_Result_6_fu_600_p4 <= ((p_Repl2_3_reg_748 & p_Repl2_2_fu_586_p3) & p_Repl2_s_fu_593_p3);
    
    p_Result_s_fu_414_p4_proc : process(xf_V_7_fu_406_p3)
    begin
        p_Result_s_fu_414_p4 <= xf_V_7_fu_406_p3;
        p_Result_s_fu_414_p4(52) <= ap_const_lv1_1(0);
    end process;

    p_Val2_s_fu_222_p1 <= in_r;
    p_demorgan_fu_718_p2 <= (tmp_38_fu_712_p2 and tmp_37_fu_706_p2);
    p_s_fu_573_p3 <= 
        ap_const_lv11_7FF when (tmp_2_fu_568_p2(0) = '1') else 
        ap_const_lv11_0;
    p_shl_i_i_cast_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_i_fu_454_p3),8));
    p_shl_i_i_fu_454_p3 <= (tmp_12_fu_450_p1 & ap_const_lv2_0);
    q0_address0 <= tmp_i_i_i_fu_538_p1(6 - 1 downto 0);

    q0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            q0_ce0 <= ap_const_logic_1;
        else 
            q0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q1_address0 <= tmp_i_i_i_fu_538_p1(6 - 1 downto 0);

    q1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            q1_ce0 <= ap_const_logic_1;
        else 
            q1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q2_address0 <= tmp_i_i_i_fu_538_p1(6 - 1 downto 0);

    q2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            q2_ce0 <= ap_const_logic_1;
        else 
            q2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r0_address0 <= tmp_i_i_i_fu_538_p1(6 - 1 downto 0);

    r0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            r0_ce0 <= ap_const_logic_1;
        else 
            r0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r1_address0 <= tmp_i_i_i_fu_538_p1(6 - 1 downto 0);

    r1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            r1_ce0 <= ap_const_logic_1;
        else 
            r1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r2_address0 <= tmp_i_i_i_fu_538_p1(6 - 1 downto 0);

    r2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            r2_ce0 <= ap_const_logic_1;
        else 
            r2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_1_cast_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_1_fu_390_p2),56));
    r_V_1_fu_390_p2 <= std_logic_vector(shift_right(unsigned(new_mant_V_1_fu_244_p1),to_integer(unsigned('0' & tmp_9_cast_fu_386_p1(31-1 downto 0)))));
    r_V_2_fu_400_p2 <= std_logic_vector(shift_left(unsigned(xf_V_fu_248_p1),to_integer(unsigned('0' & tmp_9_fu_382_p1(31-1 downto 0)))));
    sel_tmp2_demorgan_fu_328_p2 <= (tmp_4_fu_294_p2 or tmp_3_fu_288_p2);
    sel_tmp2_fu_334_p2 <= (sel_tmp2_demorgan_fu_328_p2 xor ap_const_lv1_1);
    sel_tmp3_fu_340_p2 <= (sel_tmp2_fu_334_p2 and icmp4_fu_310_p2);
    sel_tmp6_fu_362_p2 <= (tmp_3_fu_288_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_368_p2 <= (tmp_4_fu_294_p2 and sel_tmp6_fu_362_p2);
    shift_V_1_fu_322_p2 <= std_logic_vector(signed(ap_const_lv11_7FF) + signed(new_exp_V_1_fu_234_p4));
    shift_V_2_fu_346_p3 <= 
        shift_V_fu_316_p2 when (sel_tmp3_fu_340_p2(0) = '1') else 
        shift_V_1_fu_322_p2;
    shift_V_3_fu_354_p3 <= 
        ap_const_lv11_0 when (tmp_3_fu_288_p2(0) = '1') else 
        shift_V_2_fu_346_p3;
    shift_V_4_fu_374_p3 <= 
        shift_V_cast_cast_fu_268_p3 when (sel_tmp7_fu_368_p2(0) = '1') else 
        shift_V_3_fu_354_p3;
    shift_V_cast_cast_fu_268_p3 <= 
        ap_const_lv11_3 when (icmp_fu_262_p2(0) = '1') else 
        ap_const_lv11_2;
    shift_V_fu_316_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) - unsigned(new_exp_V_1_fu_234_p4));
    tmp_10_fu_442_p3 <= i_i_i_reg_211(5 downto 5);
    tmp_12_fu_450_p1 <= i_i_i_reg_211(5 - 1 downto 0);
    tmp_13_fu_472_p1 <= Lo_assign_fu_466_p2(6 - 1 downto 0);
    tmp_14_fu_476_p2 <= "1" when (unsigned(Lo_assign_fu_466_p2) > unsigned(ap_const_lv8_FD)) else "0";
    tmp_15_fu_482_p1 <= Lo_assign_fu_466_p2(6 - 1 downto 0);
    
    tmp_16_fu_486_p4_proc : process(xf_V_8_reg_773)
    variable vlo_cpy : STD_LOGIC_VECTOR(56+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(56+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(56 - 1 downto 0);
    variable tmp_16_fu_486_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(56 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(56 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(56 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_37(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := xf_V_8_reg_773;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(56-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(56-1-unsigned(ap_const_lv32_37(6-1 downto 0)));
            for tmp_16_fu_486_p4_i in 0 to 56-1 loop
                v0_cpy(tmp_16_fu_486_p4_i) := xf_V_8_reg_773(56-1-tmp_16_fu_486_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(56-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_16_fu_486_p4 <= resvalue(56-1 downto 0);
    end process;

    tmp_17_fu_495_p2 <= std_logic_vector(signed(ap_const_lv6_37) - signed(tmp_15_fu_482_p1));
    tmp_18_fu_501_p3 <= 
        tmp_16_fu_486_p4 when (tmp_14_fu_476_p2(0) = '1') else 
        xf_V_8_reg_773;
    tmp_19_fu_508_p3 <= 
        tmp_17_fu_495_p2 when (tmp_14_fu_476_p2(0) = '1') else 
        tmp_15_fu_482_p1;
    tmp_1_fu_276_p2 <= "1" when (unsigned(shift_V_cast_cast_fu_268_p3) > unsigned(new_exp_V_1_fu_234_p4)) else "0";
    tmp_20_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_508_p3),56));
    tmp_21_fu_520_p2 <= std_logic_vector(shift_right(unsigned(tmp_18_fu_501_p3),to_integer(unsigned('0' & tmp_20_fu_516_p1(31-1 downto 0)))));
    tmp_23_fu_548_p2 <= "1" when (unsigned(Lo_assign_fu_466_p2) > unsigned(ap_const_lv8_FD)) else "0";
    tmp_24_fu_554_p1 <= Lo_assign_fu_466_p2(6 - 1 downto 0);
    tmp_25_fu_637_p2 <= std_logic_vector(unsigned(ap_const_lv6_2) + unsigned(tmp_13_reg_782));
    tmp_26_fu_642_p2 <= std_logic_vector(signed(ap_const_lv6_37) - signed(tmp_24_reg_825));
    tmp_27_fu_647_p3 <= 
        tmp_24_reg_825 when (tmp_23_reg_817(0) = '1') else 
        tmp_25_fu_637_p2;
    tmp_28_fu_653_p3 <= 
        tmp_25_fu_637_p2 when (tmp_23_reg_817(0) = '1') else 
        tmp_24_reg_825;
    tmp_29_fu_659_p3 <= 
        tmp_26_fu_642_p2 when (tmp_23_reg_817(0) = '1') else 
        tmp_24_reg_825;
    tmp_2_fu_568_p2 <= "1" when (new_exp_V_1_reg_753 = ap_const_lv11_7FF) else "0";
    tmp_30_fu_665_p2 <= std_logic_vector(signed(ap_const_lv6_37) - signed(tmp_27_fu_647_p3));
    tmp_31_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_659_p3),56));
    tmp_32_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_653_p3),56));
    tmp_33_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_665_p2),56));
    tmp_34_fu_683_p2 <= std_logic_vector(shift_left(unsigned(loc_V_fu_633_p1),to_integer(unsigned('0' & tmp_31_fu_671_p1(31-1 downto 0)))));
    
    tmp_35_fu_689_p4_proc : process(tmp_34_fu_683_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(56+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(56+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(56 - 1 downto 0);
    variable tmp_35_fu_689_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(56 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(56 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(56 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_37(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_34_fu_683_p2;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(56-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(56-1-unsigned(ap_const_lv32_37(6-1 downto 0)));
            for tmp_35_fu_689_p4_i in 0 to 56-1 loop
                v0_cpy(tmp_35_fu_689_p4_i) := tmp_34_fu_683_p2(56-1-tmp_35_fu_689_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(56-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_35_fu_689_p4 <= resvalue(56-1 downto 0);
    end process;

    tmp_36_fu_699_p3 <= 
        tmp_35_fu_689_p4 when (tmp_23_reg_817(0) = '1') else 
        tmp_34_fu_683_p2;
    tmp_37_fu_706_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv56_FFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_32_fu_675_p1(31-1 downto 0)))));
    tmp_38_fu_712_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv56_FFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_33_fu_679_p1(31-1 downto 0)))));
    tmp_39_fu_724_p2 <= (p_demorgan_fu_718_p2 xor ap_const_lv56_FFFFFFFFFFFFFF);
    tmp_3_fu_288_p2 <= "1" when (new_exp_V_1_fu_234_p4 = ap_const_lv11_0) else "0";
    tmp_40_fu_730_p2 <= (tmp_39_fu_724_p2 and p_Val2_3_reg_199);
    tmp_41_fu_736_p2 <= (tmp_36_fu_699_p3 and p_demorgan_fu_718_p2);
    tmp_4_fu_294_p2 <= "1" when (unsigned(shift_V_cast_cast_fu_268_p3) < unsigned(new_exp_V_1_fu_234_p4)) else "0";
    tmp_6_fu_581_p2 <= (tmp_2_fu_568_p2 or tmp_1_reg_763);
    tmp_7_fu_300_p4 <= p_Val2_s_fu_222_p1(62 downto 53);
    tmp_9_cast_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_V_4_fu_374_p3),52));
    tmp_9_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_V_4_fu_374_p3),56));
    tmp_fu_252_p4 <= p_Val2_s_fu_222_p1(51 downto 50);
    tmp_i_i_i_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_2_fu_530_p3),64));
    xf_V_5_fu_424_p3 <= 
        xf_V_7_fu_406_p3 when (tmp_3_fu_288_p2(0) = '1') else 
        p_Result_s_fu_414_p4;
    xf_V_7_fu_406_p3 <= 
        r_V_1_cast_fu_396_p1 when (icmp4_fu_310_p2(0) = '1') else 
        r_V_2_fu_400_p2;
    xf_V_8_fu_432_p2 <= std_logic_vector(unsigned(ap_const_lv56_2) + unsigned(xf_V_5_fu_424_p3));
    xf_V_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_mant_V_1_fu_244_p1),56));
end behav;
