// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "int_56_div5.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic int_56_div5::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic int_56_div5::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> int_56_div5::ap_ST_fsm_state1 = "1";
const sc_lv<4> int_56_div5::ap_ST_fsm_state2 = "10";
const sc_lv<4> int_56_div5::ap_ST_fsm_state3 = "100";
const sc_lv<4> int_56_div5::ap_ST_fsm_state4 = "1000";
const sc_lv<32> int_56_div5::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> int_56_div5::ap_const_lv32_1 = "1";
const sc_lv<32> int_56_div5::ap_const_lv32_2 = "10";
const sc_lv<32> int_56_div5::ap_const_lv32_36 = "110110";
const sc_lv<32> int_56_div5::ap_const_lv32_37 = "110111";
const sc_lv<3> int_56_div5::ap_const_lv3_0 = "000";
const sc_lv<32> int_56_div5::ap_const_lv32_33 = "110011";
const sc_lv<32> int_56_div5::ap_const_lv32_35 = "110101";
const sc_lv<32> int_56_div5::ap_const_lv32_30 = "110000";
const sc_lv<32> int_56_div5::ap_const_lv32_32 = "110010";
const sc_lv<32> int_56_div5::ap_const_lv32_3 = "11";
const sc_lv<56> int_56_div5::ap_const_lv56_0 = "00000000000000000000000000000000000000000000000000000000";
const bool int_56_div5::ap_const_boolean_1 = true;

int_56_div5::int_56_div5(sc_module_name name) : sc_module(name), mVcdFile(0) {
    r0_U = new int_56_div5_r0("r0_U");
    r0_U->clk(ap_clk);
    r0_U->reset(ap_rst);
    r0_U->address0(r0_address0);
    r0_U->ce0(r0_ce0);
    r0_U->q0(r0_q0);
    r1_U = new int_56_div5_r1("r1_U");
    r1_U->clk(ap_clk);
    r1_U->reset(ap_rst);
    r1_U->address0(r1_address0);
    r1_U->ce0(r1_ce0);
    r1_U->q0(r1_q0);
    r2_U = new int_56_div5_r2("r2_U");
    r2_U->clk(ap_clk);
    r2_U->reset(ap_rst);
    r2_U->address0(r2_address0);
    r2_U->ce0(r2_ce0);
    r2_U->q0(r2_q0);
    q0_U = new int_56_div5_q0("q0_U");
    q0_U->clk(ap_clk);
    q0_U->reset(ap_rst);
    q0_U->address0(q0_address0);
    q0_U->ce0(q0_ce0);
    q0_U->q0(q0_q0);
    q1_U = new int_56_div5_q1("q1_U");
    q1_U->clk(ap_clk);
    q1_U->reset(ap_rst);
    q1_U->address0(q1_address0);
    q1_U->ce0(q1_ce0);
    q1_U->q0(q1_q0);
    q2_U = new int_56_div5_q2("q2_U");
    q2_U->clk(ap_clk);
    q2_U->reset(ap_rst);
    q2_U->address0(q2_address0);
    q2_U->ce0(q2_ce0);
    q2_U->q0(q2_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_fu_300_p9 );

    SC_METHOD(thread_d_chunk_V_fu_220_p1);
    sensitive << ( p_Result_s_fu_210_p4 );

    SC_METHOD(thread_p_Result_1_fu_261_p5);
    sensitive << ( r0_q0 );
    sensitive << ( r1_q0 );
    sensitive << ( r2_q0 );
    sensitive << ( d_chunk_V_1_reg_352 );

    SC_METHOD(thread_p_Result_2_fu_282_p5);
    sensitive << ( r0_q0 );
    sensitive << ( r1_q0 );
    sensitive << ( r2_q0 );
    sensitive << ( d_chunk_V_2_reg_357 );

    SC_METHOD(thread_p_Result_s_7_fu_224_p3);
    sensitive << ( d_chunk_V_fu_220_p1 );

    SC_METHOD(thread_p_Result_s_fu_210_p4);
    sensitive << ( in_V );

    SC_METHOD(thread_q0_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_i_fu_232_p1 );
    sensitive << ( tmp_i1_fu_272_p1 );
    sensitive << ( tmp_i2_fu_293_p1 );

    SC_METHOD(thread_q0_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_q1_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_i_fu_232_p1 );
    sensitive << ( tmp_i1_fu_272_p1 );
    sensitive << ( tmp_i2_fu_293_p1 );

    SC_METHOD(thread_q1_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_q2_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_i1_fu_272_p1 );
    sensitive << ( tmp_i2_fu_293_p1 );

    SC_METHOD(thread_q2_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_r0_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_fu_232_p1 );
    sensitive << ( tmp_i1_fu_272_p1 );

    SC_METHOD(thread_r0_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_r1_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_fu_232_p1 );
    sensitive << ( tmp_i1_fu_272_p1 );

    SC_METHOD(thread_r1_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_r2_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_fu_232_p1 );
    sensitive << ( tmp_i1_fu_272_p1 );

    SC_METHOD(thread_r2_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_fu_300_p9);
    sensitive << ( q0_q0 );
    sensitive << ( q1_q0 );
    sensitive << ( q2_q0 );
    sensitive << ( q0_load_reg_362 );
    sensitive << ( q1_load_reg_367 );
    sensitive << ( q0_load_1_reg_402 );
    sensitive << ( q1_load_1_reg_407 );
    sensitive << ( q2_load_reg_412 );

    SC_METHOD(thread_tmp_i1_fu_272_p1);
    sensitive << ( p_Result_1_fu_261_p5 );

    SC_METHOD(thread_tmp_i2_fu_293_p1);
    sensitive << ( p_Result_2_fu_282_p5 );

    SC_METHOD(thread_tmp_i_fu_232_p1);
    sensitive << ( p_Result_s_7_fu_224_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "int_56_div5_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_V, "(port)in_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, r0_address0, "r0_address0");
    sc_trace(mVcdFile, r0_ce0, "r0_ce0");
    sc_trace(mVcdFile, r0_q0, "r0_q0");
    sc_trace(mVcdFile, r1_address0, "r1_address0");
    sc_trace(mVcdFile, r1_ce0, "r1_ce0");
    sc_trace(mVcdFile, r1_q0, "r1_q0");
    sc_trace(mVcdFile, r2_address0, "r2_address0");
    sc_trace(mVcdFile, r2_ce0, "r2_ce0");
    sc_trace(mVcdFile, r2_q0, "r2_q0");
    sc_trace(mVcdFile, q0_address0, "q0_address0");
    sc_trace(mVcdFile, q0_ce0, "q0_ce0");
    sc_trace(mVcdFile, q0_q0, "q0_q0");
    sc_trace(mVcdFile, q1_address0, "q1_address0");
    sc_trace(mVcdFile, q1_ce0, "q1_ce0");
    sc_trace(mVcdFile, q1_q0, "q1_q0");
    sc_trace(mVcdFile, q2_address0, "q2_address0");
    sc_trace(mVcdFile, q2_ce0, "q2_ce0");
    sc_trace(mVcdFile, q2_q0, "q2_q0");
    sc_trace(mVcdFile, d_chunk_V_1_reg_352, "d_chunk_V_1_reg_352");
    sc_trace(mVcdFile, d_chunk_V_2_reg_357, "d_chunk_V_2_reg_357");
    sc_trace(mVcdFile, q0_load_reg_362, "q0_load_reg_362");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, q1_load_reg_367, "q1_load_reg_367");
    sc_trace(mVcdFile, q0_load_1_reg_402, "q0_load_1_reg_402");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, q1_load_1_reg_407, "q1_load_1_reg_407");
    sc_trace(mVcdFile, q2_load_reg_412, "q2_load_reg_412");
    sc_trace(mVcdFile, tmp_i_fu_232_p1, "tmp_i_fu_232_p1");
    sc_trace(mVcdFile, tmp_i1_fu_272_p1, "tmp_i1_fu_272_p1");
    sc_trace(mVcdFile, tmp_i2_fu_293_p1, "tmp_i2_fu_293_p1");
    sc_trace(mVcdFile, p_Result_s_fu_210_p4, "p_Result_s_fu_210_p4");
    sc_trace(mVcdFile, d_chunk_V_fu_220_p1, "d_chunk_V_fu_220_p1");
    sc_trace(mVcdFile, p_Result_s_7_fu_224_p3, "p_Result_s_7_fu_224_p3");
    sc_trace(mVcdFile, p_Result_1_fu_261_p5, "p_Result_1_fu_261_p5");
    sc_trace(mVcdFile, p_Result_2_fu_282_p5, "p_Result_2_fu_282_p5");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_fu_300_p9, "tmp_fu_300_p9");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("int_56_div5.hdltvin.dat");
    mHdltvoutHandle.open("int_56_div5.hdltvout.dat");
}

int_56_div5::~int_56_div5() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete r0_U;
    delete r1_U;
    delete r2_U;
    delete q0_U;
    delete q1_U;
    delete q2_U;
}

void int_56_div5::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        d_chunk_V_1_reg_352 = in_V.read().range(53, 51);
        d_chunk_V_2_reg_357 = in_V.read().range(50, 48);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        q0_load_1_reg_402 = q0_q0.read();
        q1_load_1_reg_407 = q1_q0.read();
        q2_load_reg_412 = q2_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        q0_load_reg_362 = q0_q0.read();
        q1_load_reg_367 = q1_q0.read();
    }
}

void int_56_div5::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void int_56_div5::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void int_56_div5::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void int_56_div5::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void int_56_div5::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void int_56_div5::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void int_56_div5::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void int_56_div5::thread_ap_return() {
    ap_return = esl_partset<56,56,8,32,32>(ap_const_lv56_0, tmp_fu_300_p9.read(), ap_const_lv32_30, ap_const_lv32_37);
}

void int_56_div5::thread_d_chunk_V_fu_220_p1() {
    d_chunk_V_fu_220_p1 = esl_zext<3,2>(p_Result_s_fu_210_p4.read());
}

void int_56_div5::thread_p_Result_1_fu_261_p5() {
    p_Result_1_fu_261_p5 = esl_concat<3,3>(esl_concat<2,1>(esl_concat<1,1>(r2_q0.read(), r1_q0.read()), r0_q0.read()), d_chunk_V_1_reg_352.read());
}

void int_56_div5::thread_p_Result_2_fu_282_p5() {
    p_Result_2_fu_282_p5 = esl_concat<3,3>(esl_concat<2,1>(esl_concat<1,1>(r2_q0.read(), r1_q0.read()), r0_q0.read()), d_chunk_V_2_reg_357.read());
}

void int_56_div5::thread_p_Result_s_7_fu_224_p3() {
    p_Result_s_7_fu_224_p3 = esl_concat<3,3>(ap_const_lv3_0, d_chunk_V_fu_220_p1.read());
}

void int_56_div5::thread_p_Result_s_fu_210_p4() {
    p_Result_s_fu_210_p4 = in_V.read().range(55, 54);
}

void int_56_div5::thread_q0_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        q0_address0 =  (sc_lv<6>) (tmp_i2_fu_293_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        q0_address0 =  (sc_lv<6>) (tmp_i1_fu_272_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        q0_address0 =  (sc_lv<6>) (tmp_i_fu_232_p1.read());
    } else {
        q0_address0 = "XXXXXX";
    }
}

void int_56_div5::thread_q0_ce0() {
    if (((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        q0_ce0 = ap_const_logic_1;
    } else {
        q0_ce0 = ap_const_logic_0;
    }
}

void int_56_div5::thread_q1_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        q1_address0 =  (sc_lv<6>) (tmp_i2_fu_293_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        q1_address0 =  (sc_lv<6>) (tmp_i1_fu_272_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        q1_address0 =  (sc_lv<6>) (tmp_i_fu_232_p1.read());
    } else {
        q1_address0 = "XXXXXX";
    }
}

void int_56_div5::thread_q1_ce0() {
    if (((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        q1_ce0 = ap_const_logic_1;
    } else {
        q1_ce0 = ap_const_logic_0;
    }
}

void int_56_div5::thread_q2_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        q2_address0 =  (sc_lv<6>) (tmp_i2_fu_293_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        q2_address0 =  (sc_lv<6>) (tmp_i1_fu_272_p1.read());
    } else {
        q2_address0 = "XXXXXX";
    }
}

void int_56_div5::thread_q2_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        q2_ce0 = ap_const_logic_1;
    } else {
        q2_ce0 = ap_const_logic_0;
    }
}

void int_56_div5::thread_r0_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        r0_address0 =  (sc_lv<6>) (tmp_i1_fu_272_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        r0_address0 =  (sc_lv<6>) (tmp_i_fu_232_p1.read());
    } else {
        r0_address0 = "XXXXXX";
    }
}

void int_56_div5::thread_r0_ce0() {
    if (((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        r0_ce0 = ap_const_logic_1;
    } else {
        r0_ce0 = ap_const_logic_0;
    }
}

void int_56_div5::thread_r1_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        r1_address0 =  (sc_lv<6>) (tmp_i1_fu_272_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        r1_address0 =  (sc_lv<6>) (tmp_i_fu_232_p1.read());
    } else {
        r1_address0 = "XXXXXX";
    }
}

void int_56_div5::thread_r1_ce0() {
    if (((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        r1_ce0 = ap_const_logic_1;
    } else {
        r1_ce0 = ap_const_logic_0;
    }
}

void int_56_div5::thread_r2_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        r2_address0 =  (sc_lv<6>) (tmp_i1_fu_272_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        r2_address0 =  (sc_lv<6>) (tmp_i_fu_232_p1.read());
    } else {
        r2_address0 = "XXXXXX";
    }
}

void int_56_div5::thread_r2_ce0() {
    if (((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        r2_ce0 = ap_const_logic_1;
    } else {
        r2_ce0 = ap_const_logic_0;
    }
}

void int_56_div5::thread_tmp_fu_300_p9() {
    tmp_fu_300_p9 = esl_concat<7,1>(esl_concat<6,1>(esl_concat<5,1>(esl_concat<4,1>(esl_concat<3,1>(esl_concat<2,1>(esl_concat<1,1>(q1_load_reg_367.read(), q0_load_reg_362.read()), q2_load_reg_412.read()), q1_load_1_reg_407.read()), q0_load_1_reg_402.read()), q2_q0.read()), q1_q0.read()), q0_q0.read());
}

void int_56_div5::thread_tmp_i1_fu_272_p1() {
    tmp_i1_fu_272_p1 = esl_zext<64,6>(p_Result_1_fu_261_p5.read());
}

void int_56_div5::thread_tmp_i2_fu_293_p1() {
    tmp_i2_fu_293_p1 = esl_zext<64,6>(p_Result_2_fu_282_p5.read());
}

void int_56_div5::thread_tmp_i_fu_232_p1() {
    tmp_i_fu_232_p1 = esl_zext<64,6>(p_Result_s_7_fu_224_p3.read());
}

void int_56_div5::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

void int_56_div5::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_V\" :  \"" << in_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

