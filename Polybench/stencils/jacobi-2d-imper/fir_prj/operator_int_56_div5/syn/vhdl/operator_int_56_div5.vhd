-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity operator_int_56_div5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V : IN STD_LOGIC_VECTOR (55 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (55 downto 0) );
end;


architecture behav of operator_int_56_div5 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "operator_int_56_div5,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.348000,HLS_SYN_LAT=37,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=93,HLS_SYN_LUT=1237,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_11 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv6_37 : STD_LOGIC_VECTOR (5 downto 0) := "110111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv56_FFFFFFFFFFFFFF : STD_LOGIC_VECTOR (55 downto 0) := "11111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal r0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r0_ce0 : STD_LOGIC;
    signal r0_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal r1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r1_ce0 : STD_LOGIC;
    signal r1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal r2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r2_ce0 : STD_LOGIC;
    signal r2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal q0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal q0_ce0 : STD_LOGIC;
    signal q0_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal q1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal q1_ce0 : STD_LOGIC;
    signal q1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal q2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal q2_ce0 : STD_LOGIC;
    signal q2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_216_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_reg_452 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_186_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_487 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_298_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_reg_495 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_302_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_503 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_2_fu_308_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_Result_4_fu_437_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Repl2_1_reg_148 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_s_reg_159 : STD_LOGIC_VECTOR (55 downto 0);
    signal i_i_reg_171 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i_i_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_194_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_i_fu_198_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_i_cast_fu_206_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_i_cast1_fu_182_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Lo_assign_fu_210_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_226_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_230_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_6_fu_239_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_252_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_245_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_9_fu_260_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_10_fu_264_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal d_chunk_V_fu_270_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_s_fu_274_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_3_fu_318_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_14_fu_332_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_337_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_fu_342_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_18_fu_354_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_fu_348_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_19_fu_360_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal loc_V_fu_328_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_20_fu_366_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_23_fu_378_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_24_fu_384_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_21_fu_370_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_22_fu_374_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_26_fu_401_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_27_fu_407_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_demorgan_fu_413_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_28_fu_419_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_25_fu_394_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_29_fu_425_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_30_fu_431_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component operator_int_56_dbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component operator_int_56_dcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component operator_int_56_ddEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component operator_int_56_deOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component operator_int_56_dfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component operator_int_56_dg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    r0_U : component operator_int_56_dbkb
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => r0_address0,
        ce0 => r0_ce0,
        q0 => r0_q0);

    r1_U : component operator_int_56_dcud
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => r1_address0,
        ce0 => r1_ce0,
        q0 => r1_q0);

    r2_U : component operator_int_56_ddEe
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => r2_address0,
        ce0 => r2_ce0,
        q0 => r2_q0);

    q0_U : component operator_int_56_deOg
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => q0_address0,
        ce0 => q0_ce0,
        q0 => q0_q0);

    q1_U : component operator_int_56_dfYi
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => q1_address0,
        ce0 => q1_ce0,
        q0 => q1_q0);

    q2_U : component operator_int_56_dg8j
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => q2_address0,
        ce0 => q2_ce0,
        q0 => q2_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_i_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_i_reg_171 <= i_reg_503;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_i_reg_171 <= ap_const_lv6_11;
            end if; 
        end if;
    end process;

    p_Repl2_1_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_Repl2_1_reg_148 <= p_Result_2_fu_308_p4;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Repl2_1_reg_148 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_186_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_503 <= i_fu_302_p2;
                tmp_12_reg_487 <= tmp_12_fu_292_p2;
                tmp_13_reg_495 <= tmp_13_fu_298_p1;
                tmp_2_reg_452 <= tmp_2_fu_216_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p_Val2_s_reg_159 <= p_Result_4_fu_437_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_186_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_186_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    Lo_assign_fu_210_p2 <= std_logic_vector(unsigned(p_shl_i_cast_fu_206_p1) - unsigned(i_i_cast1_fu_182_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_fu_186_p3)
    begin
        if (((tmp_fu_186_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_186_p3)
    begin
        if (((tmp_fu_186_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Val2_s_reg_159;
    d_chunk_V_fu_270_p1 <= tmp_10_fu_264_p2(3 - 1 downto 0);
    i_fu_302_p2 <= std_logic_vector(signed(ap_const_lv6_3F) + signed(i_i_reg_171));
        i_i_cast1_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_i_reg_171),8));

    loc_V_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_3_fu_318_p4),56));
    p_Result_2_fu_308_p4 <= ((r2_q0 & r1_q0) & r0_q0);
    p_Result_3_fu_318_p4 <= ((q2_q0 & q1_q0) & q0_q0);
    p_Result_4_fu_437_p2 <= (tmp_30_fu_431_p2 or tmp_29_fu_425_p2);
    p_Result_s_fu_274_p3 <= (p_Repl2_1_reg_148 & d_chunk_V_fu_270_p1);
    p_demorgan_fu_413_p2 <= (tmp_27_fu_407_p2 and tmp_26_fu_401_p2);
    p_shl_i_cast_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_fu_198_p3),8));
    p_shl_i_fu_198_p3 <= (tmp_1_fu_194_p1 & ap_const_lv2_0);
    q0_address0 <= tmp_i_i_fu_282_p1(6 - 1 downto 0);

    q0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            q0_ce0 <= ap_const_logic_1;
        else 
            q0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q1_address0 <= tmp_i_i_fu_282_p1(6 - 1 downto 0);

    q1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            q1_ce0 <= ap_const_logic_1;
        else 
            q1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q2_address0 <= tmp_i_i_fu_282_p1(6 - 1 downto 0);

    q2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            q2_ce0 <= ap_const_logic_1;
        else 
            q2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r0_address0 <= tmp_i_i_fu_282_p1(6 - 1 downto 0);

    r0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            r0_ce0 <= ap_const_logic_1;
        else 
            r0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r1_address0 <= tmp_i_i_fu_282_p1(6 - 1 downto 0);

    r1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            r1_ce0 <= ap_const_logic_1;
        else 
            r1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r2_address0 <= tmp_i_i_fu_282_p1(6 - 1 downto 0);

    r2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            r2_ce0 <= ap_const_logic_1;
        else 
            r2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_264_p2 <= std_logic_vector(shift_right(unsigned(tmp_7_fu_245_p3),to_integer(unsigned('0' & tmp_9_fu_260_p1(31-1 downto 0)))));
    tmp_12_fu_292_p2 <= "1" when (unsigned(Lo_assign_fu_210_p2) > unsigned(ap_const_lv8_FD)) else "0";
    tmp_13_fu_298_p1 <= Lo_assign_fu_210_p2(6 - 1 downto 0);
    tmp_14_fu_332_p2 <= std_logic_vector(unsigned(ap_const_lv6_2) + unsigned(tmp_2_reg_452));
    tmp_15_fu_337_p2 <= std_logic_vector(signed(ap_const_lv6_37) - signed(tmp_13_reg_495));
    tmp_16_fu_342_p3 <= 
        tmp_13_reg_495 when (tmp_12_reg_487(0) = '1') else 
        tmp_14_fu_332_p2;
    tmp_17_fu_348_p3 <= 
        tmp_14_fu_332_p2 when (tmp_12_reg_487(0) = '1') else 
        tmp_13_reg_495;
    tmp_18_fu_354_p3 <= 
        tmp_15_fu_337_p2 when (tmp_12_reg_487(0) = '1') else 
        tmp_13_reg_495;
    tmp_19_fu_360_p2 <= std_logic_vector(signed(ap_const_lv6_37) - signed(tmp_16_fu_342_p3));
    tmp_1_fu_194_p1 <= i_i_reg_171(5 - 1 downto 0);
    tmp_20_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_354_p3),56));
    tmp_21_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_348_p3),56));
    tmp_22_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_360_p2),56));
    tmp_23_fu_378_p2 <= std_logic_vector(shift_left(unsigned(loc_V_fu_328_p1),to_integer(unsigned('0' & tmp_20_fu_366_p1(31-1 downto 0)))));
    
    tmp_24_fu_384_p4_proc : process(tmp_23_fu_378_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(56+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(56+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(56 - 1 downto 0);
    variable tmp_24_fu_384_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(56 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(56 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(56 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_37(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_23_fu_378_p2;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(56-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(56-1-unsigned(ap_const_lv32_37(6-1 downto 0)));
            for tmp_24_fu_384_p4_i in 0 to 56-1 loop
                v0_cpy(tmp_24_fu_384_p4_i) := tmp_23_fu_378_p2(56-1-tmp_24_fu_384_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(56-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_24_fu_384_p4 <= resvalue(56-1 downto 0);
    end process;

    tmp_25_fu_394_p3 <= 
        tmp_24_fu_384_p4 when (tmp_12_reg_487(0) = '1') else 
        tmp_23_fu_378_p2;
    tmp_26_fu_401_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv56_FFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_21_fu_370_p1(31-1 downto 0)))));
    tmp_27_fu_407_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv56_FFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_22_fu_374_p1(31-1 downto 0)))));
    tmp_28_fu_419_p2 <= (p_demorgan_fu_413_p2 xor ap_const_lv56_FFFFFFFFFFFFFF);
    tmp_29_fu_425_p2 <= (tmp_28_fu_419_p2 and p_Val2_s_reg_159);
    tmp_2_fu_216_p1 <= Lo_assign_fu_210_p2(6 - 1 downto 0);
    tmp_30_fu_431_p2 <= (tmp_25_fu_394_p3 and p_demorgan_fu_413_p2);
    tmp_3_fu_220_p2 <= "1" when (unsigned(Lo_assign_fu_210_p2) > unsigned(ap_const_lv8_FD)) else "0";
    tmp_4_fu_226_p1 <= Lo_assign_fu_210_p2(6 - 1 downto 0);
    
    tmp_5_fu_230_p4_proc : process(in_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(56+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(56+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(56 - 1 downto 0);
    variable tmp_5_fu_230_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(56 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(56 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(56 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_37(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := in_V;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(56-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(56-1-unsigned(ap_const_lv32_37(6-1 downto 0)));
            for tmp_5_fu_230_p4_i in 0 to 56-1 loop
                v0_cpy(tmp_5_fu_230_p4_i) := in_V(56-1-tmp_5_fu_230_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(56-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_5_fu_230_p4 <= resvalue(56-1 downto 0);
    end process;

    tmp_6_fu_239_p2 <= std_logic_vector(signed(ap_const_lv6_37) - signed(tmp_4_fu_226_p1));
    tmp_7_fu_245_p3 <= 
        tmp_5_fu_230_p4 when (tmp_3_fu_220_p2(0) = '1') else 
        in_V;
    tmp_8_fu_252_p3 <= 
        tmp_6_fu_239_p2 when (tmp_3_fu_220_p2(0) = '1') else 
        tmp_4_fu_226_p1;
    tmp_9_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_252_p3),56));
    tmp_fu_186_p3 <= i_i_reg_171(5 downto 5);
    tmp_i_i_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_274_p3),64));
end behav;
