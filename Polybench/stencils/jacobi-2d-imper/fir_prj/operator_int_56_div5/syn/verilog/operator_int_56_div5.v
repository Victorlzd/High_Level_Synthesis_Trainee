// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="operator_int_56_div5,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.348000,HLS_SYN_LAT=37,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=93,HLS_SYN_LUT=1237,HLS_VERSION=2018_2}" *)

module operator_int_56_div5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [55:0] in_V;
output  [55:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] r0_address0;
reg    r0_ce0;
wire   [0:0] r0_q0;
wire   [5:0] r1_address0;
reg    r1_ce0;
wire   [0:0] r1_q0;
wire   [5:0] r2_address0;
reg    r2_ce0;
wire   [0:0] r2_q0;
wire   [5:0] q0_address0;
reg    q0_ce0;
wire   [0:0] q0_q0;
wire   [5:0] q1_address0;
reg    q1_ce0;
wire   [0:0] q1_q0;
wire   [5:0] q2_address0;
reg    q2_ce0;
wire   [0:0] q2_q0;
wire   [5:0] tmp_2_fu_216_p1;
reg   [5:0] tmp_2_reg_452;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_186_p3;
wire   [0:0] tmp_12_fu_292_p2;
reg   [0:0] tmp_12_reg_487;
wire   [5:0] tmp_13_fu_298_p1;
reg   [5:0] tmp_13_reg_495;
wire   [5:0] i_fu_302_p2;
reg   [5:0] i_reg_503;
wire   [2:0] p_Result_2_fu_308_p4;
wire    ap_CS_fsm_state3;
wire   [55:0] p_Result_4_fu_437_p2;
reg   [2:0] p_Repl2_1_reg_148;
reg   [55:0] p_Val2_s_reg_159;
reg  signed [5:0] i_i_reg_171;
wire   [63:0] tmp_i_i_fu_282_p1;
wire   [4:0] tmp_1_fu_194_p1;
wire   [6:0] p_shl_i_fu_198_p3;
wire   [7:0] p_shl_i_cast_fu_206_p1;
wire  signed [7:0] i_i_cast1_fu_182_p1;
wire   [7:0] Lo_assign_fu_210_p2;
wire   [5:0] tmp_4_fu_226_p1;
wire   [0:0] tmp_3_fu_220_p2;
reg   [55:0] tmp_5_fu_230_p4;
wire   [5:0] tmp_6_fu_239_p2;
wire   [5:0] tmp_8_fu_252_p3;
wire   [55:0] tmp_7_fu_245_p3;
wire   [55:0] tmp_9_fu_260_p1;
wire   [55:0] tmp_10_fu_264_p2;
wire   [2:0] d_chunk_V_fu_270_p1;
wire   [5:0] p_Result_s_fu_274_p3;
wire   [2:0] p_Result_3_fu_318_p4;
wire   [5:0] tmp_14_fu_332_p2;
wire   [5:0] tmp_15_fu_337_p2;
wire   [5:0] tmp_16_fu_342_p3;
wire   [5:0] tmp_18_fu_354_p3;
wire   [5:0] tmp_17_fu_348_p3;
wire   [5:0] tmp_19_fu_360_p2;
wire   [55:0] loc_V_fu_328_p1;
wire   [55:0] tmp_20_fu_366_p1;
wire   [55:0] tmp_23_fu_378_p2;
reg   [55:0] tmp_24_fu_384_p4;
wire   [55:0] tmp_21_fu_370_p1;
wire   [55:0] tmp_22_fu_374_p1;
wire   [55:0] tmp_26_fu_401_p2;
wire   [55:0] tmp_27_fu_407_p2;
wire   [55:0] p_demorgan_fu_413_p2;
wire   [55:0] tmp_28_fu_419_p2;
wire   [55:0] tmp_25_fu_394_p3;
wire   [55:0] tmp_29_fu_425_p2;
wire   [55:0] tmp_30_fu_431_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

operator_int_56_dbkb #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
r0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(r0_address0),
    .ce0(r0_ce0),
    .q0(r0_q0)
);

operator_int_56_dcud #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
r1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(r1_address0),
    .ce0(r1_ce0),
    .q0(r1_q0)
);

operator_int_56_ddEe #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
r2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(r2_address0),
    .ce0(r2_ce0),
    .q0(r2_q0)
);

operator_int_56_deOg #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q0_address0),
    .ce0(q0_ce0),
    .q0(q0_q0)
);

operator_int_56_dfYi #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q1_address0),
    .ce0(q1_ce0),
    .q0(q1_q0)
);

operator_int_56_dg8j #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q2_address0),
    .ce0(q2_ce0),
    .q0(q2_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_i_reg_171 <= i_reg_503;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_reg_171 <= 6'd17;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Repl2_1_reg_148 <= p_Result_2_fu_308_p4;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Repl2_1_reg_148 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_186_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_503 <= i_fu_302_p2;
        tmp_12_reg_487 <= tmp_12_fu_292_p2;
        tmp_13_reg_495 <= tmp_13_fu_298_p1;
        tmp_2_reg_452 <= tmp_2_fu_216_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Val2_s_reg_159 <= p_Result_4_fu_437_p2;
    end
end

always @ (*) begin
    if (((tmp_fu_186_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_186_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        q0_ce0 = 1'b1;
    end else begin
        q0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        q1_ce0 = 1'b1;
    end else begin
        q1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        q2_ce0 = 1'b1;
    end else begin
        q2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r0_ce0 = 1'b1;
    end else begin
        r0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r1_ce0 = 1'b1;
    end else begin
        r1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r2_ce0 = 1'b1;
    end else begin
        r2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_186_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Lo_assign_fu_210_p2 = ($signed(p_shl_i_cast_fu_206_p1) - $signed(i_i_cast1_fu_182_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_return = p_Val2_s_reg_159;

assign d_chunk_V_fu_270_p1 = tmp_10_fu_264_p2[2:0];

assign i_fu_302_p2 = ($signed(6'd63) + $signed(i_i_reg_171));

assign i_i_cast1_fu_182_p1 = i_i_reg_171;

assign loc_V_fu_328_p1 = p_Result_3_fu_318_p4;

assign p_Result_2_fu_308_p4 = {{{r2_q0}, {r1_q0}}, {r0_q0}};

assign p_Result_3_fu_318_p4 = {{{q2_q0}, {q1_q0}}, {q0_q0}};

assign p_Result_4_fu_437_p2 = (tmp_30_fu_431_p2 | tmp_29_fu_425_p2);

assign p_Result_s_fu_274_p3 = {{p_Repl2_1_reg_148}, {d_chunk_V_fu_270_p1}};

assign p_demorgan_fu_413_p2 = (tmp_27_fu_407_p2 & tmp_26_fu_401_p2);

assign p_shl_i_cast_fu_206_p1 = p_shl_i_fu_198_p3;

assign p_shl_i_fu_198_p3 = {{tmp_1_fu_194_p1}, {2'd0}};

assign q0_address0 = tmp_i_i_fu_282_p1;

assign q1_address0 = tmp_i_i_fu_282_p1;

assign q2_address0 = tmp_i_i_fu_282_p1;

assign r0_address0 = tmp_i_i_fu_282_p1;

assign r1_address0 = tmp_i_i_fu_282_p1;

assign r2_address0 = tmp_i_i_fu_282_p1;

assign tmp_10_fu_264_p2 = tmp_7_fu_245_p3 >> tmp_9_fu_260_p1;

assign tmp_12_fu_292_p2 = ((Lo_assign_fu_210_p2 > 8'd253) ? 1'b1 : 1'b0);

assign tmp_13_fu_298_p1 = Lo_assign_fu_210_p2[5:0];

assign tmp_14_fu_332_p2 = (6'd2 + tmp_2_reg_452);

assign tmp_15_fu_337_p2 = ($signed(6'd55) - $signed(tmp_13_reg_495));

assign tmp_16_fu_342_p3 = ((tmp_12_reg_487[0:0] === 1'b1) ? tmp_13_reg_495 : tmp_14_fu_332_p2);

assign tmp_17_fu_348_p3 = ((tmp_12_reg_487[0:0] === 1'b1) ? tmp_14_fu_332_p2 : tmp_13_reg_495);

assign tmp_18_fu_354_p3 = ((tmp_12_reg_487[0:0] === 1'b1) ? tmp_15_fu_337_p2 : tmp_13_reg_495);

assign tmp_19_fu_360_p2 = ($signed(6'd55) - $signed(tmp_16_fu_342_p3));

assign tmp_1_fu_194_p1 = i_i_reg_171[4:0];

assign tmp_20_fu_366_p1 = tmp_18_fu_354_p3;

assign tmp_21_fu_370_p1 = tmp_17_fu_348_p3;

assign tmp_22_fu_374_p1 = tmp_19_fu_360_p2;

assign tmp_23_fu_378_p2 = loc_V_fu_328_p1 << tmp_20_fu_366_p1;

integer ap_tvar_int_0;

always @ (tmp_23_fu_378_p2) begin
    for (ap_tvar_int_0 = 56 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 55 - 0) begin
            tmp_24_fu_384_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_24_fu_384_p4[ap_tvar_int_0] = tmp_23_fu_378_p2[55 - ap_tvar_int_0];
        end
    end
end

assign tmp_25_fu_394_p3 = ((tmp_12_reg_487[0:0] === 1'b1) ? tmp_24_fu_384_p4 : tmp_23_fu_378_p2);

assign tmp_26_fu_401_p2 = 56'd72057594037927935 << tmp_21_fu_370_p1;

assign tmp_27_fu_407_p2 = 56'd72057594037927935 >> tmp_22_fu_374_p1;

assign tmp_28_fu_419_p2 = (p_demorgan_fu_413_p2 ^ 56'd72057594037927935);

assign tmp_29_fu_425_p2 = (tmp_28_fu_419_p2 & p_Val2_s_reg_159);

assign tmp_2_fu_216_p1 = Lo_assign_fu_210_p2[5:0];

assign tmp_30_fu_431_p2 = (tmp_25_fu_394_p3 & p_demorgan_fu_413_p2);

assign tmp_3_fu_220_p2 = ((Lo_assign_fu_210_p2 > 8'd253) ? 1'b1 : 1'b0);

assign tmp_4_fu_226_p1 = Lo_assign_fu_210_p2[5:0];

integer ap_tvar_int_1;

always @ (in_V) begin
    for (ap_tvar_int_1 = 56 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 55 - 0) begin
            tmp_5_fu_230_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_5_fu_230_p4[ap_tvar_int_1] = in_V[55 - ap_tvar_int_1];
        end
    end
end

assign tmp_6_fu_239_p2 = ($signed(6'd55) - $signed(tmp_4_fu_226_p1));

assign tmp_7_fu_245_p3 = ((tmp_3_fu_220_p2[0:0] === 1'b1) ? tmp_5_fu_230_p4 : in_V);

assign tmp_8_fu_252_p3 = ((tmp_3_fu_220_p2[0:0] === 1'b1) ? tmp_6_fu_239_p2 : tmp_4_fu_226_p1);

assign tmp_9_fu_260_p1 = tmp_8_fu_252_p3;

assign tmp_fu_186_p3 = i_i_reg_171[32'd5];

assign tmp_i_i_fu_282_p1 = p_Result_s_fu_274_p3;

endmodule //operator_int_56_div5
