// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="int_div5,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.846000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=66,HLS_SYN_LUT=3406,HLS_VERSION=2018_2}" *)

module int_div5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in_r;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] reg_100;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [2:0] r_V_reg_232;
reg   [2:0] p_Result_s_4_reg_237;
reg   [2:0] p_Result_14_1_reg_242;
reg   [2:0] p_Result_14_2_reg_247;
reg   [2:0] p_Result_14_3_reg_252;
reg   [2:0] p_Result_14_4_reg_257;
reg   [2:0] p_Result_14_5_reg_262;
reg   [2:0] p_Result_14_6_reg_267;
reg   [2:0] p_Result_14_7_reg_272;
reg   [2:0] p_Result_14_8_reg_277;
wire   [2:0] tmp_fu_210_p1;
reg   [2:0] tmp_reg_282;
reg   [2:0] q_chunk_V_ret7_reg_287;
reg   [2:0] q_chunk_V_ret7_1_reg_292;
reg   [2:0] q_chunk_V_ret7_2_reg_297;
reg   [2:0] q_chunk_V_ret7_3_reg_302;
reg   [2:0] q_chunk_V_ret7_4_reg_307;
reg   [2:0] q_chunk_V_ret7_5_reg_312;
reg   [2:0] q_chunk_V_ret7_6_reg_317;
reg   [2:0] q_chunk_V_ret7_7_reg_322;
wire    grp_lut_div5_chunk_fu_70_ap_ready;
reg   [2:0] grp_lut_div5_chunk_fu_70_d_V;
reg   [2:0] grp_lut_div5_chunk_fu_70_r_in_V;
wire   [2:0] grp_lut_div5_chunk_fu_70_ap_return_0;
wire   [2:0] grp_lut_div5_chunk_fu_70_ap_return_1;
wire    grp_lut_div5_chunk_fu_77_ap_ready;
reg   [2:0] grp_lut_div5_chunk_fu_77_d_V;
wire   [2:0] grp_lut_div5_chunk_fu_77_ap_return_0;
wire   [2:0] grp_lut_div5_chunk_fu_77_ap_return_1;
wire   [2:0] d_chunk_V_fu_115_p1;
wire    ap_CS_fsm_state6;
wire   [1:0] p_Result_s_fu_105_p4;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

lut_div5_chunk grp_lut_div5_chunk_fu_70(
    .ap_ready(grp_lut_div5_chunk_fu_70_ap_ready),
    .d_V(grp_lut_div5_chunk_fu_70_d_V),
    .r_in_V(grp_lut_div5_chunk_fu_70_r_in_V),
    .ap_return_0(grp_lut_div5_chunk_fu_70_ap_return_0),
    .ap_return_1(grp_lut_div5_chunk_fu_70_ap_return_1)
);

lut_div5_chunk grp_lut_div5_chunk_fu_77(
    .ap_ready(grp_lut_div5_chunk_fu_77_ap_ready),
    .d_V(grp_lut_div5_chunk_fu_77_d_V),
    .r_in_V(grp_lut_div5_chunk_fu_70_ap_return_1),
    .ap_return_0(grp_lut_div5_chunk_fu_77_ap_return_0),
    .ap_return_1(grp_lut_div5_chunk_fu_77_ap_return_1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_Result_14_1_reg_242 <= {{in_r[26:24]}};
        p_Result_14_2_reg_247 <= {{in_r[23:21]}};
        p_Result_14_3_reg_252 <= {{in_r[20:18]}};
        p_Result_14_4_reg_257 <= {{in_r[17:15]}};
        p_Result_14_5_reg_262 <= {{in_r[14:12]}};
        p_Result_14_6_reg_267 <= {{in_r[11:9]}};
        p_Result_14_7_reg_272 <= {{in_r[8:6]}};
        p_Result_14_8_reg_277 <= {{in_r[5:3]}};
        p_Result_s_4_reg_237 <= {{in_r[29:27]}};
        r_V_reg_232 <= grp_lut_div5_chunk_fu_70_ap_return_1;
        tmp_reg_282 <= tmp_fu_210_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        q_chunk_V_ret7_1_reg_292 <= grp_lut_div5_chunk_fu_77_ap_return_0;
        q_chunk_V_ret7_reg_287 <= grp_lut_div5_chunk_fu_70_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        q_chunk_V_ret7_2_reg_297 <= grp_lut_div5_chunk_fu_70_ap_return_0;
        q_chunk_V_ret7_3_reg_302 <= grp_lut_div5_chunk_fu_77_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        q_chunk_V_ret7_4_reg_307 <= grp_lut_div5_chunk_fu_70_ap_return_0;
        q_chunk_V_ret7_5_reg_312 <= grp_lut_div5_chunk_fu_77_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        q_chunk_V_ret7_6_reg_317 <= grp_lut_div5_chunk_fu_70_ap_return_0;
        q_chunk_V_ret7_7_reg_322 <= grp_lut_div5_chunk_fu_77_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_100 <= grp_lut_div5_chunk_fu_77_ap_return_1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_lut_div5_chunk_fu_70_d_V = p_Result_14_8_reg_277;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_lut_div5_chunk_fu_70_d_V = p_Result_14_6_reg_267;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_lut_div5_chunk_fu_70_d_V = p_Result_14_4_reg_257;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_lut_div5_chunk_fu_70_d_V = p_Result_14_2_reg_247;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_lut_div5_chunk_fu_70_d_V = p_Result_s_4_reg_237;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_lut_div5_chunk_fu_70_d_V = d_chunk_V_fu_115_p1;
    end else begin
        grp_lut_div5_chunk_fu_70_d_V = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_lut_div5_chunk_fu_70_r_in_V = reg_100;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_lut_div5_chunk_fu_70_r_in_V = r_V_reg_232;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_lut_div5_chunk_fu_70_r_in_V = 3'd0;
    end else begin
        grp_lut_div5_chunk_fu_70_r_in_V = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_lut_div5_chunk_fu_77_d_V = tmp_reg_282;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_lut_div5_chunk_fu_77_d_V = p_Result_14_7_reg_272;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_lut_div5_chunk_fu_77_d_V = p_Result_14_5_reg_262;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_lut_div5_chunk_fu_77_d_V = p_Result_14_3_reg_252;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_lut_div5_chunk_fu_77_d_V = p_Result_14_1_reg_242;
    end else begin
        grp_lut_div5_chunk_fu_77_d_V = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = {{{{{{{{{{{{{{{{{{{{2'd0}, {q_chunk_V_ret7_reg_287}}}, {q_chunk_V_ret7_1_reg_292}}}, {q_chunk_V_ret7_2_reg_297}}}, {q_chunk_V_ret7_3_reg_302}}}, {q_chunk_V_ret7_4_reg_307}}}, {q_chunk_V_ret7_5_reg_312}}}, {q_chunk_V_ret7_6_reg_317}}}, {q_chunk_V_ret7_7_reg_322}}}, {grp_lut_div5_chunk_fu_70_ap_return_0}}}, {grp_lut_div5_chunk_fu_77_ap_return_0}};

assign d_chunk_V_fu_115_p1 = p_Result_s_fu_105_p4;

assign p_Result_s_fu_105_p4 = {{in_r[31:30]}};

assign tmp_fu_210_p1 = in_r[2:0];

endmodule //int_div5
