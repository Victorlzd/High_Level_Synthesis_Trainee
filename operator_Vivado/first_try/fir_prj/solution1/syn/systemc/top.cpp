// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "top.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic top::ap_const_logic_1 = sc_dt::Log_1;
const bool top::ap_const_boolean_1 = true;
const sc_lv<14> top::ap_const_lv14_56 = "1010110";
const sc_lv<32> top::ap_const_lv32_8 = "1000";
const sc_logic top::ap_const_logic_0 = sc_dt::Log_0;

top::top(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_start );
    sensitive << ( mul_fu_48_p2 );

    SC_METHOD(thread_mul_fu_48_p0);
    sensitive << ( mul_fu_48_p00 );

    SC_METHOD(thread_mul_fu_48_p00);
    sensitive << ( p_Result_s_fu_36_p3 );

    SC_METHOD(thread_mul_fu_48_p2);
    sensitive << ( mul_fu_48_p0 );

    SC_METHOD(thread_p_Result_s_fu_36_p3);
    sensitive << ( a_V );
    sensitive << ( b_V );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "top_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_V, "(port)a_V");
    sc_trace(mVcdFile, b_V, "(port)b_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, p_Result_s_fu_36_p3, "p_Result_s_fu_36_p3");
    sc_trace(mVcdFile, mul_fu_48_p0, "mul_fu_48_p0");
    sc_trace(mVcdFile, mul_fu_48_p2, "mul_fu_48_p2");
    sc_trace(mVcdFile, mul_fu_48_p00, "mul_fu_48_p00");
#endif

    }
    mHdltvinHandle.open("top.hdltvin.dat");
    mHdltvoutHandle.open("top.hdltvout.dat");
}

top::~top() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void top::thread_ap_done() {
    ap_done = ap_start.read();
}

void top::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void top::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void top::thread_ap_return() {
    ap_return = mul_fu_48_p2.read().range(8, 8);
}

void top::thread_mul_fu_48_p0() {
    mul_fu_48_p0 =  (sc_lv<6>) (mul_fu_48_p00.read());
}

void top::thread_mul_fu_48_p00() {
    mul_fu_48_p00 = esl_zext<14,6>(p_Result_s_fu_36_p3.read());
}

void top::thread_mul_fu_48_p2() {
    mul_fu_48_p2 = (!mul_fu_48_p0.read().is_01() || !ap_const_lv14_56.is_01())? sc_lv<14>(): sc_biguint<6>(mul_fu_48_p0.read()) * sc_biguint<14>(ap_const_lv14_56);
}

void top::thread_p_Result_s_fu_36_p3() {
    p_Result_s_fu_36_p3 = esl_concat<2,4>(b_V.read(), a_V.read());
}

void top::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_V\" :  \"" << a_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_V\" :  \"" << b_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

