// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "float_div3.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic float_div3::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic float_div3::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> float_div3::ap_ST_fsm_state1 = "1";
const sc_lv<2> float_div3::ap_ST_fsm_state2 = "10";
const sc_lv<32> float_div3::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> float_div3::ap_const_lv1_0 = "0";
const sc_lv<32> float_div3::ap_const_lv32_1 = "1";
const sc_lv<1> float_div3::ap_const_lv1_1 = "1";
const sc_lv<32> float_div3::ap_const_lv32_1F = "11111";
const sc_lv<32> float_div3::ap_const_lv32_17 = "10111";
const sc_lv<32> float_div3::ap_const_lv32_1E = "11110";
const sc_lv<32> float_div3::ap_const_lv32_16 = "10110";
const sc_lv<3> float_div3::ap_const_lv3_1 = "1";
const sc_lv<3> float_div3::ap_const_lv3_2 = "10";
const sc_lv<8> float_div3::ap_const_lv8_1 = "1";
const sc_lv<8> float_div3::ap_const_lv8_2 = "10";
const sc_lv<8> float_div3::ap_const_lv8_FF = "11111111";
const sc_lv<8> float_div3::ap_const_lv8_0 = "00000000";
const sc_lv<32> float_div3::ap_const_lv32_19 = "11001";
const sc_lv<3> float_div3::ap_const_lv3_7 = "111";
const sc_lv<3> float_div3::ap_const_lv3_0 = "000";
const sc_lv<65> float_div3::ap_const_lv65_155555556 = "101010101010101010101010101010110";
const sc_lv<32> float_div3::ap_const_lv32_22 = "100010";
const sc_lv<32> float_div3::ap_const_lv32_38 = "111000";
const bool float_div3::ap_const_boolean_1 = true;

float_div3::float_div3(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_p_Repl2_s_phi_fu_69_p4);
    sensitive << ( tmp_1_reg_295 );
    sensitive << ( p_Repl2_s_reg_66 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( mul_fu_256_p2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_Result_s_fu_273_p4 );

    SC_METHOD(thread_decal_subnorm_V_1_ca_fu_191_p2);
    sensitive << ( tmp_8_fu_181_p4 );

    SC_METHOD(thread_decal_subnorm_V_cast_1_fu_121_p3);
    sensitive << ( tmp_fu_105_p3 );

    SC_METHOD(thread_decal_subnorm_V_cast_fu_113_p3);
    sensitive << ( tmp_fu_105_p3 );

    SC_METHOD(thread_decal_subnorm_V_deca_fu_197_p3);
    sensitive << ( tmp_5_fu_175_p2 );
    sensitive << ( decal_subnorm_V_cast_fu_113_p3 );
    sensitive << ( decal_subnorm_V_1_ca_fu_191_p2 );

    SC_METHOD(thread_mul_fu_256_p0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( mul_fu_256_p00 );

    SC_METHOD(thread_mul_fu_256_p00);
    sensitive << ( xf_V_2_reg_304 );

    SC_METHOD(thread_mul_fu_256_p2);
    sensitive << ( mul_fu_256_p0 );

    SC_METHOD(thread_new_exp_V_1_fu_141_p2);
    sensitive << ( new_exp_V_fu_87_p4 );
    sensitive << ( decal_subnorm_V_cast_1_fu_121_p3 );

    SC_METHOD(thread_new_exp_V_fu_87_p4);
    sensitive << ( p_Val2_s_fu_75_p1 );

    SC_METHOD(thread_new_mant_V_fu_97_p1);
    sensitive << ( p_Val2_s_fu_75_p1 );

    SC_METHOD(thread_p_0201_1_cast_fu_213_p1);
    sensitive << ( p_0201_1_fu_205_p3 );

    SC_METHOD(thread_p_0201_1_fu_205_p3);
    sensitive << ( tmp_4_fu_169_p2 );
    sensitive << ( decal_subnorm_V_deca_fu_197_p3 );

    SC_METHOD(thread_p_Repl2_1_fu_161_p3);
    sensitive << ( tmp_6_fu_155_p2 );
    sensitive << ( p_new_exp_V_1_fu_147_p3 );
    sensitive << ( new_exp_V_1_fu_141_p2 );

    SC_METHOD(thread_p_Result_s_fu_273_p4);
    sensitive << ( p_Repl2_2_reg_285 );
    sensitive << ( p_Repl2_1_reg_299 );
    sensitive << ( ap_phi_mux_p_Repl2_s_phi_fu_69_p4 );

    SC_METHOD(thread_p_Val2_s_fu_75_p1);
    sensitive << ( in_r );

    SC_METHOD(thread_p_cast_fu_233_p1);
    sensitive << ( xf_V_fu_225_p3 );

    SC_METHOD(thread_p_new_exp_V_1_fu_147_p3);
    sensitive << ( tmp_1_fu_129_p2 );

    SC_METHOD(thread_r_V_fu_241_p2);
    sensitive << ( p_cast_fu_233_p1 );
    sensitive << ( tmp_7_fu_237_p1 );

    SC_METHOD(thread_tmp_1_fu_129_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( new_exp_V_fu_87_p4 );

    SC_METHOD(thread_tmp_2_fu_135_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( new_exp_V_fu_87_p4 );
    sensitive << ( decal_subnorm_V_cast_1_fu_121_p3 );

    SC_METHOD(thread_tmp_3_fu_217_p3);
    sensitive << ( new_mant_V_fu_97_p1 );

    SC_METHOD(thread_tmp_4_fu_169_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_1_fu_129_p2 );
    sensitive << ( new_exp_V_fu_87_p4 );

    SC_METHOD(thread_tmp_5_fu_175_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_1_fu_129_p2 );
    sensitive << ( new_exp_V_fu_87_p4 );
    sensitive << ( decal_subnorm_V_cast_1_fu_121_p3 );

    SC_METHOD(thread_tmp_6_fu_155_p2);
    sensitive << ( tmp_1_fu_129_p2 );
    sensitive << ( tmp_2_fu_135_p2 );

    SC_METHOD(thread_tmp_7_fu_237_p1);
    sensitive << ( p_0201_1_cast_fu_213_p1 );

    SC_METHOD(thread_tmp_8_fu_181_p4);
    sensitive << ( p_Val2_s_fu_75_p1 );

    SC_METHOD(thread_tmp_fu_105_p3);
    sensitive << ( p_Val2_s_fu_75_p1 );

    SC_METHOD(thread_xf_V_2_fu_247_p2);
    sensitive << ( r_V_fu_241_p2 );

    SC_METHOD(thread_xf_V_3_cast_fu_101_p1);
    sensitive << ( new_mant_V_fu_97_p1 );

    SC_METHOD(thread_xf_V_fu_225_p3);
    sensitive << ( tmp_4_fu_169_p2 );
    sensitive << ( xf_V_3_cast_fu_101_p1 );
    sensitive << ( tmp_3_fu_217_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "float_div3_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_r, "(port)in_r");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, p_Repl2_2_reg_285, "p_Repl2_2_reg_285");
    sc_trace(mVcdFile, new_mant_V_fu_97_p1, "new_mant_V_fu_97_p1");
    sc_trace(mVcdFile, tmp_1_fu_129_p2, "tmp_1_fu_129_p2");
    sc_trace(mVcdFile, tmp_1_reg_295, "tmp_1_reg_295");
    sc_trace(mVcdFile, p_Repl2_1_fu_161_p3, "p_Repl2_1_fu_161_p3");
    sc_trace(mVcdFile, p_Repl2_1_reg_299, "p_Repl2_1_reg_299");
    sc_trace(mVcdFile, xf_V_2_fu_247_p2, "xf_V_2_fu_247_p2");
    sc_trace(mVcdFile, xf_V_2_reg_304, "xf_V_2_reg_304");
    sc_trace(mVcdFile, ap_phi_mux_p_Repl2_s_phi_fu_69_p4, "ap_phi_mux_p_Repl2_s_phi_fu_69_p4");
    sc_trace(mVcdFile, p_Repl2_s_reg_66, "p_Repl2_s_reg_66");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, p_Val2_s_fu_75_p1, "p_Val2_s_fu_75_p1");
    sc_trace(mVcdFile, tmp_fu_105_p3, "tmp_fu_105_p3");
    sc_trace(mVcdFile, new_exp_V_fu_87_p4, "new_exp_V_fu_87_p4");
    sc_trace(mVcdFile, decal_subnorm_V_cast_1_fu_121_p3, "decal_subnorm_V_cast_1_fu_121_p3");
    sc_trace(mVcdFile, tmp_2_fu_135_p2, "tmp_2_fu_135_p2");
    sc_trace(mVcdFile, tmp_6_fu_155_p2, "tmp_6_fu_155_p2");
    sc_trace(mVcdFile, p_new_exp_V_1_fu_147_p3, "p_new_exp_V_1_fu_147_p3");
    sc_trace(mVcdFile, new_exp_V_1_fu_141_p2, "new_exp_V_1_fu_141_p2");
    sc_trace(mVcdFile, tmp_8_fu_181_p4, "tmp_8_fu_181_p4");
    sc_trace(mVcdFile, tmp_5_fu_175_p2, "tmp_5_fu_175_p2");
    sc_trace(mVcdFile, decal_subnorm_V_cast_fu_113_p3, "decal_subnorm_V_cast_fu_113_p3");
    sc_trace(mVcdFile, decal_subnorm_V_1_ca_fu_191_p2, "decal_subnorm_V_1_ca_fu_191_p2");
    sc_trace(mVcdFile, tmp_4_fu_169_p2, "tmp_4_fu_169_p2");
    sc_trace(mVcdFile, decal_subnorm_V_deca_fu_197_p3, "decal_subnorm_V_deca_fu_197_p3");
    sc_trace(mVcdFile, p_0201_1_fu_205_p3, "p_0201_1_fu_205_p3");
    sc_trace(mVcdFile, xf_V_3_cast_fu_101_p1, "xf_V_3_cast_fu_101_p1");
    sc_trace(mVcdFile, tmp_3_fu_217_p3, "tmp_3_fu_217_p3");
    sc_trace(mVcdFile, xf_V_fu_225_p3, "xf_V_fu_225_p3");
    sc_trace(mVcdFile, p_0201_1_cast_fu_213_p1, "p_0201_1_cast_fu_213_p1");
    sc_trace(mVcdFile, p_cast_fu_233_p1, "p_cast_fu_233_p1");
    sc_trace(mVcdFile, tmp_7_fu_237_p1, "tmp_7_fu_237_p1");
    sc_trace(mVcdFile, r_V_fu_241_p2, "r_V_fu_241_p2");
    sc_trace(mVcdFile, mul_fu_256_p0, "mul_fu_256_p0");
    sc_trace(mVcdFile, mul_fu_256_p2, "mul_fu_256_p2");
    sc_trace(mVcdFile, p_Result_s_fu_273_p4, "p_Result_s_fu_273_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, mul_fu_256_p00, "mul_fu_256_p00");
#endif

    }
    mHdltvinHandle.open("float_div3.hdltvin.dat");
    mHdltvoutHandle.open("float_div3.hdltvout.dat");
}

float_div3::~float_div3() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void float_div3::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(tmp_1_fu_129_p2.read(), ap_const_lv1_1))) {
        p_Repl2_s_reg_66 = new_mant_V_fu_97_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_1_reg_295.read(), ap_const_lv1_0))) {
        p_Repl2_s_reg_66 = mul_fu_256_p2.read().range(56, 34);
    }
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        p_Repl2_1_reg_299 = p_Repl2_1_fu_161_p3.read();
        p_Repl2_2_reg_285 = p_Val2_s_fu_75_p1.read().range(31, 31);
        tmp_1_reg_295 = tmp_1_fu_129_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(tmp_1_fu_129_p2.read(), ap_const_lv1_0))) {
        xf_V_2_reg_304 = xf_V_2_fu_247_p2.read();
    }
}

void float_div3::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void float_div3::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void float_div3::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void float_div3::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void float_div3::thread_ap_phi_mux_p_Repl2_s_phi_fu_69_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_295.read(), ap_const_lv1_0))) {
        ap_phi_mux_p_Repl2_s_phi_fu_69_p4 = mul_fu_256_p2.read().range(56, 34);
    } else {
        ap_phi_mux_p_Repl2_s_phi_fu_69_p4 = p_Repl2_s_reg_66.read();
    }
}

void float_div3::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void float_div3::thread_ap_return() {
    ap_return = p_Result_s_fu_273_p4.read();
}

void float_div3::thread_decal_subnorm_V_1_ca_fu_191_p2() {
    decal_subnorm_V_1_ca_fu_191_p2 = (!tmp_8_fu_181_p4.read().is_01() || !ap_const_lv3_7.is_01())? sc_lv<3>(): (sc_biguint<3>(tmp_8_fu_181_p4.read()) + sc_bigint<3>(ap_const_lv3_7));
}

void float_div3::thread_decal_subnorm_V_cast_1_fu_121_p3() {
    decal_subnorm_V_cast_1_fu_121_p3 = (!tmp_fu_105_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_fu_105_p3.read()[0].to_bool())? ap_const_lv8_1: ap_const_lv8_2);
}

void float_div3::thread_decal_subnorm_V_cast_fu_113_p3() {
    decal_subnorm_V_cast_fu_113_p3 = (!tmp_fu_105_p3.read()[0].is_01())? sc_lv<3>(): ((tmp_fu_105_p3.read()[0].to_bool())? ap_const_lv3_1: ap_const_lv3_2);
}

void float_div3::thread_decal_subnorm_V_deca_fu_197_p3() {
    decal_subnorm_V_deca_fu_197_p3 = (!tmp_5_fu_175_p2.read()[0].is_01())? sc_lv<3>(): ((tmp_5_fu_175_p2.read()[0].to_bool())? decal_subnorm_V_cast_fu_113_p3.read(): decal_subnorm_V_1_ca_fu_191_p2.read());
}

void float_div3::thread_mul_fu_256_p0() {
    mul_fu_256_p0 =  (sc_lv<32>) (mul_fu_256_p00.read());
}

void float_div3::thread_mul_fu_256_p00() {
    mul_fu_256_p00 = esl_zext<65,32>(xf_V_2_reg_304.read());
}

void float_div3::thread_mul_fu_256_p2() {
    mul_fu_256_p2 = (!mul_fu_256_p0.read().is_01() || !ap_const_lv65_155555556.is_01())? sc_lv<65>(): sc_biguint<32>(mul_fu_256_p0.read()) * sc_biguint<65>(ap_const_lv65_155555556);
}

void float_div3::thread_new_exp_V_1_fu_141_p2() {
    new_exp_V_1_fu_141_p2 = (!new_exp_V_fu_87_p4.read().is_01() || !decal_subnorm_V_cast_1_fu_121_p3.read().is_01())? sc_lv<8>(): (sc_biguint<8>(new_exp_V_fu_87_p4.read()) - sc_biguint<8>(decal_subnorm_V_cast_1_fu_121_p3.read()));
}

void float_div3::thread_new_exp_V_fu_87_p4() {
    new_exp_V_fu_87_p4 = p_Val2_s_fu_75_p1.read().range(30, 23);
}

void float_div3::thread_new_mant_V_fu_97_p1() {
    new_mant_V_fu_97_p1 = p_Val2_s_fu_75_p1.read().range(23-1, 0);
}

void float_div3::thread_p_0201_1_cast_fu_213_p1() {
    p_0201_1_cast_fu_213_p1 = esl_sext<8,3>(p_0201_1_fu_205_p3.read());
}

void float_div3::thread_p_0201_1_fu_205_p3() {
    p_0201_1_fu_205_p3 = (!tmp_4_fu_169_p2.read()[0].is_01())? sc_lv<3>(): ((tmp_4_fu_169_p2.read()[0].to_bool())? ap_const_lv3_0: decal_subnorm_V_deca_fu_197_p3.read());
}

void float_div3::thread_p_Repl2_1_fu_161_p3() {
    p_Repl2_1_fu_161_p3 = (!tmp_6_fu_155_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_6_fu_155_p2.read()[0].to_bool())? p_new_exp_V_1_fu_147_p3.read(): new_exp_V_1_fu_141_p2.read());
}

void float_div3::thread_p_Result_s_fu_273_p4() {
    p_Result_s_fu_273_p4 = esl_concat<9,23>(esl_concat<1,8>(p_Repl2_2_reg_285.read(), p_Repl2_1_reg_299.read()), ap_phi_mux_p_Repl2_s_phi_fu_69_p4.read());
}

void float_div3::thread_p_Val2_s_fu_75_p1() {
    p_Val2_s_fu_75_p1 = in_r.read();
}

void float_div3::thread_p_cast_fu_233_p1() {
    p_cast_fu_233_p1 = esl_zext<32,24>(xf_V_fu_225_p3.read());
}

void float_div3::thread_p_new_exp_V_1_fu_147_p3() {
    p_new_exp_V_1_fu_147_p3 = (!tmp_1_fu_129_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_1_fu_129_p2.read()[0].to_bool())? ap_const_lv8_FF: ap_const_lv8_0);
}

void float_div3::thread_r_V_fu_241_p2() {
    r_V_fu_241_p2 = (!tmp_7_fu_237_p1.read().is_01())? sc_lv<32>(): p_cast_fu_233_p1.read() << (unsigned short)tmp_7_fu_237_p1.read().to_uint();
}

void float_div3::thread_tmp_1_fu_129_p2() {
    tmp_1_fu_129_p2 = (!new_exp_V_fu_87_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(new_exp_V_fu_87_p4.read() == ap_const_lv8_FF);
}

void float_div3::thread_tmp_2_fu_135_p2() {
    tmp_2_fu_135_p2 = (!decal_subnorm_V_cast_1_fu_121_p3.read().is_01() || !new_exp_V_fu_87_p4.read().is_01())? sc_lv<1>(): (sc_biguint<8>(decal_subnorm_V_cast_1_fu_121_p3.read()) > sc_biguint<8>(new_exp_V_fu_87_p4.read()));
}

void float_div3::thread_tmp_3_fu_217_p3() {
    tmp_3_fu_217_p3 = esl_concat<1,23>(ap_const_lv1_1, new_mant_V_fu_97_p1.read());
}

void float_div3::thread_tmp_4_fu_169_p2() {
    tmp_4_fu_169_p2 = (!new_exp_V_fu_87_p4.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(new_exp_V_fu_87_p4.read() == ap_const_lv8_0);
}

void float_div3::thread_tmp_5_fu_175_p2() {
    tmp_5_fu_175_p2 = (!decal_subnorm_V_cast_1_fu_121_p3.read().is_01() || !new_exp_V_fu_87_p4.read().is_01())? sc_lv<1>(): (sc_biguint<8>(decal_subnorm_V_cast_1_fu_121_p3.read()) < sc_biguint<8>(new_exp_V_fu_87_p4.read()));
}

void float_div3::thread_tmp_6_fu_155_p2() {
    tmp_6_fu_155_p2 = (tmp_1_fu_129_p2.read() | tmp_2_fu_135_p2.read());
}

void float_div3::thread_tmp_7_fu_237_p1() {
    tmp_7_fu_237_p1 = esl_zext<32,8>(p_0201_1_cast_fu_213_p1.read());
}

void float_div3::thread_tmp_8_fu_181_p4() {
    tmp_8_fu_181_p4 = p_Val2_s_fu_75_p1.read().range(25, 23);
}

void float_div3::thread_tmp_fu_105_p3() {
    tmp_fu_105_p3 = p_Val2_s_fu_75_p1.read().range(22, 22);
}

void float_div3::thread_xf_V_2_fu_247_p2() {
    xf_V_2_fu_247_p2 = (!r_V_fu_241_p2.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(r_V_fu_241_p2.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void float_div3::thread_xf_V_3_cast_fu_101_p1() {
    xf_V_3_cast_fu_101_p1 = esl_zext<24,23>(new_mant_V_fu_97_p1.read());
}

void float_div3::thread_xf_V_fu_225_p3() {
    xf_V_fu_225_p3 = (!tmp_4_fu_169_p2.read()[0].is_01())? sc_lv<24>(): ((tmp_4_fu_169_p2.read()[0].to_bool())? xf_V_3_cast_fu_101_p1.read(): tmp_3_fu_217_p3.read());
}

void float_div3::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void float_div3::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r\" :  \"" << in_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

