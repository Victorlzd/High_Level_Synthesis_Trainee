-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity float_div3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of float_div3 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "float_div3,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.651000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=67,HLS_SYN_LUT=300,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv65_155555556 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101010101010101010101010101010110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_Repl2_2_reg_285 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_mant_V_fu_97_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_1_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_295 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_1_fu_161_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_1_reg_299 : STD_LOGIC_VECTOR (7 downto 0);
    signal xf_V_2_fu_247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xf_V_2_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_Repl2_s_phi_fu_69_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Repl2_s_reg_66 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_Val2_s_fu_75_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_105_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_exp_V_fu_87_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal decal_subnorm_V_cast_1_fu_121_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_new_exp_V_1_fu_147_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_exp_V_1_fu_141_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_181_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal decal_subnorm_V_cast_fu_113_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal decal_subnorm_V_1_ca_fu_191_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal decal_subnorm_V_deca_fu_197_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_0201_1_fu_205_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xf_V_3_cast_fu_101_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_3_fu_217_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xf_V_fu_225_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_0201_1_cast_fu_213_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_fu_256_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_fu_256_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Result_s_fu_273_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_fu_256_p00 : STD_LOGIC_VECTOR (64 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_Repl2_s_reg_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (tmp_1_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Repl2_s_reg_66 <= new_mant_V_fu_97_p1;
            elsif (((tmp_1_reg_295 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_Repl2_s_reg_66 <= mul_fu_256_p2(56 downto 34);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_Repl2_1_reg_299 <= p_Repl2_1_fu_161_p3;
                p_Repl2_2_reg_285 <= p_Val2_s_fu_75_p1(31 downto 31);
                tmp_1_reg_295 <= tmp_1_fu_129_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (tmp_1_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                xf_V_2_reg_304 <= xf_V_2_fu_247_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_Repl2_s_phi_fu_69_p4_assign_proc : process(tmp_1_reg_295, p_Repl2_s_reg_66, ap_CS_fsm_state2, mul_fu_256_p2)
    begin
        if (((tmp_1_reg_295 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_phi_mux_p_Repl2_s_phi_fu_69_p4 <= mul_fu_256_p2(56 downto 34);
        else 
            ap_phi_mux_p_Repl2_s_phi_fu_69_p4 <= p_Repl2_s_reg_66;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_s_fu_273_p4;
    decal_subnorm_V_1_ca_fu_191_p2 <= std_logic_vector(unsigned(tmp_8_fu_181_p4) + unsigned(ap_const_lv3_7));
    decal_subnorm_V_cast_1_fu_121_p3 <= 
        ap_const_lv8_1 when (tmp_fu_105_p3(0) = '1') else 
        ap_const_lv8_2;
    decal_subnorm_V_cast_fu_113_p3 <= 
        ap_const_lv3_1 when (tmp_fu_105_p3(0) = '1') else 
        ap_const_lv3_2;
    decal_subnorm_V_deca_fu_197_p3 <= 
        decal_subnorm_V_cast_fu_113_p3 when (tmp_5_fu_175_p2(0) = '1') else 
        decal_subnorm_V_1_ca_fu_191_p2;
    mul_fu_256_p0 <= mul_fu_256_p00(32 - 1 downto 0);
    mul_fu_256_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_V_2_reg_304),65));
    mul_fu_256_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_fu_256_p0) * unsigned(ap_const_lv65_155555556), 65));
    new_exp_V_1_fu_141_p2 <= std_logic_vector(unsigned(new_exp_V_fu_87_p4) - unsigned(decal_subnorm_V_cast_1_fu_121_p3));
    new_exp_V_fu_87_p4 <= p_Val2_s_fu_75_p1(30 downto 23);
    new_mant_V_fu_97_p1 <= p_Val2_s_fu_75_p1(23 - 1 downto 0);
        p_0201_1_cast_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_0201_1_fu_205_p3),8));

    p_0201_1_fu_205_p3 <= 
        ap_const_lv3_0 when (tmp_4_fu_169_p2(0) = '1') else 
        decal_subnorm_V_deca_fu_197_p3;
    p_Repl2_1_fu_161_p3 <= 
        p_new_exp_V_1_fu_147_p3 when (tmp_6_fu_155_p2(0) = '1') else 
        new_exp_V_1_fu_141_p2;
    p_Result_s_fu_273_p4 <= ((p_Repl2_2_reg_285 & p_Repl2_1_reg_299) & ap_phi_mux_p_Repl2_s_phi_fu_69_p4);
    p_Val2_s_fu_75_p1 <= in_r;
    p_cast_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_V_fu_225_p3),32));
    p_new_exp_V_1_fu_147_p3 <= 
        ap_const_lv8_FF when (tmp_1_fu_129_p2(0) = '1') else 
        ap_const_lv8_0;
    r_V_fu_241_p2 <= std_logic_vector(shift_left(unsigned(p_cast_fu_233_p1),to_integer(unsigned('0' & tmp_7_fu_237_p1(31-1 downto 0)))));
    tmp_1_fu_129_p2 <= "1" when (new_exp_V_fu_87_p4 = ap_const_lv8_FF) else "0";
    tmp_2_fu_135_p2 <= "1" when (unsigned(decal_subnorm_V_cast_1_fu_121_p3) > unsigned(new_exp_V_fu_87_p4)) else "0";
    tmp_3_fu_217_p3 <= (ap_const_lv1_1 & new_mant_V_fu_97_p1);
    tmp_4_fu_169_p2 <= "1" when (new_exp_V_fu_87_p4 = ap_const_lv8_0) else "0";
    tmp_5_fu_175_p2 <= "1" when (unsigned(decal_subnorm_V_cast_1_fu_121_p3) < unsigned(new_exp_V_fu_87_p4)) else "0";
    tmp_6_fu_155_p2 <= (tmp_2_fu_135_p2 or tmp_1_fu_129_p2);
    tmp_7_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0201_1_cast_fu_213_p1),32));
    tmp_8_fu_181_p4 <= p_Val2_s_fu_75_p1(25 downto 23);
    tmp_fu_105_p3 <= p_Val2_s_fu_75_p1(22 downto 22);
    xf_V_2_fu_247_p2 <= std_logic_vector(unsigned(r_V_fu_241_p2) + unsigned(ap_const_lv32_1));
    xf_V_3_cast_fu_101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_mant_V_fu_97_p1),24));
    xf_V_fu_225_p3 <= 
        xf_V_3_cast_fu_101_p1 when (tmp_4_fu_169_p2(0) = '1') else 
        tmp_3_fu_217_p3;
end behav;
