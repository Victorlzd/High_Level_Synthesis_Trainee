-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity long_div3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of long_div3 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "long_div3,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.106000,HLS_SYN_LAT=7,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=122,HLS_SYN_LUT=3423,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_116 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal q_chunk_V_reg_299 : STD_LOGIC_VECTOR (3 downto 0);
    signal q_chunk_V_0_1_reg_304 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_2_reg_309 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_3_reg_314 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_4_reg_319 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_5_reg_324 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_6_reg_329 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_7_reg_334 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_8_reg_339 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_9_reg_344 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_s_4_reg_349 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_10_reg_354 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_11_reg_359 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_12_reg_364 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_13_reg_369 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_273_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_374 : STD_LOGIC_VECTOR (3 downto 0);
    signal q_chunk_V_0_2_reg_379 : STD_LOGIC_VECTOR (3 downto 0);
    signal q_chunk_V_0_3_reg_384 : STD_LOGIC_VECTOR (3 downto 0);
    signal q_chunk_V_0_4_reg_389 : STD_LOGIC_VECTOR (3 downto 0);
    signal q_chunk_V_0_5_reg_394 : STD_LOGIC_VECTOR (3 downto 0);
    signal q_chunk_V_0_6_reg_399 : STD_LOGIC_VECTOR (3 downto 0);
    signal q_chunk_V_0_7_reg_404 : STD_LOGIC_VECTOR (3 downto 0);
    signal q_chunk_V_0_8_reg_409 : STD_LOGIC_VECTOR (3 downto 0);
    signal q_chunk_V_0_9_reg_414 : STD_LOGIC_VECTOR (3 downto 0);
    signal q_chunk_V_0_s_reg_419 : STD_LOGIC_VECTOR (3 downto 0);
    signal q_chunk_V_0_10_reg_424 : STD_LOGIC_VECTOR (3 downto 0);
    signal q_chunk_V_0_11_reg_429 : STD_LOGIC_VECTOR (3 downto 0);
    signal q_chunk_V_0_12_reg_434 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_lut_div3_chunk_fu_86_ap_ready : STD_LOGIC;
    signal grp_lut_div3_chunk_fu_86_d_V : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_lut_div3_chunk_fu_86_r_in_V : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_lut_div3_chunk_fu_86_ap_return_0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_lut_div3_chunk_fu_86_ap_return_1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_lut_div3_chunk_fu_93_ap_ready : STD_LOGIC;
    signal grp_lut_div3_chunk_fu_93_d_V : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_lut_div3_chunk_fu_93_ap_return_0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_lut_div3_chunk_fu_93_ap_return_1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component lut_div3_chunk IS
    port (
        ap_ready : OUT STD_LOGIC;
        d_V : IN STD_LOGIC_VECTOR (3 downto 0);
        r_in_V : IN STD_LOGIC_VECTOR (1 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;



begin
    grp_lut_div3_chunk_fu_86 : component lut_div3_chunk
    port map (
        ap_ready => grp_lut_div3_chunk_fu_86_ap_ready,
        d_V => grp_lut_div3_chunk_fu_86_d_V,
        r_in_V => grp_lut_div3_chunk_fu_86_r_in_V,
        ap_return_0 => grp_lut_div3_chunk_fu_86_ap_return_0,
        ap_return_1 => grp_lut_div3_chunk_fu_86_ap_return_1);

    grp_lut_div3_chunk_fu_93 : component lut_div3_chunk
    port map (
        ap_ready => grp_lut_div3_chunk_fu_93_ap_ready,
        d_V => grp_lut_div3_chunk_fu_93_d_V,
        r_in_V => grp_lut_div3_chunk_fu_86_ap_return_1,
        ap_return_0 => grp_lut_div3_chunk_fu_93_ap_return_0,
        ap_return_1 => grp_lut_div3_chunk_fu_93_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                p_Result_10_reg_354 <= in_r(19 downto 16);
                p_Result_11_reg_359 <= in_r(15 downto 12);
                p_Result_12_reg_364 <= in_r(11 downto 8);
                p_Result_13_reg_369 <= in_r(7 downto 4);
                p_Result_2_reg_309 <= in_r(55 downto 52);
                p_Result_3_reg_314 <= in_r(51 downto 48);
                p_Result_4_reg_319 <= in_r(47 downto 44);
                p_Result_5_reg_324 <= in_r(43 downto 40);
                p_Result_6_reg_329 <= in_r(39 downto 36);
                p_Result_7_reg_334 <= in_r(35 downto 32);
                p_Result_8_reg_339 <= in_r(31 downto 28);
                p_Result_9_reg_344 <= in_r(27 downto 24);
                p_Result_s_4_reg_349 <= in_r(23 downto 20);
                q_chunk_V_0_1_reg_304 <= grp_lut_div3_chunk_fu_93_ap_return_0;
                q_chunk_V_reg_299 <= grp_lut_div3_chunk_fu_86_ap_return_0;
                tmp_reg_374 <= tmp_fu_273_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                q_chunk_V_0_10_reg_424 <= grp_lut_div3_chunk_fu_93_ap_return_0;
                q_chunk_V_0_s_reg_419 <= grp_lut_div3_chunk_fu_86_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                q_chunk_V_0_11_reg_429 <= grp_lut_div3_chunk_fu_86_ap_return_0;
                q_chunk_V_0_12_reg_434 <= grp_lut_div3_chunk_fu_93_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                q_chunk_V_0_2_reg_379 <= grp_lut_div3_chunk_fu_86_ap_return_0;
                q_chunk_V_0_3_reg_384 <= grp_lut_div3_chunk_fu_93_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                q_chunk_V_0_4_reg_389 <= grp_lut_div3_chunk_fu_86_ap_return_0;
                q_chunk_V_0_5_reg_394 <= grp_lut_div3_chunk_fu_93_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                q_chunk_V_0_6_reg_399 <= grp_lut_div3_chunk_fu_86_ap_return_0;
                q_chunk_V_0_7_reg_404 <= grp_lut_div3_chunk_fu_93_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                q_chunk_V_0_8_reg_409 <= grp_lut_div3_chunk_fu_86_ap_return_0;
                q_chunk_V_0_9_reg_414 <= grp_lut_div3_chunk_fu_93_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then
                reg_116 <= grp_lut_div3_chunk_fu_93_ap_return_1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= (((((((((((((((q_chunk_V_reg_299 & q_chunk_V_0_1_reg_304) & q_chunk_V_0_2_reg_379) & q_chunk_V_0_3_reg_384) & q_chunk_V_0_4_reg_389) & q_chunk_V_0_5_reg_394) & q_chunk_V_0_6_reg_399) & q_chunk_V_0_7_reg_404) & q_chunk_V_0_8_reg_409) & q_chunk_V_0_9_reg_414) & q_chunk_V_0_s_reg_419) & q_chunk_V_0_10_reg_424) & q_chunk_V_0_11_reg_429) & q_chunk_V_0_12_reg_434) & grp_lut_div3_chunk_fu_86_ap_return_0) & grp_lut_div3_chunk_fu_93_ap_return_0);

    grp_lut_div3_chunk_fu_86_d_V_assign_proc : process(ap_CS_fsm_state1, in_r, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, p_Result_2_reg_309, p_Result_4_reg_319, p_Result_6_reg_329, p_Result_8_reg_339, p_Result_s_4_reg_349, p_Result_11_reg_359, p_Result_13_reg_369, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_lut_div3_chunk_fu_86_d_V <= p_Result_13_reg_369;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_lut_div3_chunk_fu_86_d_V <= p_Result_11_reg_359;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_lut_div3_chunk_fu_86_d_V <= p_Result_s_4_reg_349;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_lut_div3_chunk_fu_86_d_V <= p_Result_8_reg_339;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_lut_div3_chunk_fu_86_d_V <= p_Result_6_reg_329;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_lut_div3_chunk_fu_86_d_V <= p_Result_4_reg_319;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_lut_div3_chunk_fu_86_d_V <= p_Result_2_reg_309;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_lut_div3_chunk_fu_86_d_V <= in_r(63 downto 60);
        else 
            grp_lut_div3_chunk_fu_86_d_V <= "XXXX";
        end if; 
    end process;


    grp_lut_div3_chunk_fu_86_r_in_V_assign_proc : process(ap_CS_fsm_state1, reg_116, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_lut_div3_chunk_fu_86_r_in_V <= reg_116;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_lut_div3_chunk_fu_86_r_in_V <= ap_const_lv2_0;
        else 
            grp_lut_div3_chunk_fu_86_r_in_V <= "XX";
        end if; 
    end process;


    grp_lut_div3_chunk_fu_93_d_V_assign_proc : process(ap_CS_fsm_state1, in_r, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, p_Result_3_reg_314, p_Result_5_reg_324, p_Result_7_reg_334, p_Result_9_reg_344, p_Result_10_reg_354, p_Result_12_reg_364, tmp_reg_374, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_lut_div3_chunk_fu_93_d_V <= tmp_reg_374;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_lut_div3_chunk_fu_93_d_V <= p_Result_12_reg_364;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_lut_div3_chunk_fu_93_d_V <= p_Result_10_reg_354;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_lut_div3_chunk_fu_93_d_V <= p_Result_9_reg_344;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_lut_div3_chunk_fu_93_d_V <= p_Result_7_reg_334;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_lut_div3_chunk_fu_93_d_V <= p_Result_5_reg_324;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_lut_div3_chunk_fu_93_d_V <= p_Result_3_reg_314;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_lut_div3_chunk_fu_93_d_V <= in_r(59 downto 56);
        else 
            grp_lut_div3_chunk_fu_93_d_V <= "XXXX";
        end if; 
    end process;

    tmp_fu_273_p1 <= in_r(4 - 1 downto 0);
end behav;
