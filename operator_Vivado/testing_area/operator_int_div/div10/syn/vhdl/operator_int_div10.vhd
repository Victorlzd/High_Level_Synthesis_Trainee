-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity operator_int_div10 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of operator_int_div10 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "operator_int_div10,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=20.538000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=36,HLS_SYN_LUT=9933,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_1_fu_169_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_306 : STD_LOGIC_VECTOR (0 downto 0);
    signal q_chunk_V_ret2_i_i_reg_311 : STD_LOGIC_VECTOR (2 downto 0);
    signal q_chunk_V_ret2_1_i_i_reg_316 : STD_LOGIC_VECTOR (2 downto 0);
    signal q_chunk_V_ret2_2_i_i_reg_321 : STD_LOGIC_VECTOR (2 downto 0);
    signal q_chunk_V_ret2_3_i_i_reg_326 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_ret3_3_i_i_reg_331 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_19_4_i_i_reg_336 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_19_5_i_i_reg_341 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_19_6_i_i_reg_346 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_19_7_i_i_reg_351 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_19_8_i_i_reg_356 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_19_9_i_i_reg_361 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lut_div5_chunk_fu_74_ap_ready : STD_LOGIC;
    signal grp_lut_div5_chunk_fu_74_d_V : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lut_div5_chunk_fu_74_r_in_V : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lut_div5_chunk_fu_74_ap_return_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lut_div5_chunk_fu_74_ap_return_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lut_div5_chunk_fu_81_ap_ready : STD_LOGIC;
    signal grp_lut_div5_chunk_fu_81_d_V : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lut_div5_chunk_fu_81_ap_return_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lut_div5_chunk_fu_81_ap_return_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lut_div5_chunk_fu_87_ap_ready : STD_LOGIC;
    signal grp_lut_div5_chunk_fu_87_d_V : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lut_div5_chunk_fu_87_ap_return_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lut_div5_chunk_fu_87_ap_return_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lut_div5_chunk_fu_93_ap_ready : STD_LOGIC;
    signal grp_lut_div5_chunk_fu_93_d_V : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lut_div5_chunk_fu_93_ap_return_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lut_div5_chunk_fu_93_ap_return_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lut_div5_chunk_fu_99_ap_ready : STD_LOGIC;
    signal grp_lut_div5_chunk_fu_99_d_V : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lut_div5_chunk_fu_99_ap_return_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_lut_div5_chunk_fu_99_ap_return_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal call_ret4_9_i_i_lut_div5_chunk_fu_105_ap_ready : STD_LOGIC;
    signal call_ret4_9_i_i_lut_div5_chunk_fu_105_ap_return_0 : STD_LOGIC_VECTOR (2 downto 0);
    signal call_ret4_9_i_i_lut_div5_chunk_fu_105_ap_return_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_chunk_V_fu_164_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_156_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_9_i_i_fu_281_p12 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component lut_div5_chunk IS
    port (
        ap_ready : OUT STD_LOGIC;
        d_V : IN STD_LOGIC_VECTOR (2 downto 0);
        r_in_V : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;



begin
    grp_lut_div5_chunk_fu_74 : component lut_div5_chunk
    port map (
        ap_ready => grp_lut_div5_chunk_fu_74_ap_ready,
        d_V => grp_lut_div5_chunk_fu_74_d_V,
        r_in_V => grp_lut_div5_chunk_fu_74_r_in_V,
        ap_return_0 => grp_lut_div5_chunk_fu_74_ap_return_0,
        ap_return_1 => grp_lut_div5_chunk_fu_74_ap_return_1);

    grp_lut_div5_chunk_fu_81 : component lut_div5_chunk
    port map (
        ap_ready => grp_lut_div5_chunk_fu_81_ap_ready,
        d_V => grp_lut_div5_chunk_fu_81_d_V,
        r_in_V => grp_lut_div5_chunk_fu_74_ap_return_1,
        ap_return_0 => grp_lut_div5_chunk_fu_81_ap_return_0,
        ap_return_1 => grp_lut_div5_chunk_fu_81_ap_return_1);

    grp_lut_div5_chunk_fu_87 : component lut_div5_chunk
    port map (
        ap_ready => grp_lut_div5_chunk_fu_87_ap_ready,
        d_V => grp_lut_div5_chunk_fu_87_d_V,
        r_in_V => grp_lut_div5_chunk_fu_81_ap_return_1,
        ap_return_0 => grp_lut_div5_chunk_fu_87_ap_return_0,
        ap_return_1 => grp_lut_div5_chunk_fu_87_ap_return_1);

    grp_lut_div5_chunk_fu_93 : component lut_div5_chunk
    port map (
        ap_ready => grp_lut_div5_chunk_fu_93_ap_ready,
        d_V => grp_lut_div5_chunk_fu_93_d_V,
        r_in_V => grp_lut_div5_chunk_fu_87_ap_return_1,
        ap_return_0 => grp_lut_div5_chunk_fu_93_ap_return_0,
        ap_return_1 => grp_lut_div5_chunk_fu_93_ap_return_1);

    grp_lut_div5_chunk_fu_99 : component lut_div5_chunk
    port map (
        ap_ready => grp_lut_div5_chunk_fu_99_ap_ready,
        d_V => grp_lut_div5_chunk_fu_99_d_V,
        r_in_V => grp_lut_div5_chunk_fu_93_ap_return_1,
        ap_return_0 => grp_lut_div5_chunk_fu_99_ap_return_0,
        ap_return_1 => grp_lut_div5_chunk_fu_99_ap_return_1);

    call_ret4_9_i_i_lut_div5_chunk_fu_105 : component lut_div5_chunk
    port map (
        ap_ready => call_ret4_9_i_i_lut_div5_chunk_fu_105_ap_ready,
        d_V => p_Result_19_9_i_i_reg_361,
        r_in_V => grp_lut_div5_chunk_fu_99_ap_return_1,
        ap_return_0 => call_ret4_9_i_i_lut_div5_chunk_fu_105_ap_return_0,
        ap_return_1 => call_ret4_9_i_i_lut_div5_chunk_fu_105_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_Result_19_4_i_i_reg_336 <= in_r(18 downto 16);
                p_Result_19_5_i_i_reg_341 <= in_r(15 downto 13);
                p_Result_19_6_i_i_reg_346 <= in_r(12 downto 10);
                p_Result_19_7_i_i_reg_351 <= in_r(9 downto 7);
                p_Result_19_8_i_i_reg_356 <= in_r(6 downto 4);
                p_Result_19_9_i_i_reg_361 <= in_r(3 downto 1);
                q_chunk_V_ret2_1_i_i_reg_316 <= grp_lut_div5_chunk_fu_87_ap_return_0;
                q_chunk_V_ret2_2_i_i_reg_321 <= grp_lut_div5_chunk_fu_93_ap_return_0;
                q_chunk_V_ret2_3_i_i_reg_326 <= grp_lut_div5_chunk_fu_99_ap_return_0;
                q_chunk_V_ret2_i_i_reg_311 <= grp_lut_div5_chunk_fu_81_ap_return_0;
                r_V_ret3_3_i_i_reg_331 <= grp_lut_div5_chunk_fu_99_ap_return_1;
                tmp_1_reg_306 <= tmp_1_fu_169_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_16_9_i_i_fu_281_p12),32));
    d_chunk_V_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_156_p3),3));

    grp_lut_div5_chunk_fu_74_d_V_assign_proc : process(ap_CS_fsm_state1, p_Result_19_4_i_i_reg_336, d_chunk_V_fu_164_p1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_lut_div5_chunk_fu_74_d_V <= p_Result_19_4_i_i_reg_336;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_lut_div5_chunk_fu_74_d_V <= d_chunk_V_fu_164_p1;
        else 
            grp_lut_div5_chunk_fu_74_d_V <= "XXX";
        end if; 
    end process;


    grp_lut_div5_chunk_fu_74_r_in_V_assign_proc : process(ap_CS_fsm_state1, r_V_ret3_3_i_i_reg_331, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_lut_div5_chunk_fu_74_r_in_V <= r_V_ret3_3_i_i_reg_331;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_lut_div5_chunk_fu_74_r_in_V <= ap_const_lv3_0;
        else 
            grp_lut_div5_chunk_fu_74_r_in_V <= "XXX";
        end if; 
    end process;


    grp_lut_div5_chunk_fu_81_d_V_assign_proc : process(ap_CS_fsm_state1, in_r, p_Result_19_5_i_i_reg_341, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_lut_div5_chunk_fu_81_d_V <= p_Result_19_5_i_i_reg_341;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_lut_div5_chunk_fu_81_d_V <= in_r(30 downto 28);
        else 
            grp_lut_div5_chunk_fu_81_d_V <= "XXX";
        end if; 
    end process;


    grp_lut_div5_chunk_fu_87_d_V_assign_proc : process(ap_CS_fsm_state1, in_r, p_Result_19_6_i_i_reg_346, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_lut_div5_chunk_fu_87_d_V <= p_Result_19_6_i_i_reg_346;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_lut_div5_chunk_fu_87_d_V <= in_r(27 downto 25);
        else 
            grp_lut_div5_chunk_fu_87_d_V <= "XXX";
        end if; 
    end process;


    grp_lut_div5_chunk_fu_93_d_V_assign_proc : process(ap_CS_fsm_state1, in_r, p_Result_19_7_i_i_reg_351, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_lut_div5_chunk_fu_93_d_V <= p_Result_19_7_i_i_reg_351;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_lut_div5_chunk_fu_93_d_V <= in_r(24 downto 22);
        else 
            grp_lut_div5_chunk_fu_93_d_V <= "XXX";
        end if; 
    end process;


    grp_lut_div5_chunk_fu_99_d_V_assign_proc : process(ap_CS_fsm_state1, in_r, p_Result_19_8_i_i_reg_356, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_lut_div5_chunk_fu_99_d_V <= p_Result_19_8_i_i_reg_356;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_lut_div5_chunk_fu_99_d_V <= in_r(21 downto 19);
        else 
            grp_lut_div5_chunk_fu_99_d_V <= "XXX";
        end if; 
    end process;

    p_Result_16_9_i_i_fu_281_p12 <= ((((((((((tmp_1_reg_306 & q_chunk_V_ret2_i_i_reg_311) & q_chunk_V_ret2_1_i_i_reg_316) & q_chunk_V_ret2_2_i_i_reg_321) & q_chunk_V_ret2_3_i_i_reg_326) & grp_lut_div5_chunk_fu_74_ap_return_0) & grp_lut_div5_chunk_fu_81_ap_return_0) & grp_lut_div5_chunk_fu_87_ap_return_0) & grp_lut_div5_chunk_fu_93_ap_return_0) & grp_lut_div5_chunk_fu_99_ap_return_0) & call_ret4_9_i_i_lut_div5_chunk_fu_105_ap_return_0);
    tmp_1_fu_169_p1 <= grp_lut_div5_chunk_fu_74_ap_return_0(1 - 1 downto 0);
    tmp_fu_156_p3 <= in_r(31 downto 31);
end behav;
