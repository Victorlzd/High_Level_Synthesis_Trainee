

================================================================
== Vivado HLS Report for 'operator_int_div6'
================================================================
* Date:           Fri Aug 31 16:26:47 2018

* Version:        2018.2 (Build 2258646 on Thu Jun 14 20:25:20 MDT 2018)
* Project:        operator_int_div
* Solution:       div6
* Product family: kintex7
* Target device:  xc7k160tfbg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   2.50|     1.387|        0.31|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |   23|   23|   23|   23|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 16
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.38>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%in_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %in_r) nounwind"   --->   Operation 17 'read' 'in_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%p_Result_i = call i3 @_ssdm_op_PartSelect.i3.i32.i32.i32(i32 %in_read, i32 29, i32 31)" [test.cpp:178->test.cpp:206]   --->   Operation 18 'partselect' 'p_Result_i' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%d_chunk_V = zext i3 %p_Result_i to i4" [test.cpp:178->test.cpp:206]   --->   Operation 19 'zext' 'd_chunk_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [2/2] (1.38ns)   --->   "%call_ret1_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V, i2 0) nounwind" [test.cpp:179->test.cpp:206]   --->   Operation 20 'call' 'call_ret1_i' <Predicate = true> <Delay = 1.38> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%d_chunk_V_1 = call i4 @_ssdm_op_PartSelect.i4.i32.i32.i32(i32 %in_read, i32 25, i32 28)" [test.cpp:181->test.cpp:206]   --->   Operation 21 'partselect' 'd_chunk_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%d_chunk_V_2 = call i4 @_ssdm_op_PartSelect.i4.i32.i32.i32(i32 %in_read, i32 21, i32 24)" [test.cpp:184->test.cpp:206]   --->   Operation 22 'partselect' 'd_chunk_V_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%d_chunk_V_3 = call i4 @_ssdm_op_PartSelect.i4.i32.i32.i32(i32 %in_read, i32 17, i32 20)" [test.cpp:187->test.cpp:206]   --->   Operation 23 'partselect' 'd_chunk_V_3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%d_chunk_V_4 = call i4 @_ssdm_op_PartSelect.i4.i32.i32.i32(i32 %in_read, i32 13, i32 16)" [test.cpp:190->test.cpp:206]   --->   Operation 24 'partselect' 'd_chunk_V_4' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%d_chunk_V_5 = call i4 @_ssdm_op_PartSelect.i4.i32.i32.i32(i32 %in_read, i32 9, i32 12)" [test.cpp:193->test.cpp:206]   --->   Operation 25 'partselect' 'd_chunk_V_5' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%d_chunk_V_6 = call i4 @_ssdm_op_PartSelect.i4.i32.i32.i32(i32 %in_read, i32 5, i32 8)" [test.cpp:196->test.cpp:206]   --->   Operation 26 'partselect' 'd_chunk_V_6' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%d_chunk_V_7 = call i4 @_ssdm_op_PartSelect.i4.i32.i32.i32(i32 %in_read, i32 1, i32 4)" [test.cpp:199->test.cpp:206]   --->   Operation 27 'partselect' 'd_chunk_V_7' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 1.33>
ST_2 : Operation 28 [1/2] (1.33ns)   --->   "%call_ret1_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V, i2 0) nounwind" [test.cpp:179->test.cpp:206]   --->   Operation 28 'call' 'call_ret1_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 29 [1/1] (0.00ns)   --->   "%q_chunk_V_8 = extractvalue { i4, i2 } %call_ret1_i, 0" [test.cpp:179->test.cpp:206]   --->   Operation 29 'extractvalue' 'q_chunk_V_8' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 30 [1/1] (0.00ns)   --->   "%r_V = extractvalue { i4, i2 } %call_ret1_i, 1" [test.cpp:179->test.cpp:206]   --->   Operation 30 'extractvalue' 'r_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 31 [1/1] (0.00ns)   --->   "%tmp = trunc i4 %q_chunk_V_8 to i3" [test.cpp:180->test.cpp:206]   --->   Operation 31 'trunc' 'tmp' <Predicate = true> <Delay = 0.00>

State 3 <SV = 2> <Delay = 1.38>
ST_3 : Operation 32 [2/2] (1.38ns)   --->   "%call_ret2_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_1, i2 %r_V) nounwind" [test.cpp:182->test.cpp:206]   --->   Operation 32 'call' 'call_ret2_i' <Predicate = true> <Delay = 1.38> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 4 <SV = 3> <Delay = 1.33>
ST_4 : Operation 33 [1/2] (1.33ns)   --->   "%call_ret2_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_1, i2 %r_V) nounwind" [test.cpp:182->test.cpp:206]   --->   Operation 33 'call' 'call_ret2_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_4 : Operation 34 [1/1] (0.00ns)   --->   "%q_chunk_V = extractvalue { i4, i2 } %call_ret2_i, 0" [test.cpp:182->test.cpp:206]   --->   Operation 34 'extractvalue' 'q_chunk_V' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 35 [1/1] (0.00ns)   --->   "%r_V_1 = extractvalue { i4, i2 } %call_ret2_i, 1" [test.cpp:182->test.cpp:206]   --->   Operation 35 'extractvalue' 'r_V_1' <Predicate = true> <Delay = 0.00>

State 5 <SV = 4> <Delay = 1.38>
ST_5 : Operation 36 [2/2] (1.38ns)   --->   "%call_ret3_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_2, i2 %r_V_1) nounwind" [test.cpp:185->test.cpp:206]   --->   Operation 36 'call' 'call_ret3_i' <Predicate = true> <Delay = 1.38> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 6 <SV = 5> <Delay = 1.33>
ST_6 : Operation 37 [1/2] (1.33ns)   --->   "%call_ret3_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_2, i2 %r_V_1) nounwind" [test.cpp:185->test.cpp:206]   --->   Operation 37 'call' 'call_ret3_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_6 : Operation 38 [1/1] (0.00ns)   --->   "%q_chunk_V_1 = extractvalue { i4, i2 } %call_ret3_i, 0" [test.cpp:185->test.cpp:206]   --->   Operation 38 'extractvalue' 'q_chunk_V_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 39 [1/1] (0.00ns)   --->   "%r_V_2 = extractvalue { i4, i2 } %call_ret3_i, 1" [test.cpp:185->test.cpp:206]   --->   Operation 39 'extractvalue' 'r_V_2' <Predicate = true> <Delay = 0.00>

State 7 <SV = 6> <Delay = 1.38>
ST_7 : Operation 40 [2/2] (1.38ns)   --->   "%call_ret4_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_3, i2 %r_V_2) nounwind" [test.cpp:188->test.cpp:206]   --->   Operation 40 'call' 'call_ret4_i' <Predicate = true> <Delay = 1.38> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 8 <SV = 7> <Delay = 1.33>
ST_8 : Operation 41 [1/2] (1.33ns)   --->   "%call_ret4_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_3, i2 %r_V_2) nounwind" [test.cpp:188->test.cpp:206]   --->   Operation 41 'call' 'call_ret4_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_8 : Operation 42 [1/1] (0.00ns)   --->   "%q_chunk_V_2 = extractvalue { i4, i2 } %call_ret4_i, 0" [test.cpp:188->test.cpp:206]   --->   Operation 42 'extractvalue' 'q_chunk_V_2' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 43 [1/1] (0.00ns)   --->   "%r_V_3 = extractvalue { i4, i2 } %call_ret4_i, 1" [test.cpp:188->test.cpp:206]   --->   Operation 43 'extractvalue' 'r_V_3' <Predicate = true> <Delay = 0.00>

State 9 <SV = 8> <Delay = 1.38>
ST_9 : Operation 44 [2/2] (1.38ns)   --->   "%call_ret5_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_4, i2 %r_V_3) nounwind" [test.cpp:191->test.cpp:206]   --->   Operation 44 'call' 'call_ret5_i' <Predicate = true> <Delay = 1.38> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 10 <SV = 9> <Delay = 1.33>
ST_10 : Operation 45 [1/2] (1.33ns)   --->   "%call_ret5_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_4, i2 %r_V_3) nounwind" [test.cpp:191->test.cpp:206]   --->   Operation 45 'call' 'call_ret5_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_10 : Operation 46 [1/1] (0.00ns)   --->   "%q_chunk_V_3 = extractvalue { i4, i2 } %call_ret5_i, 0" [test.cpp:191->test.cpp:206]   --->   Operation 46 'extractvalue' 'q_chunk_V_3' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 47 [1/1] (0.00ns)   --->   "%r_V_4 = extractvalue { i4, i2 } %call_ret5_i, 1" [test.cpp:191->test.cpp:206]   --->   Operation 47 'extractvalue' 'r_V_4' <Predicate = true> <Delay = 0.00>

State 11 <SV = 10> <Delay = 1.38>
ST_11 : Operation 48 [2/2] (1.38ns)   --->   "%call_ret6_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_5, i2 %r_V_4) nounwind" [test.cpp:194->test.cpp:206]   --->   Operation 48 'call' 'call_ret6_i' <Predicate = true> <Delay = 1.38> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 12 <SV = 11> <Delay = 1.33>
ST_12 : Operation 49 [1/2] (1.33ns)   --->   "%call_ret6_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_5, i2 %r_V_4) nounwind" [test.cpp:194->test.cpp:206]   --->   Operation 49 'call' 'call_ret6_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_12 : Operation 50 [1/1] (0.00ns)   --->   "%q_chunk_V_4 = extractvalue { i4, i2 } %call_ret6_i, 0" [test.cpp:194->test.cpp:206]   --->   Operation 50 'extractvalue' 'q_chunk_V_4' <Predicate = true> <Delay = 0.00>
ST_12 : Operation 51 [1/1] (0.00ns)   --->   "%r_V_5 = extractvalue { i4, i2 } %call_ret6_i, 1" [test.cpp:194->test.cpp:206]   --->   Operation 51 'extractvalue' 'r_V_5' <Predicate = true> <Delay = 0.00>

State 13 <SV = 12> <Delay = 1.38>
ST_13 : Operation 52 [2/2] (1.38ns)   --->   "%call_ret7_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_6, i2 %r_V_5) nounwind" [test.cpp:197->test.cpp:206]   --->   Operation 52 'call' 'call_ret7_i' <Predicate = true> <Delay = 1.38> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 14 <SV = 13> <Delay = 1.33>
ST_14 : Operation 53 [1/2] (1.33ns)   --->   "%call_ret7_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_6, i2 %r_V_5) nounwind" [test.cpp:197->test.cpp:206]   --->   Operation 53 'call' 'call_ret7_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_14 : Operation 54 [1/1] (0.00ns)   --->   "%q_chunk_V_5 = extractvalue { i4, i2 } %call_ret7_i, 0" [test.cpp:197->test.cpp:206]   --->   Operation 54 'extractvalue' 'q_chunk_V_5' <Predicate = true> <Delay = 0.00>
ST_14 : Operation 55 [1/1] (0.00ns)   --->   "%r_V_6 = extractvalue { i4, i2 } %call_ret7_i, 1" [test.cpp:197->test.cpp:206]   --->   Operation 55 'extractvalue' 'r_V_6' <Predicate = true> <Delay = 0.00>

State 15 <SV = 14> <Delay = 1.38>
ST_15 : Operation 56 [2/2] (1.38ns)   --->   "%call_ret_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_7, i2 %r_V_6) nounwind" [test.cpp:200->test.cpp:206]   --->   Operation 56 'call' 'call_ret_i' <Predicate = true> <Delay = 1.38> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 16 <SV = 15> <Delay = 1.33>
ST_16 : Operation 57 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32 %in_r) nounwind, !map !124"   --->   Operation 57 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_16 : Operation 58 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32 0) nounwind, !map !130"   --->   Operation 58 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_16 : Operation 59 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([18 x i8]* @operator_int_div6_st) nounwind"   --->   Operation 59 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_16 : Operation 60 [1/2] (1.33ns)   --->   "%call_ret_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_7, i2 %r_V_6) nounwind" [test.cpp:200->test.cpp:206]   --->   Operation 60 'call' 'call_ret_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_16 : Operation 61 [1/1] (0.00ns)   --->   "%q_chunk_V_6 = extractvalue { i4, i2 } %call_ret_i, 0" [test.cpp:200->test.cpp:206]   --->   Operation 61 'extractvalue' 'q_chunk_V_6' <Predicate = true> <Delay = 0.00>
ST_16 : Operation 62 [1/1] (0.00ns)   --->   "%p_Result_s = call i31 @_ssdm_op_BitConcatenate.i31.i3.i4.i4.i4.i4.i4.i4.i4(i3 %tmp, i4 %q_chunk_V, i4 %q_chunk_V_1, i4 %q_chunk_V_2, i4 %q_chunk_V_3, i4 %q_chunk_V_4, i4 %q_chunk_V_5, i4 %q_chunk_V_6) nounwind" [test.cpp:201->test.cpp:206]   --->   Operation 62 'bitconcatenate' 'p_Result_s' <Predicate = true> <Delay = 0.00>
ST_16 : Operation 63 [1/1] (0.00ns)   --->   "%tmp_1 = zext i31 %p_Result_s to i32" [test.cpp:206]   --->   Operation 63 'zext' 'tmp_1' <Predicate = true> <Delay = 0.00>
ST_16 : Operation 64 [1/1] (0.00ns)   --->   "ret i32 %tmp_1" [test.cpp:206]   --->   Operation 64 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 2.5ns, clock uncertainty: 0.312ns.

 <State 1>: 1.39ns
The critical path consists of the following:
	wire read on port 'in_r' [11]  (0 ns)
	'call' operation ('call_ret1_i', test.cpp:179->test.cpp:206) to 'lut_div3_chunk' [14]  (1.39 ns)

 <State 2>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret1_i', test.cpp:179->test.cpp:206) to 'lut_div3_chunk' [14]  (1.33 ns)

 <State 3>: 1.39ns
The critical path consists of the following:
	'call' operation ('call_ret2_i', test.cpp:182->test.cpp:206) to 'lut_div3_chunk' [19]  (1.39 ns)

 <State 4>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret2_i', test.cpp:182->test.cpp:206) to 'lut_div3_chunk' [19]  (1.33 ns)

 <State 5>: 1.39ns
The critical path consists of the following:
	'call' operation ('call_ret3_i', test.cpp:185->test.cpp:206) to 'lut_div3_chunk' [23]  (1.39 ns)

 <State 6>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret3_i', test.cpp:185->test.cpp:206) to 'lut_div3_chunk' [23]  (1.33 ns)

 <State 7>: 1.39ns
The critical path consists of the following:
	'call' operation ('call_ret4_i', test.cpp:188->test.cpp:206) to 'lut_div3_chunk' [27]  (1.39 ns)

 <State 8>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret4_i', test.cpp:188->test.cpp:206) to 'lut_div3_chunk' [27]  (1.33 ns)

 <State 9>: 1.39ns
The critical path consists of the following:
	'call' operation ('call_ret5_i', test.cpp:191->test.cpp:206) to 'lut_div3_chunk' [31]  (1.39 ns)

 <State 10>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret5_i', test.cpp:191->test.cpp:206) to 'lut_div3_chunk' [31]  (1.33 ns)

 <State 11>: 1.39ns
The critical path consists of the following:
	'call' operation ('call_ret6_i', test.cpp:194->test.cpp:206) to 'lut_div3_chunk' [35]  (1.39 ns)

 <State 12>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret6_i', test.cpp:194->test.cpp:206) to 'lut_div3_chunk' [35]  (1.33 ns)

 <State 13>: 1.39ns
The critical path consists of the following:
	'call' operation ('call_ret7_i', test.cpp:197->test.cpp:206) to 'lut_div3_chunk' [39]  (1.39 ns)

 <State 14>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret7_i', test.cpp:197->test.cpp:206) to 'lut_div3_chunk' [39]  (1.33 ns)

 <State 15>: 1.39ns
The critical path consists of the following:
	'call' operation ('call_ret_i', test.cpp:200->test.cpp:206) to 'lut_div3_chunk' [43]  (1.39 ns)

 <State 16>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret_i', test.cpp:200->test.cpp:206) to 'lut_div3_chunk' [43]  (1.33 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
