// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "operator_int_div3.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic operator_int_div3::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic operator_int_div3::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<16> operator_int_div3::ap_ST_fsm_state1 = "1";
const sc_lv<16> operator_int_div3::ap_ST_fsm_state2 = "10";
const sc_lv<16> operator_int_div3::ap_ST_fsm_state3 = "100";
const sc_lv<16> operator_int_div3::ap_ST_fsm_state4 = "1000";
const sc_lv<16> operator_int_div3::ap_ST_fsm_state5 = "10000";
const sc_lv<16> operator_int_div3::ap_ST_fsm_state6 = "100000";
const sc_lv<16> operator_int_div3::ap_ST_fsm_state7 = "1000000";
const sc_lv<16> operator_int_div3::ap_ST_fsm_state8 = "10000000";
const sc_lv<16> operator_int_div3::ap_ST_fsm_state9 = "100000000";
const sc_lv<16> operator_int_div3::ap_ST_fsm_state10 = "1000000000";
const sc_lv<16> operator_int_div3::ap_ST_fsm_state11 = "10000000000";
const sc_lv<16> operator_int_div3::ap_ST_fsm_state12 = "100000000000";
const sc_lv<16> operator_int_div3::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<16> operator_int_div3::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<16> operator_int_div3::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<16> operator_int_div3::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<32> operator_int_div3::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> operator_int_div3::ap_const_lv32_1 = "1";
const sc_lv<32> operator_int_div3::ap_const_lv32_3 = "11";
const sc_lv<32> operator_int_div3::ap_const_lv32_5 = "101";
const sc_lv<32> operator_int_div3::ap_const_lv32_7 = "111";
const sc_lv<32> operator_int_div3::ap_const_lv32_9 = "1001";
const sc_lv<32> operator_int_div3::ap_const_lv32_B = "1011";
const sc_lv<32> operator_int_div3::ap_const_lv32_D = "1101";
const sc_lv<32> operator_int_div3::ap_const_lv32_2 = "10";
const sc_lv<32> operator_int_div3::ap_const_lv32_4 = "100";
const sc_lv<32> operator_int_div3::ap_const_lv32_6 = "110";
const sc_lv<32> operator_int_div3::ap_const_lv32_8 = "1000";
const sc_lv<32> operator_int_div3::ap_const_lv32_A = "1010";
const sc_lv<32> operator_int_div3::ap_const_lv32_C = "1100";
const sc_lv<32> operator_int_div3::ap_const_lv32_E = "1110";
const sc_lv<32> operator_int_div3::ap_const_lv32_F = "1111";
const sc_lv<2> operator_int_div3::ap_const_lv2_0 = "00";
const sc_lv<32> operator_int_div3::ap_const_lv32_1C = "11100";
const sc_lv<32> operator_int_div3::ap_const_lv32_1F = "11111";
const sc_lv<32> operator_int_div3::ap_const_lv32_18 = "11000";
const sc_lv<32> operator_int_div3::ap_const_lv32_1B = "11011";
const sc_lv<32> operator_int_div3::ap_const_lv32_14 = "10100";
const sc_lv<32> operator_int_div3::ap_const_lv32_17 = "10111";
const sc_lv<32> operator_int_div3::ap_const_lv32_10 = "10000";
const sc_lv<32> operator_int_div3::ap_const_lv32_13 = "10011";
const bool operator_int_div3::ap_const_boolean_1 = true;

operator_int_div3::operator_int_div3(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_lut_div3_chunk_fu_66 = new lut_div3_chunk("grp_lut_div3_chunk_fu_66");
    grp_lut_div3_chunk_fu_66->ap_clk(ap_clk);
    grp_lut_div3_chunk_fu_66->ap_rst(ap_rst);
    grp_lut_div3_chunk_fu_66->ap_start(grp_lut_div3_chunk_fu_66_ap_start);
    grp_lut_div3_chunk_fu_66->ap_done(grp_lut_div3_chunk_fu_66_ap_done);
    grp_lut_div3_chunk_fu_66->ap_idle(grp_lut_div3_chunk_fu_66_ap_idle);
    grp_lut_div3_chunk_fu_66->ap_ready(grp_lut_div3_chunk_fu_66_ap_ready);
    grp_lut_div3_chunk_fu_66->d_V(grp_lut_div3_chunk_fu_66_d_V);
    grp_lut_div3_chunk_fu_66->r_in_V(grp_lut_div3_chunk_fu_66_r_in_V);
    grp_lut_div3_chunk_fu_66->ap_return_0(grp_lut_div3_chunk_fu_66_ap_return_0);
    grp_lut_div3_chunk_fu_66->ap_return_1(grp_lut_div3_chunk_fu_66_ap_return_1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_lut_div3_chunk_fu_66_ap_done );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_lut_div3_chunk_fu_66_ap_done );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_ap_return);
    sensitive << ( grp_lut_div3_chunk_fu_66_ap_done );
    sensitive << ( q_chunk_V_reg_226 );
    sensitive << ( q_chunk_V_1_reg_231 );
    sensitive << ( q_chunk_V_2_reg_236 );
    sensitive << ( q_chunk_V_3_reg_241 );
    sensitive << ( q_chunk_V_4_reg_246 );
    sensitive << ( q_chunk_V_5_reg_251 );
    sensitive << ( q_chunk_V_6_reg_256 );
    sensitive << ( grp_lut_div3_chunk_fu_66_ap_return_0 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_d_chunk_V_7_fu_169_p1);
    sensitive << ( in_r );

    SC_METHOD(thread_grp_lut_div3_chunk_fu_66_ap_start);
    sensitive << ( grp_lut_div3_chunk_fu_66_ap_start_reg );

    SC_METHOD(thread_grp_lut_div3_chunk_fu_66_d_V);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( d_chunk_V_reg_186 );
    sensitive << ( d_chunk_V_1_reg_191 );
    sensitive << ( d_chunk_V_2_reg_196 );
    sensitive << ( d_chunk_V_3_reg_201 );
    sensitive << ( d_chunk_V_4_reg_206 );
    sensitive << ( d_chunk_V_5_reg_211 );
    sensitive << ( d_chunk_V_6_reg_216 );
    sensitive << ( d_chunk_V_7_reg_221 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_grp_lut_div3_chunk_fu_66_r_in_V);
    sensitive << ( reg_93 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_lut_div3_chunk_fu_66_ap_done );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000000000000001";
    grp_lut_div3_chunk_fu_66_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "operator_int_div3_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_r, "(port)in_r");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_93, "reg_93");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_lut_div3_chunk_fu_66_ap_idle, "grp_lut_div3_chunk_fu_66_ap_idle");
    sc_trace(mVcdFile, grp_lut_div3_chunk_fu_66_ap_ready, "grp_lut_div3_chunk_fu_66_ap_ready");
    sc_trace(mVcdFile, grp_lut_div3_chunk_fu_66_ap_done, "grp_lut_div3_chunk_fu_66_ap_done");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, d_chunk_V_reg_186, "d_chunk_V_reg_186");
    sc_trace(mVcdFile, d_chunk_V_1_reg_191, "d_chunk_V_1_reg_191");
    sc_trace(mVcdFile, d_chunk_V_2_reg_196, "d_chunk_V_2_reg_196");
    sc_trace(mVcdFile, d_chunk_V_3_reg_201, "d_chunk_V_3_reg_201");
    sc_trace(mVcdFile, d_chunk_V_4_reg_206, "d_chunk_V_4_reg_206");
    sc_trace(mVcdFile, d_chunk_V_5_reg_211, "d_chunk_V_5_reg_211");
    sc_trace(mVcdFile, d_chunk_V_6_reg_216, "d_chunk_V_6_reg_216");
    sc_trace(mVcdFile, d_chunk_V_7_fu_169_p1, "d_chunk_V_7_fu_169_p1");
    sc_trace(mVcdFile, d_chunk_V_7_reg_221, "d_chunk_V_7_reg_221");
    sc_trace(mVcdFile, q_chunk_V_reg_226, "q_chunk_V_reg_226");
    sc_trace(mVcdFile, q_chunk_V_1_reg_231, "q_chunk_V_1_reg_231");
    sc_trace(mVcdFile, q_chunk_V_2_reg_236, "q_chunk_V_2_reg_236");
    sc_trace(mVcdFile, q_chunk_V_3_reg_241, "q_chunk_V_3_reg_241");
    sc_trace(mVcdFile, q_chunk_V_4_reg_246, "q_chunk_V_4_reg_246");
    sc_trace(mVcdFile, q_chunk_V_5_reg_251, "q_chunk_V_5_reg_251");
    sc_trace(mVcdFile, q_chunk_V_6_reg_256, "q_chunk_V_6_reg_256");
    sc_trace(mVcdFile, grp_lut_div3_chunk_fu_66_ap_start, "grp_lut_div3_chunk_fu_66_ap_start");
    sc_trace(mVcdFile, grp_lut_div3_chunk_fu_66_d_V, "grp_lut_div3_chunk_fu_66_d_V");
    sc_trace(mVcdFile, grp_lut_div3_chunk_fu_66_r_in_V, "grp_lut_div3_chunk_fu_66_r_in_V");
    sc_trace(mVcdFile, grp_lut_div3_chunk_fu_66_ap_return_0, "grp_lut_div3_chunk_fu_66_ap_return_0");
    sc_trace(mVcdFile, grp_lut_div3_chunk_fu_66_ap_return_1, "grp_lut_div3_chunk_fu_66_ap_return_1");
    sc_trace(mVcdFile, grp_lut_div3_chunk_fu_66_ap_start_reg, "grp_lut_div3_chunk_fu_66_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("operator_int_div3.hdltvin.dat");
    mHdltvoutHandle.open("operator_int_div3.hdltvout.dat");
}

operator_int_div3::~operator_int_div3() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_lut_div3_chunk_fu_66;
}

void operator_int_div3::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_lut_div3_chunk_fu_66_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
            grp_lut_div3_chunk_fu_66_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_lut_div3_chunk_fu_66_ap_ready.read())) {
            grp_lut_div3_chunk_fu_66_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        d_chunk_V_1_reg_191 = in_r.read().range(27, 24);
        d_chunk_V_2_reg_196 = in_r.read().range(23, 20);
        d_chunk_V_3_reg_201 = in_r.read().range(19, 16);
        d_chunk_V_4_reg_206 = in_r.read().range(15, 12);
        d_chunk_V_5_reg_211 = in_r.read().range(11, 8);
        d_chunk_V_6_reg_216 = in_r.read().range(7, 4);
        d_chunk_V_7_reg_221 = d_chunk_V_7_fu_169_p1.read();
        d_chunk_V_reg_186 = in_r.read().range(31, 28);
    }
    if ((esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        q_chunk_V_1_reg_231 = grp_lut_div3_chunk_fu_66_ap_return_0.read();
    }
    if ((esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        q_chunk_V_2_reg_236 = grp_lut_div3_chunk_fu_66_ap_return_0.read();
    }
    if ((esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        q_chunk_V_3_reg_241 = grp_lut_div3_chunk_fu_66_ap_return_0.read();
    }
    if ((esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        q_chunk_V_4_reg_246 = grp_lut_div3_chunk_fu_66_ap_return_0.read();
    }
    if ((esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        q_chunk_V_5_reg_251 = grp_lut_div3_chunk_fu_66_ap_return_0.read();
    }
    if ((esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        q_chunk_V_6_reg_256 = grp_lut_div3_chunk_fu_66_ap_return_0.read();
    }
    if ((esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        q_chunk_V_reg_226 = grp_lut_div3_chunk_fu_66_ap_return_0.read();
    }
    if (((esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) || (esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) || (esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || (esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) || (esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) || (esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) || (esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())))) {
        reg_93 = grp_lut_div3_chunk_fu_66_ap_return_1.read();
    }
}

void operator_int_div3::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void operator_int_div3::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void operator_int_div3::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void operator_int_div3::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void operator_int_div3::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void operator_int_div3::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void operator_int_div3::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void operator_int_div3::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void operator_int_div3::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void operator_int_div3::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void operator_int_div3::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void operator_int_div3::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void operator_int_div3::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void operator_int_div3::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void operator_int_div3::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void operator_int_div3::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void operator_int_div3::thread_ap_done() {
    if ((esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void operator_int_div3::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void operator_int_div3::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void operator_int_div3::thread_ap_return() {
    ap_return = esl_concat<28,4>(esl_concat<24,4>(esl_concat<20,4>(esl_concat<16,4>(esl_concat<12,4>(esl_concat<8,4>(esl_concat<4,4>(q_chunk_V_reg_226.read(), q_chunk_V_1_reg_231.read()), q_chunk_V_2_reg_236.read()), q_chunk_V_3_reg_241.read()), q_chunk_V_4_reg_246.read()), q_chunk_V_5_reg_251.read()), q_chunk_V_6_reg_256.read()), grp_lut_div3_chunk_fu_66_ap_return_0.read());
}

void operator_int_div3::thread_d_chunk_V_7_fu_169_p1() {
    d_chunk_V_7_fu_169_p1 = in_r.read().range(4-1, 0);
}

void operator_int_div3::thread_grp_lut_div3_chunk_fu_66_ap_start() {
    grp_lut_div3_chunk_fu_66_ap_start = grp_lut_div3_chunk_fu_66_ap_start_reg.read();
}

void operator_int_div3::thread_grp_lut_div3_chunk_fu_66_d_V() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        grp_lut_div3_chunk_fu_66_d_V = d_chunk_V_7_reg_221.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        grp_lut_div3_chunk_fu_66_d_V = d_chunk_V_6_reg_216.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_lut_div3_chunk_fu_66_d_V = d_chunk_V_5_reg_211.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_lut_div3_chunk_fu_66_d_V = d_chunk_V_4_reg_206.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_lut_div3_chunk_fu_66_d_V = d_chunk_V_3_reg_201.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_lut_div3_chunk_fu_66_d_V = d_chunk_V_2_reg_196.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_lut_div3_chunk_fu_66_d_V = d_chunk_V_1_reg_191.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_lut_div3_chunk_fu_66_d_V = d_chunk_V_reg_186.read();
    } else {
        grp_lut_div3_chunk_fu_66_d_V = "XXXX";
    }
}

void operator_int_div3::thread_grp_lut_div3_chunk_fu_66_r_in_V() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        grp_lut_div3_chunk_fu_66_r_in_V = reg_93.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_lut_div3_chunk_fu_66_r_in_V = ap_const_lv2_0;
    } else {
        grp_lut_div3_chunk_fu_66_r_in_V =  (sc_lv<2>) ("XX");
    }
}

void operator_int_div3::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(grp_lut_div3_chunk_fu_66_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
            break;
    }
}

void operator_int_div3::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r\" :  \"" << in_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

