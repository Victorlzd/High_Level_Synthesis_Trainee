

================================================================
== Vivado HLS Report for 'operator_long_div6'
================================================================
* Date:           Fri Aug 31 16:57:02 2018

* Version:        2018.2 (Build 2258646 on Thu Jun 14 20:25:20 MDT 2018)
* Project:        operator_long_div
* Solution:       div6
* Product family: kintex7
* Target device:  xc7k160tfbg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   2.50|     1.595|        0.31|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |   47|   47|   47|   47|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 32
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.59>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%in_read = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %in_r) nounwind"   --->   Operation 33 'read' 'in_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%p_Result_i = call i3 @_ssdm_op_PartSelect.i3.i64.i32.i32(i64 %in_read, i32 61, i32 63)" [test.cpp:235->test.cpp:287]   --->   Operation 34 'partselect' 'p_Result_i' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%d_chunk_V = zext i3 %p_Result_i to i4" [test.cpp:235->test.cpp:287]   --->   Operation 35 'zext' 'd_chunk_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [2/2] (1.59ns)   --->   "%call_ret1_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V, i2 0) nounwind" [test.cpp:236->test.cpp:287]   --->   Operation 36 'call' 'call_ret1_i' <Predicate = true> <Delay = 1.59> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%d_chunk_V_1 = call i4 @_ssdm_op_PartSelect.i4.i64.i32.i32(i64 %in_read, i32 57, i32 60)" [test.cpp:238->test.cpp:287]   --->   Operation 37 'partselect' 'd_chunk_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "%d_chunk_V_2 = call i4 @_ssdm_op_PartSelect.i4.i64.i32.i32(i64 %in_read, i32 53, i32 56)" [test.cpp:241->test.cpp:287]   --->   Operation 38 'partselect' 'd_chunk_V_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "%d_chunk_V_3 = call i4 @_ssdm_op_PartSelect.i4.i64.i32.i32(i64 %in_read, i32 49, i32 52)" [test.cpp:244->test.cpp:287]   --->   Operation 39 'partselect' 'd_chunk_V_3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "%d_chunk_V_4 = call i4 @_ssdm_op_PartSelect.i4.i64.i32.i32(i64 %in_read, i32 45, i32 48)" [test.cpp:247->test.cpp:287]   --->   Operation 40 'partselect' 'd_chunk_V_4' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.00ns)   --->   "%d_chunk_V_5 = call i4 @_ssdm_op_PartSelect.i4.i64.i32.i32(i64 %in_read, i32 41, i32 44)" [test.cpp:250->test.cpp:287]   --->   Operation 41 'partselect' 'd_chunk_V_5' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 42 [1/1] (0.00ns)   --->   "%d_chunk_V_6 = call i4 @_ssdm_op_PartSelect.i4.i64.i32.i32(i64 %in_read, i32 37, i32 40)" [test.cpp:253->test.cpp:287]   --->   Operation 42 'partselect' 'd_chunk_V_6' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 43 [1/1] (0.00ns)   --->   "%d_chunk_V_7 = call i4 @_ssdm_op_PartSelect.i4.i64.i32.i32(i64 %in_read, i32 33, i32 36)" [test.cpp:256->test.cpp:287]   --->   Operation 43 'partselect' 'd_chunk_V_7' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 44 [1/1] (0.00ns)   --->   "%d_chunk_V_8 = call i4 @_ssdm_op_PartSelect.i4.i64.i32.i32(i64 %in_read, i32 29, i32 32)" [test.cpp:259->test.cpp:287]   --->   Operation 44 'partselect' 'd_chunk_V_8' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 45 [1/1] (0.00ns)   --->   "%d_chunk_V_9 = call i4 @_ssdm_op_PartSelect.i4.i64.i32.i32(i64 %in_read, i32 25, i32 28)" [test.cpp:262->test.cpp:287]   --->   Operation 45 'partselect' 'd_chunk_V_9' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 46 [1/1] (0.00ns)   --->   "%d_chunk_V_10 = call i4 @_ssdm_op_PartSelect.i4.i64.i32.i32(i64 %in_read, i32 21, i32 24)" [test.cpp:265->test.cpp:287]   --->   Operation 46 'partselect' 'd_chunk_V_10' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 47 [1/1] (0.00ns)   --->   "%d_chunk_V_11 = call i4 @_ssdm_op_PartSelect.i4.i64.i32.i32(i64 %in_read, i32 17, i32 20)" [test.cpp:268->test.cpp:287]   --->   Operation 47 'partselect' 'd_chunk_V_11' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 48 [1/1] (0.00ns)   --->   "%d_chunk_V_12 = call i4 @_ssdm_op_PartSelect.i4.i64.i32.i32(i64 %in_read, i32 13, i32 16)" [test.cpp:271->test.cpp:287]   --->   Operation 48 'partselect' 'd_chunk_V_12' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 49 [1/1] (0.00ns)   --->   "%d_chunk_V_13 = call i4 @_ssdm_op_PartSelect.i4.i64.i32.i32(i64 %in_read, i32 9, i32 12)" [test.cpp:274->test.cpp:287]   --->   Operation 49 'partselect' 'd_chunk_V_13' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 50 [1/1] (0.00ns)   --->   "%d_chunk_V_14 = call i4 @_ssdm_op_PartSelect.i4.i64.i32.i32(i64 %in_read, i32 5, i32 8)" [test.cpp:277->test.cpp:287]   --->   Operation 50 'partselect' 'd_chunk_V_14' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 51 [1/1] (0.00ns)   --->   "%d_chunk_V_15 = call i4 @_ssdm_op_PartSelect.i4.i64.i32.i32(i64 %in_read, i32 1, i32 4)" [test.cpp:280->test.cpp:287]   --->   Operation 51 'partselect' 'd_chunk_V_15' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 1.33>
ST_2 : Operation 52 [1/2] (1.33ns)   --->   "%call_ret1_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V, i2 0) nounwind" [test.cpp:236->test.cpp:287]   --->   Operation 52 'call' 'call_ret1_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 53 [1/1] (0.00ns)   --->   "%q_chunk_V_16 = extractvalue { i4, i2 } %call_ret1_i, 0" [test.cpp:236->test.cpp:287]   --->   Operation 53 'extractvalue' 'q_chunk_V_16' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 54 [1/1] (0.00ns)   --->   "%r_V = extractvalue { i4, i2 } %call_ret1_i, 1" [test.cpp:236->test.cpp:287]   --->   Operation 54 'extractvalue' 'r_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 55 [1/1] (0.00ns)   --->   "%tmp = trunc i4 %q_chunk_V_16 to i3" [test.cpp:237->test.cpp:287]   --->   Operation 55 'trunc' 'tmp' <Predicate = true> <Delay = 0.00>

State 3 <SV = 2> <Delay = 1.59>
ST_3 : Operation 56 [2/2] (1.59ns)   --->   "%call_ret2_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_1, i2 %r_V) nounwind" [test.cpp:239->test.cpp:287]   --->   Operation 56 'call' 'call_ret2_i' <Predicate = true> <Delay = 1.59> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 4 <SV = 3> <Delay = 1.33>
ST_4 : Operation 57 [1/2] (1.33ns)   --->   "%call_ret2_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_1, i2 %r_V) nounwind" [test.cpp:239->test.cpp:287]   --->   Operation 57 'call' 'call_ret2_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_4 : Operation 58 [1/1] (0.00ns)   --->   "%q_chunk_V = extractvalue { i4, i2 } %call_ret2_i, 0" [test.cpp:239->test.cpp:287]   --->   Operation 58 'extractvalue' 'q_chunk_V' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 59 [1/1] (0.00ns)   --->   "%r_V_1 = extractvalue { i4, i2 } %call_ret2_i, 1" [test.cpp:239->test.cpp:287]   --->   Operation 59 'extractvalue' 'r_V_1' <Predicate = true> <Delay = 0.00>

State 5 <SV = 4> <Delay = 1.59>
ST_5 : Operation 60 [2/2] (1.59ns)   --->   "%call_ret3_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_2, i2 %r_V_1) nounwind" [test.cpp:242->test.cpp:287]   --->   Operation 60 'call' 'call_ret3_i' <Predicate = true> <Delay = 1.59> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 6 <SV = 5> <Delay = 1.33>
ST_6 : Operation 61 [1/2] (1.33ns)   --->   "%call_ret3_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_2, i2 %r_V_1) nounwind" [test.cpp:242->test.cpp:287]   --->   Operation 61 'call' 'call_ret3_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_6 : Operation 62 [1/1] (0.00ns)   --->   "%q_chunk_V_1 = extractvalue { i4, i2 } %call_ret3_i, 0" [test.cpp:242->test.cpp:287]   --->   Operation 62 'extractvalue' 'q_chunk_V_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 63 [1/1] (0.00ns)   --->   "%r_V_2 = extractvalue { i4, i2 } %call_ret3_i, 1" [test.cpp:242->test.cpp:287]   --->   Operation 63 'extractvalue' 'r_V_2' <Predicate = true> <Delay = 0.00>

State 7 <SV = 6> <Delay = 1.59>
ST_7 : Operation 64 [2/2] (1.59ns)   --->   "%call_ret4_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_3, i2 %r_V_2) nounwind" [test.cpp:245->test.cpp:287]   --->   Operation 64 'call' 'call_ret4_i' <Predicate = true> <Delay = 1.59> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 8 <SV = 7> <Delay = 1.33>
ST_8 : Operation 65 [1/2] (1.33ns)   --->   "%call_ret4_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_3, i2 %r_V_2) nounwind" [test.cpp:245->test.cpp:287]   --->   Operation 65 'call' 'call_ret4_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_8 : Operation 66 [1/1] (0.00ns)   --->   "%q_chunk_V_2 = extractvalue { i4, i2 } %call_ret4_i, 0" [test.cpp:245->test.cpp:287]   --->   Operation 66 'extractvalue' 'q_chunk_V_2' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 67 [1/1] (0.00ns)   --->   "%r_V_3 = extractvalue { i4, i2 } %call_ret4_i, 1" [test.cpp:245->test.cpp:287]   --->   Operation 67 'extractvalue' 'r_V_3' <Predicate = true> <Delay = 0.00>

State 9 <SV = 8> <Delay = 1.59>
ST_9 : Operation 68 [2/2] (1.59ns)   --->   "%call_ret5_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_4, i2 %r_V_3) nounwind" [test.cpp:248->test.cpp:287]   --->   Operation 68 'call' 'call_ret5_i' <Predicate = true> <Delay = 1.59> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 10 <SV = 9> <Delay = 1.33>
ST_10 : Operation 69 [1/2] (1.33ns)   --->   "%call_ret5_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_4, i2 %r_V_3) nounwind" [test.cpp:248->test.cpp:287]   --->   Operation 69 'call' 'call_ret5_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_10 : Operation 70 [1/1] (0.00ns)   --->   "%q_chunk_V_3 = extractvalue { i4, i2 } %call_ret5_i, 0" [test.cpp:248->test.cpp:287]   --->   Operation 70 'extractvalue' 'q_chunk_V_3' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 71 [1/1] (0.00ns)   --->   "%r_V_4 = extractvalue { i4, i2 } %call_ret5_i, 1" [test.cpp:248->test.cpp:287]   --->   Operation 71 'extractvalue' 'r_V_4' <Predicate = true> <Delay = 0.00>

State 11 <SV = 10> <Delay = 1.59>
ST_11 : Operation 72 [2/2] (1.59ns)   --->   "%call_ret6_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_5, i2 %r_V_4) nounwind" [test.cpp:251->test.cpp:287]   --->   Operation 72 'call' 'call_ret6_i' <Predicate = true> <Delay = 1.59> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 12 <SV = 11> <Delay = 1.33>
ST_12 : Operation 73 [1/2] (1.33ns)   --->   "%call_ret6_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_5, i2 %r_V_4) nounwind" [test.cpp:251->test.cpp:287]   --->   Operation 73 'call' 'call_ret6_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_12 : Operation 74 [1/1] (0.00ns)   --->   "%q_chunk_V_4 = extractvalue { i4, i2 } %call_ret6_i, 0" [test.cpp:251->test.cpp:287]   --->   Operation 74 'extractvalue' 'q_chunk_V_4' <Predicate = true> <Delay = 0.00>
ST_12 : Operation 75 [1/1] (0.00ns)   --->   "%r_V_5 = extractvalue { i4, i2 } %call_ret6_i, 1" [test.cpp:251->test.cpp:287]   --->   Operation 75 'extractvalue' 'r_V_5' <Predicate = true> <Delay = 0.00>

State 13 <SV = 12> <Delay = 1.59>
ST_13 : Operation 76 [2/2] (1.59ns)   --->   "%call_ret7_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_6, i2 %r_V_5) nounwind" [test.cpp:254->test.cpp:287]   --->   Operation 76 'call' 'call_ret7_i' <Predicate = true> <Delay = 1.59> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 14 <SV = 13> <Delay = 1.33>
ST_14 : Operation 77 [1/2] (1.33ns)   --->   "%call_ret7_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_6, i2 %r_V_5) nounwind" [test.cpp:254->test.cpp:287]   --->   Operation 77 'call' 'call_ret7_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_14 : Operation 78 [1/1] (0.00ns)   --->   "%q_chunk_V_5 = extractvalue { i4, i2 } %call_ret7_i, 0" [test.cpp:254->test.cpp:287]   --->   Operation 78 'extractvalue' 'q_chunk_V_5' <Predicate = true> <Delay = 0.00>
ST_14 : Operation 79 [1/1] (0.00ns)   --->   "%r_V_6 = extractvalue { i4, i2 } %call_ret7_i, 1" [test.cpp:254->test.cpp:287]   --->   Operation 79 'extractvalue' 'r_V_6' <Predicate = true> <Delay = 0.00>

State 15 <SV = 14> <Delay = 1.59>
ST_15 : Operation 80 [2/2] (1.59ns)   --->   "%call_ret8_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_7, i2 %r_V_6) nounwind" [test.cpp:257->test.cpp:287]   --->   Operation 80 'call' 'call_ret8_i' <Predicate = true> <Delay = 1.59> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 16 <SV = 15> <Delay = 1.33>
ST_16 : Operation 81 [1/2] (1.33ns)   --->   "%call_ret8_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_7, i2 %r_V_6) nounwind" [test.cpp:257->test.cpp:287]   --->   Operation 81 'call' 'call_ret8_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_16 : Operation 82 [1/1] (0.00ns)   --->   "%q_chunk_V_6 = extractvalue { i4, i2 } %call_ret8_i, 0" [test.cpp:257->test.cpp:287]   --->   Operation 82 'extractvalue' 'q_chunk_V_6' <Predicate = true> <Delay = 0.00>
ST_16 : Operation 83 [1/1] (0.00ns)   --->   "%r_V_7 = extractvalue { i4, i2 } %call_ret8_i, 1" [test.cpp:257->test.cpp:287]   --->   Operation 83 'extractvalue' 'r_V_7' <Predicate = true> <Delay = 0.00>

State 17 <SV = 16> <Delay = 1.59>
ST_17 : Operation 84 [2/2] (1.59ns)   --->   "%call_ret9_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_8, i2 %r_V_7) nounwind" [test.cpp:260->test.cpp:287]   --->   Operation 84 'call' 'call_ret9_i' <Predicate = true> <Delay = 1.59> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 18 <SV = 17> <Delay = 1.33>
ST_18 : Operation 85 [1/2] (1.33ns)   --->   "%call_ret9_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_8, i2 %r_V_7) nounwind" [test.cpp:260->test.cpp:287]   --->   Operation 85 'call' 'call_ret9_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_18 : Operation 86 [1/1] (0.00ns)   --->   "%q_chunk_V_7 = extractvalue { i4, i2 } %call_ret9_i, 0" [test.cpp:260->test.cpp:287]   --->   Operation 86 'extractvalue' 'q_chunk_V_7' <Predicate = true> <Delay = 0.00>
ST_18 : Operation 87 [1/1] (0.00ns)   --->   "%r_V_8 = extractvalue { i4, i2 } %call_ret9_i, 1" [test.cpp:260->test.cpp:287]   --->   Operation 87 'extractvalue' 'r_V_8' <Predicate = true> <Delay = 0.00>

State 19 <SV = 18> <Delay = 1.59>
ST_19 : Operation 88 [2/2] (1.59ns)   --->   "%call_ret10_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_9, i2 %r_V_8) nounwind" [test.cpp:263->test.cpp:287]   --->   Operation 88 'call' 'call_ret10_i' <Predicate = true> <Delay = 1.59> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 20 <SV = 19> <Delay = 1.33>
ST_20 : Operation 89 [1/2] (1.33ns)   --->   "%call_ret10_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_9, i2 %r_V_8) nounwind" [test.cpp:263->test.cpp:287]   --->   Operation 89 'call' 'call_ret10_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_20 : Operation 90 [1/1] (0.00ns)   --->   "%q_chunk_V_8 = extractvalue { i4, i2 } %call_ret10_i, 0" [test.cpp:263->test.cpp:287]   --->   Operation 90 'extractvalue' 'q_chunk_V_8' <Predicate = true> <Delay = 0.00>
ST_20 : Operation 91 [1/1] (0.00ns)   --->   "%r_V_9 = extractvalue { i4, i2 } %call_ret10_i, 1" [test.cpp:263->test.cpp:287]   --->   Operation 91 'extractvalue' 'r_V_9' <Predicate = true> <Delay = 0.00>

State 21 <SV = 20> <Delay = 1.59>
ST_21 : Operation 92 [2/2] (1.59ns)   --->   "%call_ret11_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_10, i2 %r_V_9) nounwind" [test.cpp:266->test.cpp:287]   --->   Operation 92 'call' 'call_ret11_i' <Predicate = true> <Delay = 1.59> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 22 <SV = 21> <Delay = 1.33>
ST_22 : Operation 93 [1/2] (1.33ns)   --->   "%call_ret11_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_10, i2 %r_V_9) nounwind" [test.cpp:266->test.cpp:287]   --->   Operation 93 'call' 'call_ret11_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_22 : Operation 94 [1/1] (0.00ns)   --->   "%q_chunk_V_9 = extractvalue { i4, i2 } %call_ret11_i, 0" [test.cpp:266->test.cpp:287]   --->   Operation 94 'extractvalue' 'q_chunk_V_9' <Predicate = true> <Delay = 0.00>
ST_22 : Operation 95 [1/1] (0.00ns)   --->   "%r_V_10 = extractvalue { i4, i2 } %call_ret11_i, 1" [test.cpp:266->test.cpp:287]   --->   Operation 95 'extractvalue' 'r_V_10' <Predicate = true> <Delay = 0.00>

State 23 <SV = 22> <Delay = 1.59>
ST_23 : Operation 96 [2/2] (1.59ns)   --->   "%call_ret12_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_11, i2 %r_V_10) nounwind" [test.cpp:269->test.cpp:287]   --->   Operation 96 'call' 'call_ret12_i' <Predicate = true> <Delay = 1.59> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 24 <SV = 23> <Delay = 1.33>
ST_24 : Operation 97 [1/2] (1.33ns)   --->   "%call_ret12_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_11, i2 %r_V_10) nounwind" [test.cpp:269->test.cpp:287]   --->   Operation 97 'call' 'call_ret12_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_24 : Operation 98 [1/1] (0.00ns)   --->   "%q_chunk_V_11 = extractvalue { i4, i2 } %call_ret12_i, 0" [test.cpp:269->test.cpp:287]   --->   Operation 98 'extractvalue' 'q_chunk_V_11' <Predicate = true> <Delay = 0.00>
ST_24 : Operation 99 [1/1] (0.00ns)   --->   "%r_V_11 = extractvalue { i4, i2 } %call_ret12_i, 1" [test.cpp:269->test.cpp:287]   --->   Operation 99 'extractvalue' 'r_V_11' <Predicate = true> <Delay = 0.00>

State 25 <SV = 24> <Delay = 1.59>
ST_25 : Operation 100 [2/2] (1.59ns)   --->   "%call_ret13_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_12, i2 %r_V_11) nounwind" [test.cpp:272->test.cpp:287]   --->   Operation 100 'call' 'call_ret13_i' <Predicate = true> <Delay = 1.59> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 26 <SV = 25> <Delay = 1.33>
ST_26 : Operation 101 [1/2] (1.33ns)   --->   "%call_ret13_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_12, i2 %r_V_11) nounwind" [test.cpp:272->test.cpp:287]   --->   Operation 101 'call' 'call_ret13_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_26 : Operation 102 [1/1] (0.00ns)   --->   "%q_chunk_V_12 = extractvalue { i4, i2 } %call_ret13_i, 0" [test.cpp:272->test.cpp:287]   --->   Operation 102 'extractvalue' 'q_chunk_V_12' <Predicate = true> <Delay = 0.00>
ST_26 : Operation 103 [1/1] (0.00ns)   --->   "%r_V_12 = extractvalue { i4, i2 } %call_ret13_i, 1" [test.cpp:272->test.cpp:287]   --->   Operation 103 'extractvalue' 'r_V_12' <Predicate = true> <Delay = 0.00>

State 27 <SV = 26> <Delay = 1.59>
ST_27 : Operation 104 [2/2] (1.59ns)   --->   "%call_ret14_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_13, i2 %r_V_12) nounwind" [test.cpp:275->test.cpp:287]   --->   Operation 104 'call' 'call_ret14_i' <Predicate = true> <Delay = 1.59> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 28 <SV = 27> <Delay = 1.33>
ST_28 : Operation 105 [1/2] (1.33ns)   --->   "%call_ret14_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_13, i2 %r_V_12) nounwind" [test.cpp:275->test.cpp:287]   --->   Operation 105 'call' 'call_ret14_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_28 : Operation 106 [1/1] (0.00ns)   --->   "%q_chunk_V_13 = extractvalue { i4, i2 } %call_ret14_i, 0" [test.cpp:275->test.cpp:287]   --->   Operation 106 'extractvalue' 'q_chunk_V_13' <Predicate = true> <Delay = 0.00>
ST_28 : Operation 107 [1/1] (0.00ns)   --->   "%r_V_13 = extractvalue { i4, i2 } %call_ret14_i, 1" [test.cpp:275->test.cpp:287]   --->   Operation 107 'extractvalue' 'r_V_13' <Predicate = true> <Delay = 0.00>

State 29 <SV = 28> <Delay = 1.59>
ST_29 : Operation 108 [2/2] (1.59ns)   --->   "%call_ret15_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_14, i2 %r_V_13) nounwind" [test.cpp:278->test.cpp:287]   --->   Operation 108 'call' 'call_ret15_i' <Predicate = true> <Delay = 1.59> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 30 <SV = 29> <Delay = 1.33>
ST_30 : Operation 109 [1/2] (1.33ns)   --->   "%call_ret15_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_14, i2 %r_V_13) nounwind" [test.cpp:278->test.cpp:287]   --->   Operation 109 'call' 'call_ret15_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_30 : Operation 110 [1/1] (0.00ns)   --->   "%q_chunk_V_14 = extractvalue { i4, i2 } %call_ret15_i, 0" [test.cpp:278->test.cpp:287]   --->   Operation 110 'extractvalue' 'q_chunk_V_14' <Predicate = true> <Delay = 0.00>
ST_30 : Operation 111 [1/1] (0.00ns)   --->   "%r_V_14 = extractvalue { i4, i2 } %call_ret15_i, 1" [test.cpp:278->test.cpp:287]   --->   Operation 111 'extractvalue' 'r_V_14' <Predicate = true> <Delay = 0.00>

State 31 <SV = 30> <Delay = 1.59>
ST_31 : Operation 112 [2/2] (1.59ns)   --->   "%call_ret_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_15, i2 %r_V_14) nounwind" [test.cpp:281->test.cpp:287]   --->   Operation 112 'call' 'call_ret_i' <Predicate = true> <Delay = 1.59> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 32 <SV = 31> <Delay = 1.33>
ST_32 : Operation 113 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i64 %in_r) nounwind, !map !126"   --->   Operation 113 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_32 : Operation 114 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i64 0) nounwind, !map !132"   --->   Operation 114 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_32 : Operation 115 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([19 x i8]* @operator_long_div6_s) nounwind"   --->   Operation 115 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_32 : Operation 116 [1/2] (1.33ns)   --->   "%call_ret_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_15, i2 %r_V_14) nounwind" [test.cpp:281->test.cpp:287]   --->   Operation 116 'call' 'call_ret_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_32 : Operation 117 [1/1] (0.00ns)   --->   "%q_chunk_V_15 = extractvalue { i4, i2 } %call_ret_i, 0" [test.cpp:281->test.cpp:287]   --->   Operation 117 'extractvalue' 'q_chunk_V_15' <Predicate = true> <Delay = 0.00>
ST_32 : Operation 118 [1/1] (0.00ns)   --->   "%p_Result_s = call i63 @_ssdm_op_BitConcatenate.i63.i3.i4.i4.i4.i4.i4.i4.i4.i4.i4.i4.i4.i4.i4.i4.i4(i3 %tmp, i4 %q_chunk_V, i4 %q_chunk_V_1, i4 %q_chunk_V_2, i4 %q_chunk_V_3, i4 %q_chunk_V_4, i4 %q_chunk_V_5, i4 %q_chunk_V_6, i4 %q_chunk_V_7, i4 %q_chunk_V_8, i4 %q_chunk_V_9, i4 %q_chunk_V_11, i4 %q_chunk_V_12, i4 %q_chunk_V_13, i4 %q_chunk_V_14, i4 %q_chunk_V_15) nounwind" [test.cpp:282->test.cpp:287]   --->   Operation 118 'bitconcatenate' 'p_Result_s' <Predicate = true> <Delay = 0.00>
ST_32 : Operation 119 [1/1] (0.00ns)   --->   "%tmp_1 = zext i63 %p_Result_s to i64" [test.cpp:287]   --->   Operation 119 'zext' 'tmp_1' <Predicate = true> <Delay = 0.00>
ST_32 : Operation 120 [1/1] (0.00ns)   --->   "ret i64 %tmp_1" [test.cpp:287]   --->   Operation 120 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 2.5ns, clock uncertainty: 0.312ns.

 <State 1>: 1.59ns
The critical path consists of the following:
	wire read on port 'in_r' [11]  (0 ns)
	'call' operation ('call_ret1_i', test.cpp:236->test.cpp:287) to 'lut_div3_chunk' [14]  (1.59 ns)

 <State 2>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret1_i', test.cpp:236->test.cpp:287) to 'lut_div3_chunk' [14]  (1.33 ns)

 <State 3>: 1.59ns
The critical path consists of the following:
	'call' operation ('call_ret2_i', test.cpp:239->test.cpp:287) to 'lut_div3_chunk' [19]  (1.59 ns)

 <State 4>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret2_i', test.cpp:239->test.cpp:287) to 'lut_div3_chunk' [19]  (1.33 ns)

 <State 5>: 1.59ns
The critical path consists of the following:
	'call' operation ('call_ret3_i', test.cpp:242->test.cpp:287) to 'lut_div3_chunk' [23]  (1.59 ns)

 <State 6>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret3_i', test.cpp:242->test.cpp:287) to 'lut_div3_chunk' [23]  (1.33 ns)

 <State 7>: 1.59ns
The critical path consists of the following:
	'call' operation ('call_ret4_i', test.cpp:245->test.cpp:287) to 'lut_div3_chunk' [27]  (1.59 ns)

 <State 8>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret4_i', test.cpp:245->test.cpp:287) to 'lut_div3_chunk' [27]  (1.33 ns)

 <State 9>: 1.59ns
The critical path consists of the following:
	'call' operation ('call_ret5_i', test.cpp:248->test.cpp:287) to 'lut_div3_chunk' [31]  (1.59 ns)

 <State 10>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret5_i', test.cpp:248->test.cpp:287) to 'lut_div3_chunk' [31]  (1.33 ns)

 <State 11>: 1.59ns
The critical path consists of the following:
	'call' operation ('call_ret6_i', test.cpp:251->test.cpp:287) to 'lut_div3_chunk' [35]  (1.59 ns)

 <State 12>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret6_i', test.cpp:251->test.cpp:287) to 'lut_div3_chunk' [35]  (1.33 ns)

 <State 13>: 1.59ns
The critical path consists of the following:
	'call' operation ('call_ret7_i', test.cpp:254->test.cpp:287) to 'lut_div3_chunk' [39]  (1.59 ns)

 <State 14>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret7_i', test.cpp:254->test.cpp:287) to 'lut_div3_chunk' [39]  (1.33 ns)

 <State 15>: 1.59ns
The critical path consists of the following:
	'call' operation ('call_ret8_i', test.cpp:257->test.cpp:287) to 'lut_div3_chunk' [43]  (1.59 ns)

 <State 16>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret8_i', test.cpp:257->test.cpp:287) to 'lut_div3_chunk' [43]  (1.33 ns)

 <State 17>: 1.59ns
The critical path consists of the following:
	'call' operation ('call_ret9_i', test.cpp:260->test.cpp:287) to 'lut_div3_chunk' [47]  (1.59 ns)

 <State 18>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret9_i', test.cpp:260->test.cpp:287) to 'lut_div3_chunk' [47]  (1.33 ns)

 <State 19>: 1.59ns
The critical path consists of the following:
	'call' operation ('call_ret10_i', test.cpp:263->test.cpp:287) to 'lut_div3_chunk' [51]  (1.59 ns)

 <State 20>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret10_i', test.cpp:263->test.cpp:287) to 'lut_div3_chunk' [51]  (1.33 ns)

 <State 21>: 1.59ns
The critical path consists of the following:
	'call' operation ('call_ret11_i', test.cpp:266->test.cpp:287) to 'lut_div3_chunk' [55]  (1.59 ns)

 <State 22>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret11_i', test.cpp:266->test.cpp:287) to 'lut_div3_chunk' [55]  (1.33 ns)

 <State 23>: 1.59ns
The critical path consists of the following:
	'call' operation ('call_ret12_i', test.cpp:269->test.cpp:287) to 'lut_div3_chunk' [59]  (1.59 ns)

 <State 24>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret12_i', test.cpp:269->test.cpp:287) to 'lut_div3_chunk' [59]  (1.33 ns)

 <State 25>: 1.59ns
The critical path consists of the following:
	'call' operation ('call_ret13_i', test.cpp:272->test.cpp:287) to 'lut_div3_chunk' [63]  (1.59 ns)

 <State 26>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret13_i', test.cpp:272->test.cpp:287) to 'lut_div3_chunk' [63]  (1.33 ns)

 <State 27>: 1.59ns
The critical path consists of the following:
	'call' operation ('call_ret14_i', test.cpp:275->test.cpp:287) to 'lut_div3_chunk' [67]  (1.59 ns)

 <State 28>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret14_i', test.cpp:275->test.cpp:287) to 'lut_div3_chunk' [67]  (1.33 ns)

 <State 29>: 1.59ns
The critical path consists of the following:
	'call' operation ('call_ret15_i', test.cpp:278->test.cpp:287) to 'lut_div3_chunk' [71]  (1.59 ns)

 <State 30>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret15_i', test.cpp:278->test.cpp:287) to 'lut_div3_chunk' [71]  (1.33 ns)

 <State 31>: 1.59ns
The critical path consists of the following:
	'call' operation ('call_ret_i', test.cpp:281->test.cpp:287) to 'lut_div3_chunk' [75]  (1.59 ns)

 <State 32>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret_i', test.cpp:281->test.cpp:287) to 'lut_div3_chunk' [75]  (1.33 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
