// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _div_HH_
#define _div_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "div_mul_64s_66ns_bkb.h"
#include "div_sub_129ns_129cud.h"

namespace ap_rtl {

struct div : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<64> > a;
    sc_out< sc_lv<64> > ap_return;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<129> > ap_var_for_const1;


    // Module declarations
    div(sc_module_name name);
    SC_HAS_PROCESS(div);

    ~div();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    div_mul_64s_66ns_bkb<1,19,64,66,129>* div_mul_64s_66ns_bkb_U1;
    div_sub_129ns_129cud<1,2,129,129,129>* div_sub_129ns_129cud_U2;
    sc_signal< sc_lv<23> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > tmp_4_reg_104;
    sc_signal< sc_lv<129> > grp_fu_36_p2;
    sc_signal< sc_lv<129> > mul_reg_110;
    sc_signal< sc_logic > ap_CS_fsm_state19;
    sc_signal< sc_lv<63> > tmp_6_reg_115;
    sc_signal< sc_lv<129> > grp_fu_60_p2;
    sc_signal< sc_lv<129> > neg_mul_reg_120;
    sc_signal< sc_logic > ap_CS_fsm_state21;
    sc_signal< sc_lv<64> > tmp_2_fu_78_p1;
    sc_signal< sc_lv<64> > tmp_2_reg_125;
    sc_signal< sc_logic > ap_CS_fsm_state22;
    sc_signal< sc_lv<64> > neg_ti_fu_88_p2;
    sc_signal< sc_lv<64> > neg_ti_reg_130;
    sc_signal< sc_lv<66> > grp_fu_36_p1;
    sc_signal< sc_lv<64> > tmp_4_fu_42_p1;
    sc_signal< sc_logic > ap_CS_fsm_state20;
    sc_signal< sc_lv<63> > tmp_5_fu_65_p4;
    sc_signal< sc_lv<64> > tmp_1_fu_74_p1;
    sc_signal< sc_lv<64> > tmp_3_fu_81_p3;
    sc_signal< sc_logic > ap_CS_fsm_state23;
    sc_signal< sc_lv<23> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<23> ap_ST_fsm_state1;
    static const sc_lv<23> ap_ST_fsm_state2;
    static const sc_lv<23> ap_ST_fsm_state3;
    static const sc_lv<23> ap_ST_fsm_state4;
    static const sc_lv<23> ap_ST_fsm_state5;
    static const sc_lv<23> ap_ST_fsm_state6;
    static const sc_lv<23> ap_ST_fsm_state7;
    static const sc_lv<23> ap_ST_fsm_state8;
    static const sc_lv<23> ap_ST_fsm_state9;
    static const sc_lv<23> ap_ST_fsm_state10;
    static const sc_lv<23> ap_ST_fsm_state11;
    static const sc_lv<23> ap_ST_fsm_state12;
    static const sc_lv<23> ap_ST_fsm_state13;
    static const sc_lv<23> ap_ST_fsm_state14;
    static const sc_lv<23> ap_ST_fsm_state15;
    static const sc_lv<23> ap_ST_fsm_state16;
    static const sc_lv<23> ap_ST_fsm_state17;
    static const sc_lv<23> ap_ST_fsm_state18;
    static const sc_lv<23> ap_ST_fsm_state19;
    static const sc_lv<23> ap_ST_fsm_state20;
    static const sc_lv<23> ap_ST_fsm_state21;
    static const sc_lv<23> ap_ST_fsm_state22;
    static const sc_lv<23> ap_ST_fsm_state23;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_15;
    static const sc_lv<129> ap_const_lv129_lc_1;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<32> ap_const_lv32_42;
    static const sc_lv<32> ap_const_lv32_80;
    static const sc_lv<129> ap_const_lv129_lc_2;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<32> ap_const_lv32_16;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state19();
    void thread_ap_CS_fsm_state20();
    void thread_ap_CS_fsm_state21();
    void thread_ap_CS_fsm_state22();
    void thread_ap_CS_fsm_state23();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_grp_fu_36_p1();
    void thread_neg_ti_fu_88_p2();
    void thread_tmp_1_fu_74_p1();
    void thread_tmp_2_fu_78_p1();
    void thread_tmp_3_fu_81_p3();
    void thread_tmp_4_fu_42_p1();
    void thread_tmp_5_fu_65_p4();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
