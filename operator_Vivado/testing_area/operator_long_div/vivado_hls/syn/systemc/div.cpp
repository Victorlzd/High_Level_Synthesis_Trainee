// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "div.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic div::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic div::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<23> div::ap_ST_fsm_state1 = "1";
const sc_lv<23> div::ap_ST_fsm_state2 = "10";
const sc_lv<23> div::ap_ST_fsm_state3 = "100";
const sc_lv<23> div::ap_ST_fsm_state4 = "1000";
const sc_lv<23> div::ap_ST_fsm_state5 = "10000";
const sc_lv<23> div::ap_ST_fsm_state6 = "100000";
const sc_lv<23> div::ap_ST_fsm_state7 = "1000000";
const sc_lv<23> div::ap_ST_fsm_state8 = "10000000";
const sc_lv<23> div::ap_ST_fsm_state9 = "100000000";
const sc_lv<23> div::ap_ST_fsm_state10 = "1000000000";
const sc_lv<23> div::ap_ST_fsm_state11 = "10000000000";
const sc_lv<23> div::ap_ST_fsm_state12 = "100000000000";
const sc_lv<23> div::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<23> div::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<23> div::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<23> div::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<23> div::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<23> div::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<23> div::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<23> div::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<23> div::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<23> div::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<23> div::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<32> div::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> div::ap_const_lv32_12 = "10010";
const sc_lv<32> div::ap_const_lv32_14 = "10100";
const sc_lv<1> div::ap_const_lv1_1 = "1";
const sc_lv<32> div::ap_const_lv32_15 = "10101";
const sc_lv<129> div::ap_const_lv129_lc_1 = "10101010101010101010101010101010101010101010101010101010101010110";
const sc_lv<32> div::ap_const_lv32_3F = "111111";
const sc_lv<32> div::ap_const_lv32_42 = "1000010";
const sc_lv<32> div::ap_const_lv32_80 = "10000000";
const sc_lv<129> div::ap_const_lv129_lc_2 = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> div::ap_const_lv32_13 = "10011";
const sc_lv<64> div::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> div::ap_const_lv32_16 = "10110";
const bool div::ap_const_boolean_1 = true;

div::div(sc_module_name name) : sc_module(name), mVcdFile(0) {
    div_mul_64s_66ns_bkb_U1 = new div_mul_64s_66ns_bkb<1,19,64,66,129>("div_mul_64s_66ns_bkb_U1");
    div_mul_64s_66ns_bkb_U1->clk(ap_clk);
    div_mul_64s_66ns_bkb_U1->reset(ap_rst);
    div_mul_64s_66ns_bkb_U1->din0(a);
    div_mul_64s_66ns_bkb_U1->din1(grp_fu_36_p1);
    div_mul_64s_66ns_bkb_U1->ce(ap_var_for_const0);
    div_mul_64s_66ns_bkb_U1->dout(grp_fu_36_p2);
    div_sub_129ns_129cud_U2 = new div_sub_129ns_129cud<1,2,129,129,129>("div_sub_129ns_129cud_U2");
    div_sub_129ns_129cud_U2->clk(ap_clk);
    div_sub_129ns_129cud_U2->reset(ap_rst);
    div_sub_129ns_129cud_U2->din0(ap_var_for_const1);
    div_sub_129ns_129cud_U2->din1(mul_reg_110);
    div_sub_129ns_129cud_U2->ce(ap_var_for_const0);
    div_sub_129ns_129cud_U2->dout(grp_fu_60_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_ap_return);
    sensitive << ( tmp_4_reg_104 );
    sensitive << ( tmp_2_reg_125 );
    sensitive << ( neg_ti_reg_130 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_grp_fu_36_p1);
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_neg_ti_fu_88_p2);
    sensitive << ( tmp_3_fu_81_p3 );

    SC_METHOD(thread_tmp_1_fu_74_p1);
    sensitive << ( tmp_5_fu_65_p4 );

    SC_METHOD(thread_tmp_2_fu_78_p1);
    sensitive << ( tmp_6_reg_115 );

    SC_METHOD(thread_tmp_3_fu_81_p3);
    sensitive << ( tmp_4_reg_104 );
    sensitive << ( tmp_2_fu_78_p1 );
    sensitive << ( tmp_1_fu_74_p1 );

    SC_METHOD(thread_tmp_4_fu_42_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( a );

    SC_METHOD(thread_tmp_5_fu_65_p4);
    sensitive << ( neg_mul_reg_120 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "00000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "div_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a, "(port)a");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_4_reg_104, "tmp_4_reg_104");
    sc_trace(mVcdFile, grp_fu_36_p2, "grp_fu_36_p2");
    sc_trace(mVcdFile, mul_reg_110, "mul_reg_110");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, tmp_6_reg_115, "tmp_6_reg_115");
    sc_trace(mVcdFile, grp_fu_60_p2, "grp_fu_60_p2");
    sc_trace(mVcdFile, neg_mul_reg_120, "neg_mul_reg_120");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, tmp_2_fu_78_p1, "tmp_2_fu_78_p1");
    sc_trace(mVcdFile, tmp_2_reg_125, "tmp_2_reg_125");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, neg_ti_fu_88_p2, "neg_ti_fu_88_p2");
    sc_trace(mVcdFile, neg_ti_reg_130, "neg_ti_reg_130");
    sc_trace(mVcdFile, grp_fu_36_p1, "grp_fu_36_p1");
    sc_trace(mVcdFile, tmp_4_fu_42_p1, "tmp_4_fu_42_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, tmp_5_fu_65_p4, "tmp_5_fu_65_p4");
    sc_trace(mVcdFile, tmp_1_fu_74_p1, "tmp_1_fu_74_p1");
    sc_trace(mVcdFile, tmp_3_fu_81_p3, "tmp_3_fu_81_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("div.hdltvin.dat");
    mHdltvoutHandle.open("div.hdltvout.dat");
}

div::~div() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete div_mul_64s_66ns_bkb_U1;
    delete div_sub_129ns_129cud_U2;
}

void div::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void div::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv129_lc_2;
}

void div::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        mul_reg_110 = grp_fu_36_p2.read();
        tmp_6_reg_115 = grp_fu_36_p2.read().range(128, 66);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && esl_seteq<1,1,1>(tmp_4_reg_104.read(), ap_const_lv1_1))) {
        neg_mul_reg_120 = grp_fu_60_p2.read();
    }
    if ((esl_seteq<1,1,1>(tmp_4_reg_104.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        neg_ti_reg_130 = neg_ti_fu_88_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        tmp_2_reg_125 = tmp_2_fu_78_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        tmp_4_reg_104 = tmp_4_fu_42_p1.read().range(63, 63);
    }
}

void div::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void div::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void div::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void div::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void div::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void div::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void div::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void div::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void div::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void div::thread_ap_return() {
    ap_return = (!tmp_4_reg_104.read()[0].is_01())? sc_lv<64>(): ((tmp_4_reg_104.read()[0].to_bool())? neg_ti_reg_130.read(): tmp_2_reg_125.read());
}

void div::thread_grp_fu_36_p1() {
    grp_fu_36_p1 =  (sc_lv<66>) (ap_const_lv129_lc_1);
}

void div::thread_neg_ti_fu_88_p2() {
    neg_ti_fu_88_p2 = (!ap_const_lv64_0.is_01() || !tmp_3_fu_81_p3.read().is_01())? sc_lv<64>(): (sc_biguint<64>(ap_const_lv64_0) - sc_biguint<64>(tmp_3_fu_81_p3.read()));
}

void div::thread_tmp_1_fu_74_p1() {
    tmp_1_fu_74_p1 = esl_sext<64,63>(tmp_5_fu_65_p4.read());
}

void div::thread_tmp_2_fu_78_p1() {
    tmp_2_fu_78_p1 = esl_sext<64,63>(tmp_6_reg_115.read());
}

void div::thread_tmp_3_fu_81_p3() {
    tmp_3_fu_81_p3 = (!tmp_4_reg_104.read()[0].is_01())? sc_lv<64>(): ((tmp_4_reg_104.read()[0].to_bool())? tmp_1_fu_74_p1.read(): tmp_2_fu_78_p1.read());
}

void div::thread_tmp_4_fu_42_p1() {
    tmp_4_fu_42_p1 = a.read();
}

void div::thread_tmp_5_fu_65_p4() {
    tmp_5_fu_65_p4 = neg_mul_reg_120.read().range(128, 66);
}

void div::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXXXXXXXX";
            break;
    }
}

void div::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a\" :  \"" << a.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

