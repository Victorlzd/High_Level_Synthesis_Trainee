

================================================================
== Vivado HLS Report for 'operator_float_div9'
================================================================
* Date:           Fri Aug 31 16:05:13 2018

* Version:        2018.2 (Build 2258646 on Thu Jun 14 20:25:20 MDT 2018)
* Project:        operator_float_div
* Solution:       div9
* Product family: kintex7
* Target device:  xc7k160tfbg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   2.50|     2.132|        0.31|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |   50|   50|   50|   50|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 37
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.18>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "%in_read = call float @_ssdm_op_Read.ap_auto.float(float %in_r) nounwind"   --->   Operation 38 'read' 'in_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "%p_Val2_s = bitcast float %in_read to i32" [test.cpp:63->test.cpp:701]   --->   Operation 39 'bitcast' 'p_Val2_s' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "%p_Repl2_2 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_s, i32 31)" [test.cpp:64->test.cpp:701]   --->   Operation 40 'bitselect' 'p_Repl2_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.00ns)   --->   "%new_exp_V = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %p_Val2_s, i32 23, i32 30) nounwind" [test.cpp:65->test.cpp:701]   --->   Operation 41 'partselect' 'new_exp_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 42 [1/1] (0.00ns)   --->   "%new_mant_V_1 = trunc i32 %p_Val2_s to i23" [test.cpp:66->test.cpp:701]   --->   Operation 42 'trunc' 'new_mant_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 43 [1/1] (0.00ns)   --->   "%tmp = call i3 @_ssdm_op_PartSelect.i3.i32.i32.i32(i32 %p_Val2_s, i32 20, i32 22)" [test.cpp:707]   --->   Operation 43 'partselect' 'tmp' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 44 [1/1] (0.86ns)   --->   "%icmp = icmp eq i3 %tmp, 0" [test.cpp:707]   --->   Operation 44 'icmp' 'icmp' <Predicate = true> <Delay = 0.86> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.22> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 45 [1/1] (0.00ns)   --->   "%tmp_8 = call i7 @_ssdm_op_PartSelect.i7.i32.i32.i32(i32 %p_Val2_s, i32 24, i32 30)" [test.cpp:717]   --->   Operation 45 'partselect' 'tmp_8' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 46 [1/1] (1.18ns)   --->   "%icmp4 = icmp eq i7 %tmp_8, 0" [test.cpp:717]   --->   Operation 46 'icmp' 'icmp4' <Predicate = true> <Delay = 1.18> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.22> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 2 <SV = 1> <Delay = 1.88>
ST_2 : Operation 47 [1/1] (0.66ns)   --->   "%shift_V_cast_cast = select i1 %icmp, i8 4, i8 3" [test.cpp:707]   --->   Operation 47 'select' 'shift_V_cast_cast' <Predicate = true> <Delay = 0.66> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 48 [1/1] (1.22ns)   --->   "%tmp_3 = icmp eq i8 %new_exp_V, 0" [test.cpp:713]   --->   Operation 48 'icmp' 'tmp_3' <Predicate = true> <Delay = 1.22> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.22> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 49 [1/1] (1.22ns)   --->   "%tmp_4 = icmp ult i8 %shift_V_cast_cast, %new_exp_V" [test.cpp:716]   --->   Operation 49 'icmp' 'tmp_4' <Predicate = true> <Delay = 1.22> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.22> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 50 [1/1] (1.39ns)   --->   "%shift_V = sub i8 1, %new_exp_V" [test.cpp:718]   --->   Operation 50 'sub' 'shift_V' <Predicate = true> <Delay = 1.39> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.71> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 51 [1/1] (1.39ns)   --->   "%shift_V_1 = add i8 -1, %new_exp_V" [test.cpp:720]   --->   Operation 51 'add' 'shift_V_1' <Predicate = true> <Delay = 1.39> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.71> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 3 <SV = 2> <Delay = 2.13>
ST_3 : Operation 52 [1/1] (1.22ns)   --->   "%tmp_1 = icmp ugt i8 %shift_V_cast_cast, %new_exp_V" [test.cpp:709]   --->   Operation 52 'icmp' 'tmp_1' <Predicate = true> <Delay = 1.22> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.22> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 53 [1/1] (1.39ns)   --->   "%new_exp_V_1 = sub i8 %new_exp_V, %shift_V_cast_cast" [test.cpp:712]   --->   Operation 53 'sub' 'new_exp_V_1' <Predicate = true> <Delay = 1.39> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.71> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 54 [1/1] (0.00ns) (grouped into LUT with out node shift_V_3)   --->   "%sel_tmp2_demorgan = or i1 %tmp_3, %tmp_4" [test.cpp:713]   --->   Operation 54 'or' 'sel_tmp2_demorgan' <Predicate = (!tmp_3)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 55 [1/1] (0.00ns) (grouped into LUT with out node shift_V_3)   --->   "%sel_tmp2 = xor i1 %sel_tmp2_demorgan, true" [test.cpp:713]   --->   Operation 55 'xor' 'sel_tmp2' <Predicate = (!tmp_3)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 56 [1/1] (0.00ns) (grouped into LUT with out node shift_V_3)   --->   "%sel_tmp3 = and i1 %icmp4, %sel_tmp2" [test.cpp:717]   --->   Operation 56 'and' 'sel_tmp3' <Predicate = (!tmp_3)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 57 [1/1] (0.00ns) (grouped into LUT with out node shift_V_3)   --->   "%shift_V_2 = select i1 %sel_tmp3, i8 %shift_V, i8 %shift_V_1" [test.cpp:717]   --->   Operation 57 'select' 'shift_V_2' <Predicate = (!tmp_3)> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 58 [1/1] (0.74ns) (out node of the LUT)   --->   "%shift_V_3 = select i1 %tmp_3, i8 0, i8 %shift_V_2" [test.cpp:713]   --->   Operation 58 'select' 'shift_V_3' <Predicate = true> <Delay = 0.74> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 59 [1/1] (0.00ns) (grouped into LUT with out node shift_V_4)   --->   "%sel_tmp6 = xor i1 %tmp_3, true" [test.cpp:713]   --->   Operation 59 'xor' 'sel_tmp6' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 60 [1/1] (0.00ns) (grouped into LUT with out node shift_V_4)   --->   "%sel_tmp7 = and i1 %tmp_4, %sel_tmp6" [test.cpp:716]   --->   Operation 60 'and' 'sel_tmp7' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 61 [1/1] (0.74ns) (out node of the LUT)   --->   "%shift_V_4 = select i1 %sel_tmp7, i8 %shift_V_cast_cast, i8 %shift_V_3" [test.cpp:716]   --->   Operation 61 'select' 'shift_V_4' <Predicate = true> <Delay = 0.74> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 62 [1/1] (1.22ns)   --->   "%tmp_5 = icmp eq i8 %new_exp_V, -1" [test.cpp:731]   --->   Operation 62 'icmp' 'tmp_5' <Predicate = true> <Delay = 1.22> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.22> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 63 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_1)   --->   "%p_s = select i1 %tmp_5, i8 -1, i8 0" [test.cpp:731]   --->   Operation 63 'select' 'p_s' <Predicate = true> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 64 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_1)   --->   "%tmp_10 = or i1 %tmp_5, %tmp_1" [test.cpp:731]   --->   Operation 64 'or' 'tmp_10' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 65 [1/1] (0.74ns) (out node of the LUT)   --->   "%p_Repl2_1 = select i1 %tmp_10, i8 %p_s, i8 %new_exp_V_1" [test.cpp:731]   --->   Operation 65 'select' 'p_Repl2_1' <Predicate = true> <Delay = 0.74> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>

State 4 <SV = 3> <Delay = 1.91>
ST_4 : Operation 66 [1/1] (0.00ns)   --->   "%tmp_9 = zext i23 %new_mant_V_1 to i32" [test.cpp:724]   --->   Operation 66 'zext' 'tmp_9' <Predicate = (!icmp4)> <Delay = 0.00>
ST_4 : Operation 67 [1/1] (0.00ns)   --->   "%tmp_s = zext i8 %shift_V_4 to i32" [test.cpp:724]   --->   Operation 67 'zext' 'tmp_s' <Predicate = (!icmp4)> <Delay = 0.00>
ST_4 : Operation 68 [1/1] (0.00ns)   --->   "%tmp_cast = zext i8 %shift_V_4 to i23" [test.cpp:724]   --->   Operation 68 'zext' 'tmp_cast' <Predicate = (icmp4)> <Delay = 0.00>
ST_4 : Operation 69 [4/4] (1.91ns)   --->   "%tmp_2 = lshr i23 %new_mant_V_1, %tmp_cast" [test.cpp:724]   --->   Operation 69 'lshr' 'tmp_2' <Predicate = (icmp4)> <Delay = 1.91> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.91> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 70 [4/4] (1.91ns)   --->   "%tmp_7 = shl i32 %tmp_9, %tmp_s" [test.cpp:726]   --->   Operation 70 'shl' 'tmp_7' <Predicate = (!icmp4)> <Delay = 1.91> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.91> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>

State 5 <SV = 4> <Delay = 1.91>
ST_5 : Operation 71 [3/4] (1.91ns)   --->   "%tmp_2 = lshr i23 %new_mant_V_1, %tmp_cast" [test.cpp:724]   --->   Operation 71 'lshr' 'tmp_2' <Predicate = (icmp4)> <Delay = 1.91> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.91> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 72 [3/4] (1.91ns)   --->   "%tmp_7 = shl i32 %tmp_9, %tmp_s" [test.cpp:726]   --->   Operation 72 'shl' 'tmp_7' <Predicate = (!icmp4)> <Delay = 1.91> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.91> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>

State 6 <SV = 5> <Delay = 1.91>
ST_6 : Operation 73 [2/4] (1.91ns)   --->   "%tmp_2 = lshr i23 %new_mant_V_1, %tmp_cast" [test.cpp:724]   --->   Operation 73 'lshr' 'tmp_2' <Predicate = (icmp4)> <Delay = 1.91> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.91> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 74 [2/4] (1.91ns)   --->   "%tmp_7 = shl i32 %tmp_9, %tmp_s" [test.cpp:726]   --->   Operation 74 'shl' 'tmp_7' <Predicate = (!icmp4)> <Delay = 1.91> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.91> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>

State 7 <SV = 6> <Delay = 1.91>
ST_7 : Operation 75 [1/4] (1.91ns)   --->   "%tmp_2 = lshr i23 %new_mant_V_1, %tmp_cast" [test.cpp:724]   --->   Operation 75 'lshr' 'tmp_2' <Predicate = (icmp4)> <Delay = 1.91> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.91> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 76 [1/4] (1.91ns)   --->   "%tmp_7 = shl i32 %tmp_9, %tmp_s" [test.cpp:726]   --->   Operation 76 'shl' 'tmp_7' <Predicate = (!icmp4)> <Delay = 1.91> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.91> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 77 [1/1] (0.00ns)   --->   "%tmp_12 = trunc i32 %tmp_7 to i28" [test.cpp:726]   --->   Operation 77 'trunc' 'tmp_12' <Predicate = (!icmp4)> <Delay = 0.00>

State 8 <SV = 7> <Delay = 0.56>
ST_8 : Operation 78 [1/1] (0.00ns)   --->   "%tmp_6 = zext i23 %tmp_2 to i28" [test.cpp:724]   --->   Operation 78 'zext' 'tmp_6' <Predicate = (icmp4)> <Delay = 0.00>
ST_8 : Operation 79 [1/1] (0.56ns)   --->   "%xf_V = select i1 %icmp4, i28 %tmp_6, i28 %tmp_12" [test.cpp:717]   --->   Operation 79 'select' 'xf_V' <Predicate = true> <Delay = 0.56> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>

State 9 <SV = 8> <Delay = 1.71>
ST_9 : Operation 80 [1/1] (0.00ns) (grouped into LUT with out node xf_V_4)   --->   "%p_Result_s = call i28 @_ssdm_op_BitSet.i28.i28.i32.i1(i28 %xf_V, i32 23, i1 true)" [test.cpp:728]   --->   Operation 80 'bitset' 'p_Result_s' <Predicate = (!tmp_3)> <Delay = 0.00>
ST_9 : Operation 81 [1/1] (0.00ns) (grouped into LUT with out node xf_V_4)   --->   "%xf_V_1 = select i1 %tmp_3, i28 %xf_V, i28 %p_Result_s" [test.cpp:713]   --->   Operation 81 'select' 'xf_V_1' <Predicate = true> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_9 : Operation 82 [1/1] (1.71ns) (out node of the LUT)   --->   "%xf_V_4 = add i28 4, %xf_V_1" [test.cpp:729]   --->   Operation 82 'add' 'xf_V_4' <Predicate = true> <Delay = 1.71> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.71> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 83 [1/1] (0.00ns)   --->   "%d_chunk_V = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V_4, i32 26, i32 27) nounwind" [test.cpp:640->test.cpp:686->test.cpp:730]   --->   Operation 83 'partselect' 'd_chunk_V' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 84 [1/1] (0.00ns)   --->   "%d_chunk_V_1 = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V_4, i32 24, i32 25) nounwind" [test.cpp:643->test.cpp:686->test.cpp:730]   --->   Operation 84 'partselect' 'd_chunk_V_1' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 85 [1/1] (0.00ns)   --->   "%d_chunk_V_2 = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V_4, i32 22, i32 23) nounwind" [test.cpp:646->test.cpp:686->test.cpp:730]   --->   Operation 85 'partselect' 'd_chunk_V_2' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 86 [1/1] (0.00ns)   --->   "%d_chunk_V_3 = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V_4, i32 20, i32 21) nounwind" [test.cpp:649->test.cpp:686->test.cpp:730]   --->   Operation 86 'partselect' 'd_chunk_V_3' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 87 [1/1] (0.00ns)   --->   "%d_chunk_V_4 = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V_4, i32 18, i32 19) nounwind" [test.cpp:652->test.cpp:686->test.cpp:730]   --->   Operation 87 'partselect' 'd_chunk_V_4' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 88 [1/1] (0.00ns)   --->   "%d_chunk_V_5 = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V_4, i32 16, i32 17) nounwind" [test.cpp:655->test.cpp:686->test.cpp:730]   --->   Operation 88 'partselect' 'd_chunk_V_5' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 89 [1/1] (0.00ns)   --->   "%d_chunk_V_6 = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V_4, i32 14, i32 15) nounwind" [test.cpp:658->test.cpp:686->test.cpp:730]   --->   Operation 89 'partselect' 'd_chunk_V_6' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 90 [1/1] (0.00ns)   --->   "%d_chunk_V_7 = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V_4, i32 12, i32 13) nounwind" [test.cpp:661->test.cpp:686->test.cpp:730]   --->   Operation 90 'partselect' 'd_chunk_V_7' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 91 [1/1] (0.00ns)   --->   "%d_chunk_V_8 = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V_4, i32 10, i32 11) nounwind" [test.cpp:664->test.cpp:686->test.cpp:730]   --->   Operation 91 'partselect' 'd_chunk_V_8' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 92 [1/1] (0.00ns)   --->   "%d_chunk_V_9 = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V_4, i32 8, i32 9) nounwind" [test.cpp:667->test.cpp:686->test.cpp:730]   --->   Operation 92 'partselect' 'd_chunk_V_9' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 93 [1/1] (0.00ns)   --->   "%d_chunk_V_10 = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V_4, i32 6, i32 7) nounwind" [test.cpp:670->test.cpp:686->test.cpp:730]   --->   Operation 93 'partselect' 'd_chunk_V_10' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 94 [1/1] (0.00ns)   --->   "%d_chunk_V_11 = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V_4, i32 4, i32 5) nounwind" [test.cpp:673->test.cpp:686->test.cpp:730]   --->   Operation 94 'partselect' 'd_chunk_V_11' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 95 [1/1] (0.00ns)   --->   "%d_chunk_V_12 = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V_4, i32 2, i32 3) nounwind" [test.cpp:676->test.cpp:686->test.cpp:730]   --->   Operation 95 'partselect' 'd_chunk_V_12' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 96 [1/1] (0.00ns)   --->   "%d_chunk_V_13 = trunc i28 %xf_V_4 to i2" [test.cpp:679->test.cpp:686->test.cpp:730]   --->   Operation 96 'trunc' 'd_chunk_V_13' <Predicate = true> <Delay = 0.00>

State 10 <SV = 9> <Delay = 1.54>
ST_10 : Operation 97 [2/2] (1.54ns)   --->   "%call_ret1_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V, i4 0) nounwind" [test.cpp:641->test.cpp:686->test.cpp:730]   --->   Operation 97 'call' 'call_ret1_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 11 <SV = 10> <Delay = 1.33>
ST_11 : Operation 98 [1/2] (1.33ns)   --->   "%call_ret1_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V, i4 0) nounwind" [test.cpp:641->test.cpp:686->test.cpp:730]   --->   Operation 98 'call' 'call_ret1_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_11 : Operation 99 [1/1] (0.00ns)   --->   "%r_V = extractvalue { i2, i4 } %call_ret1_i_i, 1" [test.cpp:641->test.cpp:686->test.cpp:730]   --->   Operation 99 'extractvalue' 'r_V' <Predicate = true> <Delay = 0.00>

State 12 <SV = 11> <Delay = 1.54>
ST_12 : Operation 100 [2/2] (1.54ns)   --->   "%call_ret2_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_1, i4 %r_V) nounwind" [test.cpp:644->test.cpp:686->test.cpp:730]   --->   Operation 100 'call' 'call_ret2_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 13 <SV = 12> <Delay = 1.33>
ST_13 : Operation 101 [1/2] (1.33ns)   --->   "%call_ret2_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_1, i4 %r_V) nounwind" [test.cpp:644->test.cpp:686->test.cpp:730]   --->   Operation 101 'call' 'call_ret2_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_13 : Operation 102 [1/1] (0.00ns)   --->   "%r_V_1 = extractvalue { i2, i4 } %call_ret2_i_i, 1" [test.cpp:644->test.cpp:686->test.cpp:730]   --->   Operation 102 'extractvalue' 'r_V_1' <Predicate = true> <Delay = 0.00>

State 14 <SV = 13> <Delay = 1.54>
ST_14 : Operation 103 [2/2] (1.54ns)   --->   "%call_ret3_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_2, i4 %r_V_1) nounwind" [test.cpp:647->test.cpp:686->test.cpp:730]   --->   Operation 103 'call' 'call_ret3_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 15 <SV = 14> <Delay = 1.33>
ST_15 : Operation 104 [1/2] (1.33ns)   --->   "%call_ret3_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_2, i4 %r_V_1) nounwind" [test.cpp:647->test.cpp:686->test.cpp:730]   --->   Operation 104 'call' 'call_ret3_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_15 : Operation 105 [1/1] (0.00ns)   --->   "%r_V_2 = extractvalue { i2, i4 } %call_ret3_i_i, 1" [test.cpp:647->test.cpp:686->test.cpp:730]   --->   Operation 105 'extractvalue' 'r_V_2' <Predicate = true> <Delay = 0.00>

State 16 <SV = 15> <Delay = 1.54>
ST_16 : Operation 106 [2/2] (1.54ns)   --->   "%call_ret4_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_3, i4 %r_V_2) nounwind" [test.cpp:650->test.cpp:686->test.cpp:730]   --->   Operation 106 'call' 'call_ret4_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 17 <SV = 16> <Delay = 1.33>
ST_17 : Operation 107 [1/2] (1.33ns)   --->   "%call_ret4_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_3, i4 %r_V_2) nounwind" [test.cpp:650->test.cpp:686->test.cpp:730]   --->   Operation 107 'call' 'call_ret4_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_17 : Operation 108 [1/1] (0.00ns)   --->   "%r_V_3 = extractvalue { i2, i4 } %call_ret4_i_i, 1" [test.cpp:650->test.cpp:686->test.cpp:730]   --->   Operation 108 'extractvalue' 'r_V_3' <Predicate = true> <Delay = 0.00>

State 18 <SV = 17> <Delay = 1.54>
ST_18 : Operation 109 [2/2] (1.54ns)   --->   "%call_ret5_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_4, i4 %r_V_3) nounwind" [test.cpp:653->test.cpp:686->test.cpp:730]   --->   Operation 109 'call' 'call_ret5_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 19 <SV = 18> <Delay = 1.33>
ST_19 : Operation 110 [1/2] (1.33ns)   --->   "%call_ret5_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_4, i4 %r_V_3) nounwind" [test.cpp:653->test.cpp:686->test.cpp:730]   --->   Operation 110 'call' 'call_ret5_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_19 : Operation 111 [1/1] (0.00ns)   --->   "%r_V_4 = extractvalue { i2, i4 } %call_ret5_i_i, 1" [test.cpp:653->test.cpp:686->test.cpp:730]   --->   Operation 111 'extractvalue' 'r_V_4' <Predicate = true> <Delay = 0.00>

State 20 <SV = 19> <Delay = 1.54>
ST_20 : Operation 112 [2/2] (1.54ns)   --->   "%call_ret6_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_5, i4 %r_V_4) nounwind" [test.cpp:656->test.cpp:686->test.cpp:730]   --->   Operation 112 'call' 'call_ret6_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 21 <SV = 20> <Delay = 1.33>
ST_21 : Operation 113 [1/2] (1.33ns)   --->   "%call_ret6_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_5, i4 %r_V_4) nounwind" [test.cpp:656->test.cpp:686->test.cpp:730]   --->   Operation 113 'call' 'call_ret6_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_21 : Operation 114 [1/1] (0.00ns)   --->   "%r_V_5 = extractvalue { i2, i4 } %call_ret6_i_i, 1" [test.cpp:656->test.cpp:686->test.cpp:730]   --->   Operation 114 'extractvalue' 'r_V_5' <Predicate = true> <Delay = 0.00>

State 22 <SV = 21> <Delay = 1.54>
ST_22 : Operation 115 [2/2] (1.54ns)   --->   "%call_ret7_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_6, i4 %r_V_5) nounwind" [test.cpp:659->test.cpp:686->test.cpp:730]   --->   Operation 115 'call' 'call_ret7_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 23 <SV = 22> <Delay = 1.33>
ST_23 : Operation 116 [1/2] (1.33ns)   --->   "%call_ret7_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_6, i4 %r_V_5) nounwind" [test.cpp:659->test.cpp:686->test.cpp:730]   --->   Operation 116 'call' 'call_ret7_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_23 : Operation 117 [1/1] (0.00ns)   --->   "%r_V_6 = extractvalue { i2, i4 } %call_ret7_i_i, 1" [test.cpp:659->test.cpp:686->test.cpp:730]   --->   Operation 117 'extractvalue' 'r_V_6' <Predicate = true> <Delay = 0.00>

State 24 <SV = 23> <Delay = 1.54>
ST_24 : Operation 118 [2/2] (1.54ns)   --->   "%call_ret8_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_7, i4 %r_V_6) nounwind" [test.cpp:662->test.cpp:686->test.cpp:730]   --->   Operation 118 'call' 'call_ret8_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 25 <SV = 24> <Delay = 1.33>
ST_25 : Operation 119 [1/2] (1.33ns)   --->   "%call_ret8_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_7, i4 %r_V_6) nounwind" [test.cpp:662->test.cpp:686->test.cpp:730]   --->   Operation 119 'call' 'call_ret8_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_25 : Operation 120 [1/1] (0.00ns)   --->   "%r_V_7 = extractvalue { i2, i4 } %call_ret8_i_i, 1" [test.cpp:662->test.cpp:686->test.cpp:730]   --->   Operation 120 'extractvalue' 'r_V_7' <Predicate = true> <Delay = 0.00>

State 26 <SV = 25> <Delay = 1.54>
ST_26 : Operation 121 [2/2] (1.54ns)   --->   "%call_ret9_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_8, i4 %r_V_7) nounwind" [test.cpp:665->test.cpp:686->test.cpp:730]   --->   Operation 121 'call' 'call_ret9_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 27 <SV = 26> <Delay = 1.33>
ST_27 : Operation 122 [1/2] (1.33ns)   --->   "%call_ret9_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_8, i4 %r_V_7) nounwind" [test.cpp:665->test.cpp:686->test.cpp:730]   --->   Operation 122 'call' 'call_ret9_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_27 : Operation 123 [1/1] (0.00ns)   --->   "%r_V_8 = extractvalue { i2, i4 } %call_ret9_i_i, 1" [test.cpp:665->test.cpp:686->test.cpp:730]   --->   Operation 123 'extractvalue' 'r_V_8' <Predicate = true> <Delay = 0.00>

State 28 <SV = 27> <Delay = 1.54>
ST_28 : Operation 124 [2/2] (1.54ns)   --->   "%call_ret10_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_9, i4 %r_V_8) nounwind" [test.cpp:668->test.cpp:686->test.cpp:730]   --->   Operation 124 'call' 'call_ret10_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 29 <SV = 28> <Delay = 1.33>
ST_29 : Operation 125 [1/2] (1.33ns)   --->   "%call_ret10_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_9, i4 %r_V_8) nounwind" [test.cpp:668->test.cpp:686->test.cpp:730]   --->   Operation 125 'call' 'call_ret10_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_29 : Operation 126 [1/1] (0.00ns)   --->   "%r_V_9 = extractvalue { i2, i4 } %call_ret10_i_i, 1" [test.cpp:668->test.cpp:686->test.cpp:730]   --->   Operation 126 'extractvalue' 'r_V_9' <Predicate = true> <Delay = 0.00>

State 30 <SV = 29> <Delay = 1.54>
ST_30 : Operation 127 [2/2] (1.54ns)   --->   "%call_ret11_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_10, i4 %r_V_9) nounwind" [test.cpp:671->test.cpp:686->test.cpp:730]   --->   Operation 127 'call' 'call_ret11_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 31 <SV = 30> <Delay = 1.33>
ST_31 : Operation 128 [1/2] (1.33ns)   --->   "%call_ret11_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_10, i4 %r_V_9) nounwind" [test.cpp:671->test.cpp:686->test.cpp:730]   --->   Operation 128 'call' 'call_ret11_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_31 : Operation 129 [1/1] (0.00ns)   --->   "%r_V_10 = extractvalue { i2, i4 } %call_ret11_i_i, 1" [test.cpp:671->test.cpp:686->test.cpp:730]   --->   Operation 129 'extractvalue' 'r_V_10' <Predicate = true> <Delay = 0.00>

State 32 <SV = 31> <Delay = 1.54>
ST_32 : Operation 130 [2/2] (1.54ns)   --->   "%call_ret12_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_11, i4 %r_V_10) nounwind" [test.cpp:674->test.cpp:686->test.cpp:730]   --->   Operation 130 'call' 'call_ret12_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 33 <SV = 32> <Delay = 1.33>
ST_33 : Operation 131 [1/2] (1.33ns)   --->   "%call_ret12_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_11, i4 %r_V_10) nounwind" [test.cpp:674->test.cpp:686->test.cpp:730]   --->   Operation 131 'call' 'call_ret12_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_33 : Operation 132 [1/1] (0.00ns)   --->   "%r_V_11 = extractvalue { i2, i4 } %call_ret12_i_i, 1" [test.cpp:674->test.cpp:686->test.cpp:730]   --->   Operation 132 'extractvalue' 'r_V_11' <Predicate = true> <Delay = 0.00>

State 34 <SV = 33> <Delay = 1.54>
ST_34 : Operation 133 [2/2] (1.54ns)   --->   "%call_ret13_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_12, i4 %r_V_11) nounwind" [test.cpp:677->test.cpp:686->test.cpp:730]   --->   Operation 133 'call' 'call_ret13_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 35 <SV = 34> <Delay = 1.33>
ST_35 : Operation 134 [1/2] (1.33ns)   --->   "%call_ret13_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_12, i4 %r_V_11) nounwind" [test.cpp:677->test.cpp:686->test.cpp:730]   --->   Operation 134 'call' 'call_ret13_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_35 : Operation 135 [1/1] (0.00ns)   --->   "%r_V_12 = extractvalue { i2, i4 } %call_ret13_i_i, 1" [test.cpp:677->test.cpp:686->test.cpp:730]   --->   Operation 135 'extractvalue' 'r_V_12' <Predicate = true> <Delay = 0.00>

State 36 <SV = 35> <Delay = 1.54>
ST_36 : Operation 136 [2/2] (1.54ns)   --->   "%call_ret_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_13, i4 %r_V_12) nounwind" [test.cpp:680->test.cpp:686->test.cpp:730]   --->   Operation 136 'call' 'call_ret_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 37 <SV = 36> <Delay = 2.06>
ST_37 : Operation 137 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(float %in_r) nounwind, !map !223"   --->   Operation 137 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_37 : Operation 138 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(float 0.000000e+00) nounwind, !map !229"   --->   Operation 138 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_37 : Operation 139 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([20 x i8]* @operator_float_div9_s) nounwind"   --->   Operation 139 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_37 : Operation 140 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V = extractvalue { i2, i4 } %call_ret3_i_i, 0" [test.cpp:647->test.cpp:686->test.cpp:730]   --->   Operation 140 'extractvalue' 'q_chunk_V' <Predicate = (!tmp_5)> <Delay = 0.00>
ST_37 : Operation 141 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_1 = extractvalue { i2, i4 } %call_ret4_i_i, 0" [test.cpp:650->test.cpp:686->test.cpp:730]   --->   Operation 141 'extractvalue' 'q_chunk_V_1' <Predicate = (!tmp_5)> <Delay = 0.00>
ST_37 : Operation 142 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_2 = extractvalue { i2, i4 } %call_ret5_i_i, 0" [test.cpp:653->test.cpp:686->test.cpp:730]   --->   Operation 142 'extractvalue' 'q_chunk_V_2' <Predicate = (!tmp_5)> <Delay = 0.00>
ST_37 : Operation 143 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_3 = extractvalue { i2, i4 } %call_ret6_i_i, 0" [test.cpp:656->test.cpp:686->test.cpp:730]   --->   Operation 143 'extractvalue' 'q_chunk_V_3' <Predicate = (!tmp_5)> <Delay = 0.00>
ST_37 : Operation 144 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_4 = extractvalue { i2, i4 } %call_ret7_i_i, 0" [test.cpp:659->test.cpp:686->test.cpp:730]   --->   Operation 144 'extractvalue' 'q_chunk_V_4' <Predicate = (!tmp_5)> <Delay = 0.00>
ST_37 : Operation 145 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_5 = extractvalue { i2, i4 } %call_ret8_i_i, 0" [test.cpp:662->test.cpp:686->test.cpp:730]   --->   Operation 145 'extractvalue' 'q_chunk_V_5' <Predicate = (!tmp_5)> <Delay = 0.00>
ST_37 : Operation 146 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_6 = extractvalue { i2, i4 } %call_ret9_i_i, 0" [test.cpp:665->test.cpp:686->test.cpp:730]   --->   Operation 146 'extractvalue' 'q_chunk_V_6' <Predicate = (!tmp_5)> <Delay = 0.00>
ST_37 : Operation 147 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_7 = extractvalue { i2, i4 } %call_ret10_i_i, 0" [test.cpp:668->test.cpp:686->test.cpp:730]   --->   Operation 147 'extractvalue' 'q_chunk_V_7' <Predicate = (!tmp_5)> <Delay = 0.00>
ST_37 : Operation 148 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_8 = extractvalue { i2, i4 } %call_ret11_i_i, 0" [test.cpp:671->test.cpp:686->test.cpp:730]   --->   Operation 148 'extractvalue' 'q_chunk_V_8' <Predicate = (!tmp_5)> <Delay = 0.00>
ST_37 : Operation 149 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_9 = extractvalue { i2, i4 } %call_ret12_i_i, 0" [test.cpp:674->test.cpp:686->test.cpp:730]   --->   Operation 149 'extractvalue' 'q_chunk_V_9' <Predicate = (!tmp_5)> <Delay = 0.00>
ST_37 : Operation 150 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_10 = extractvalue { i2, i4 } %call_ret13_i_i, 0" [test.cpp:677->test.cpp:686->test.cpp:730]   --->   Operation 150 'extractvalue' 'q_chunk_V_10' <Predicate = (!tmp_5)> <Delay = 0.00>
ST_37 : Operation 151 [1/2] (1.33ns)   --->   "%call_ret_i_i = call fastcc { i2, i4 } @lut_div9_chunk(i2 %d_chunk_V_13, i4 %r_V_12) nounwind" [test.cpp:680->test.cpp:686->test.cpp:730]   --->   Operation 151 'call' 'call_ret_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_37 : Operation 152 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_11 = extractvalue { i2, i4 } %call_ret_i_i, 0" [test.cpp:680->test.cpp:686->test.cpp:730]   --->   Operation 152 'extractvalue' 'q_chunk_V_11' <Predicate = (!tmp_5)> <Delay = 0.00>
ST_37 : Operation 153 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%tmp_15 = trunc i2 %q_chunk_V to i1" [test.cpp:647->test.cpp:686->test.cpp:730]   --->   Operation 153 'trunc' 'tmp_15' <Predicate = (!tmp_5)> <Delay = 0.00>
ST_37 : Operation 154 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%new_mant_V = call i23 @_ssdm_op_BitConcatenate.i23.i1.i2.i2.i2.i2.i2.i2.i2.i2.i2.i2.i2(i1 %tmp_15, i2 %q_chunk_V_1, i2 %q_chunk_V_2, i2 %q_chunk_V_3, i2 %q_chunk_V_4, i2 %q_chunk_V_5, i2 %q_chunk_V_6, i2 %q_chunk_V_7, i2 %q_chunk_V_8, i2 %q_chunk_V_9, i2 %q_chunk_V_10, i2 %q_chunk_V_11)" [test.cpp:730]   --->   Operation 154 'bitconcatenate' 'new_mant_V' <Predicate = (!tmp_5)> <Delay = 0.00>
ST_37 : Operation 155 [1/1] (0.73ns) (out node of the LUT)   --->   "%p_Repl2_s = select i1 %tmp_5, i23 %new_mant_V_1, i23 %new_mant_V" [test.cpp:731]   --->   Operation 155 'select' 'p_Repl2_s' <Predicate = true> <Delay = 0.73> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_37 : Operation 156 [1/1] (0.00ns)   --->   "%p_Result_1 = call i32 @_ssdm_op_BitConcatenate.i32.i1.i8.i23(i1 %p_Repl2_2, i8 %p_Repl2_1, i23 %p_Repl2_s) nounwind" [test.cpp:79->test.cpp:735]   --->   Operation 156 'bitconcatenate' 'p_Result_1' <Predicate = true> <Delay = 0.00>
ST_37 : Operation 157 [1/1] (0.00ns)   --->   "%out = bitcast i32 %p_Result_1 to float" [test.cpp:80->test.cpp:735]   --->   Operation 157 'bitcast' 'out' <Predicate = true> <Delay = 0.00>
ST_37 : Operation 158 [1/1] (0.00ns)   --->   "ret float %out" [test.cpp:736]   --->   Operation 158 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 2.5ns, clock uncertainty: 0.312ns.

 <State 1>: 1.19ns
The critical path consists of the following:
	wire read on port 'in_r' [11]  (0 ns)
	'icmp' operation ('icmp4', test.cpp:717) [24]  (1.19 ns)

 <State 2>: 1.88ns
The critical path consists of the following:
	'select' operation ('shift_V_cast_cast', test.cpp:707) [18]  (0.66 ns)
	'icmp' operation ('tmp_4', test.cpp:716) [22]  (1.22 ns)

 <State 3>: 2.13ns
The critical path consists of the following:
	'sub' operation ('new_exp.V', test.cpp:712) [20]  (1.39 ns)
	'select' operation ('__Repl2__', test.cpp:731) [104]  (0.74 ns)

 <State 4>: 1.92ns
The critical path consists of the following:
	'shl' operation ('tmp_7', test.cpp:726) [39]  (1.92 ns)

 <State 5>: 1.92ns
The critical path consists of the following:
	'lshr' operation ('tmp_2', test.cpp:724) [38]  (1.92 ns)

 <State 6>: 1.92ns
The critical path consists of the following:
	'lshr' operation ('tmp_2', test.cpp:724) [38]  (1.92 ns)

 <State 7>: 1.92ns
The critical path consists of the following:
	'lshr' operation ('tmp_2', test.cpp:724) [38]  (1.92 ns)

 <State 8>: 0.568ns
The critical path consists of the following:
	'select' operation ('xf.V', test.cpp:717) [42]  (0.568 ns)

 <State 9>: 1.71ns
The critical path consists of the following:
	'select' operation ('xf.V', test.cpp:713) [44]  (0 ns)
	'add' operation ('xf.V', test.cpp:729) [45]  (1.71 ns)

 <State 10>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret1_i_i', test.cpp:641->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [47]  (1.54 ns)

 <State 11>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret1_i_i', test.cpp:641->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [47]  (1.33 ns)

 <State 12>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret2_i_i', test.cpp:644->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [50]  (1.54 ns)

 <State 13>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret2_i_i', test.cpp:644->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [50]  (1.33 ns)

 <State 14>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret3_i_i', test.cpp:647->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [53]  (1.54 ns)

 <State 15>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret3_i_i', test.cpp:647->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [53]  (1.33 ns)

 <State 16>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret4_i_i', test.cpp:650->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [57]  (1.54 ns)

 <State 17>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret4_i_i', test.cpp:650->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [57]  (1.33 ns)

 <State 18>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret5_i_i', test.cpp:653->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [61]  (1.54 ns)

 <State 19>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret5_i_i', test.cpp:653->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [61]  (1.33 ns)

 <State 20>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret6_i_i', test.cpp:656->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [65]  (1.54 ns)

 <State 21>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret6_i_i', test.cpp:656->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [65]  (1.33 ns)

 <State 22>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret7_i_i', test.cpp:659->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [69]  (1.54 ns)

 <State 23>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret7_i_i', test.cpp:659->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [69]  (1.33 ns)

 <State 24>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret8_i_i', test.cpp:662->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [73]  (1.54 ns)

 <State 25>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret8_i_i', test.cpp:662->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [73]  (1.33 ns)

 <State 26>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret9_i_i', test.cpp:665->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [77]  (1.54 ns)

 <State 27>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret9_i_i', test.cpp:665->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [77]  (1.33 ns)

 <State 28>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret10_i_i', test.cpp:668->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [81]  (1.54 ns)

 <State 29>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret10_i_i', test.cpp:668->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [81]  (1.33 ns)

 <State 30>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret11_i_i', test.cpp:671->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [85]  (1.54 ns)

 <State 31>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret11_i_i', test.cpp:671->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [85]  (1.33 ns)

 <State 32>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret12_i_i', test.cpp:674->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [89]  (1.54 ns)

 <State 33>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret12_i_i', test.cpp:674->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [89]  (1.33 ns)

 <State 34>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret13_i_i', test.cpp:677->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [93]  (1.54 ns)

 <State 35>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret13_i_i', test.cpp:677->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [93]  (1.33 ns)

 <State 36>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret_i_i', test.cpp:680->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [97]  (1.54 ns)

 <State 37>: 2.06ns
The critical path consists of the following:
	'call' operation ('call_ret_i_i', test.cpp:680->test.cpp:686->test.cpp:730) to 'lut_div9_chunk' [97]  (1.33 ns)
	'select' operation ('__Repl2__', test.cpp:731) [105]  (0.731 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
