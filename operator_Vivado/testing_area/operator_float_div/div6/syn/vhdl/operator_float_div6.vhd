-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity operator_float_div6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of operator_float_div6 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "operator_float_div6,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.177600,HLS_SYN_LAT=28,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=594,HLS_SYN_LUT=751,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_117 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_lut_div3_chunk_fu_94_ap_idle : STD_LOGIC;
    signal grp_lut_div3_chunk_fu_94_ap_ready : STD_LOGIC;
    signal grp_lut_div3_chunk_fu_94_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal p_Repl2_2_reg_461 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_exp_V_fu_134_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_exp_V_reg_466 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_mant_V_1_fu_144_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal new_mant_V_1_reg_475 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_fu_148_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_482 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_cast_fu_156_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast_cast_reg_487 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_493 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_501 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_1_fu_176_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_V_1_reg_507 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_512 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shift_V_4_fu_248_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_V_4_reg_517 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_523 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_1_fu_274_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_1_reg_528 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_291_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_5_reg_548 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_12_fu_302_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_12_reg_553 : STD_LOGIC_VECTOR (26 downto 0);
    signal xf_V_fu_309_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal xf_V_reg_558 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_Result_i_i_reg_564 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal d_chunk_V_1_reg_569 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_2_reg_574 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_3_reg_579 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_4_reg_584 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_5_reg_589 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_6_fu_396_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_6_reg_594 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_fu_400_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_reg_599 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_lut_div3_chunk_fu_94_ap_return_0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_lut_div3_chunk_fu_94_ap_return_1 : STD_LOGIC_VECTOR (1 downto 0);
    signal call_ret2_i_i_reg_604_0 : STD_LOGIC_VECTOR (3 downto 0);
    signal call_ret3_i_i_reg_609_0 : STD_LOGIC_VECTOR (3 downto 0);
    signal call_ret4_i_i_reg_614_0 : STD_LOGIC_VECTOR (3 downto 0);
    signal call_ret5_i_i_reg_619_0 : STD_LOGIC_VECTOR (3 downto 0);
    signal call_ret6_i_i_reg_624_0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_lut_div3_chunk_fu_94_ap_start : STD_LOGIC;
    signal grp_lut_div3_chunk_fu_94_d_V : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_lut_div3_chunk_fu_94_r_in_V : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_lut_div3_chunk_fu_94_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal p_Val2_s_fu_122_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_cast_cast_fu_190_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp5_demorgan_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_fu_202_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_V_2_fu_217_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_V_3_fu_240_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1_fu_260_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_exp_V_1_fu_186_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_291_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_296_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_296_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_306_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Result_s_fu_315_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal xf_V_1_fu_324_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal xf_V_4_fu_330_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_15_fu_423_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_mant_V_fu_427_p7 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Repl2_s_fu_443_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_1_fu_449_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);

    component lut_div3_chunk IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        d_V : IN STD_LOGIC_VECTOR (3 downto 0);
        r_in_V : IN STD_LOGIC_VECTOR (1 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component operator_float_dibkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (22 downto 0);
        din1 : IN STD_LOGIC_VECTOR (22 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component operator_float_dicud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_lut_div3_chunk_fu_94 : component lut_div3_chunk
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lut_div3_chunk_fu_94_ap_start,
        ap_done => grp_lut_div3_chunk_fu_94_ap_done,
        ap_idle => grp_lut_div3_chunk_fu_94_ap_idle,
        ap_ready => grp_lut_div3_chunk_fu_94_ap_ready,
        d_V => grp_lut_div3_chunk_fu_94_d_V,
        r_in_V => grp_lut_div3_chunk_fu_94_r_in_V,
        ap_return_0 => grp_lut_div3_chunk_fu_94_ap_return_0,
        ap_return_1 => grp_lut_div3_chunk_fu_94_ap_return_1);

    operator_float_dibkb_U9 : component operator_float_dibkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        OP => 1,
        din0_WIDTH => 23,
        din1_WIDTH => 8,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => new_mant_V_1_reg_475,
        din1 => grp_fu_291_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_291_p2);

    operator_float_dicud_U10 : component operator_float_dicud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        OP => 0,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_296_p0,
        din1 => grp_fu_296_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_296_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_lut_div3_chunk_fu_94_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lut_div3_chunk_fu_94_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    grp_lut_div3_chunk_fu_94_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lut_div3_chunk_fu_94_ap_ready = ap_const_logic_1)) then 
                    grp_lut_div3_chunk_fu_94_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div3_chunk_fu_94_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                call_ret2_i_i_reg_604_0 <= grp_lut_div3_chunk_fu_94_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div3_chunk_fu_94_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                call_ret3_i_i_reg_609_0 <= grp_lut_div3_chunk_fu_94_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div3_chunk_fu_94_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                call_ret4_i_i_reg_614_0 <= grp_lut_div3_chunk_fu_94_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div3_chunk_fu_94_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                call_ret5_i_i_reg_619_0 <= grp_lut_div3_chunk_fu_94_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div3_chunk_fu_94_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                call_ret6_i_i_reg_624_0 <= grp_lut_div3_chunk_fu_94_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                d_chunk_V_1_reg_569 <= xf_V_4_fu_330_p2(23 downto 20);
                d_chunk_V_2_reg_574 <= xf_V_4_fu_330_p2(19 downto 16);
                d_chunk_V_3_reg_579 <= xf_V_4_fu_330_p2(15 downto 12);
                d_chunk_V_4_reg_584 <= xf_V_4_fu_330_p2(11 downto 8);
                d_chunk_V_5_reg_589 <= xf_V_4_fu_330_p2(7 downto 4);
                d_chunk_V_6_reg_594 <= d_chunk_V_6_fu_396_p1;
                p_Result_i_i_reg_564 <= xf_V_4_fu_330_p2(26 downto 24);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    d_chunk_V_reg_599(2 downto 0) <= d_chunk_V_fu_400_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                new_exp_V_reg_466 <= p_Val2_s_fu_122_p1(30 downto 23);
                new_mant_V_1_reg_475 <= new_mant_V_1_fu_144_p1;
                p_Repl2_2_reg_461 <= p_Val2_s_fu_122_p1(31 downto 31);
                    p_cast_cast_reg_487(0) <= p_cast_cast_fu_156_p3(0);
                shift_V_1_reg_507 <= shift_V_1_fu_176_p2;
                tmp_3_reg_493 <= tmp_3_fu_164_p2;
                tmp_4_reg_501 <= tmp_4_fu_170_p2;
                tmp_reg_482 <= p_Val2_s_fu_122_p1(22 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                p_Repl2_1_reg_528 <= p_Repl2_1_fu_274_p3;
                shift_V_4_reg_517 <= shift_V_4_fu_248_p3;
                tmp_6_reg_512 <= tmp_6_fu_197_p2;
                tmp_9_reg_523 <= tmp_9_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_lut_div3_chunk_fu_94_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((grp_lut_div3_chunk_fu_94_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((grp_lut_div3_chunk_fu_94_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((grp_lut_div3_chunk_fu_94_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((grp_lut_div3_chunk_fu_94_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((grp_lut_div3_chunk_fu_94_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then
                reg_117 <= grp_lut_div3_chunk_fu_94_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_6_reg_512 = ap_const_lv1_0))) then
                tmp_12_reg_553 <= tmp_12_fu_302_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_6_reg_512 = ap_const_lv1_1))) then
                tmp_5_reg_548 <= grp_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                xf_V_reg_558 <= xf_V_fu_309_p3;
            end if;
        end if;
    end process;
    p_cast_cast_reg_487(7 downto 1) <= "0000001";
    d_chunk_V_reg_599(3) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state10, grp_lut_div3_chunk_fu_94_ap_done, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_lut_div3_chunk_fu_94_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_lut_div3_chunk_fu_94_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_lut_div3_chunk_fu_94_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_lut_div3_chunk_fu_94_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((grp_lut_div3_chunk_fu_94_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((grp_lut_div3_chunk_fu_94_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((grp_lut_div3_chunk_fu_94_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(grp_lut_div3_chunk_fu_94_ap_done, ap_CS_fsm_state22)
    begin
        if (((grp_lut_div3_chunk_fu_94_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_lut_div3_chunk_fu_94_ap_done, ap_CS_fsm_state22)
    begin
        if (((grp_lut_div3_chunk_fu_94_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_1_fu_449_p4;
    d_chunk_V_6_fu_396_p1 <= xf_V_4_fu_330_p2(4 - 1 downto 0);
    d_chunk_V_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i_i_reg_564),4));
    grp_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_V_4_reg_517),23));
    grp_fu_296_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_mant_V_1_reg_475),32));
    grp_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_V_4_reg_517),32));
    grp_lut_div3_chunk_fu_94_ap_start <= grp_lut_div3_chunk_fu_94_ap_start_reg;

    grp_lut_div3_chunk_fu_94_d_V_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, d_chunk_V_1_reg_569, d_chunk_V_2_reg_574, d_chunk_V_3_reg_579, d_chunk_V_4_reg_584, d_chunk_V_5_reg_589, d_chunk_V_6_reg_594, d_chunk_V_reg_599, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_lut_div3_chunk_fu_94_d_V <= d_chunk_V_6_reg_594;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_lut_div3_chunk_fu_94_d_V <= d_chunk_V_5_reg_589;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_lut_div3_chunk_fu_94_d_V <= d_chunk_V_4_reg_584;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_lut_div3_chunk_fu_94_d_V <= d_chunk_V_3_reg_579;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_lut_div3_chunk_fu_94_d_V <= d_chunk_V_2_reg_574;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_lut_div3_chunk_fu_94_d_V <= d_chunk_V_1_reg_569;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_lut_div3_chunk_fu_94_d_V <= d_chunk_V_reg_599;
        else 
            grp_lut_div3_chunk_fu_94_d_V <= "XXXX";
        end if; 
    end process;


    grp_lut_div3_chunk_fu_94_r_in_V_assign_proc : process(reg_117, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_lut_div3_chunk_fu_94_r_in_V <= reg_117;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_lut_div3_chunk_fu_94_r_in_V <= ap_const_lv2_0;
        else 
            grp_lut_div3_chunk_fu_94_r_in_V <= "XX";
        end if; 
    end process;

    new_exp_V_1_fu_186_p2 <= std_logic_vector(unsigned(new_exp_V_reg_466) - unsigned(p_cast_cast_reg_487));
    new_exp_V_fu_134_p4 <= p_Val2_s_fu_122_p1(30 downto 23);
    new_mant_V_1_fu_144_p1 <= p_Val2_s_fu_122_p1(23 - 1 downto 0);
    new_mant_V_fu_427_p7 <= (((((tmp_15_fu_423_p1 & call_ret3_i_i_reg_609_0) & call_ret4_i_i_reg_614_0) & call_ret5_i_i_reg_619_0) & call_ret6_i_i_reg_624_0) & grp_lut_div3_chunk_fu_94_ap_return_0);
    p_1_fu_260_p3 <= 
        ap_const_lv8_FF when (tmp_9_fu_255_p2(0) = '1') else 
        ap_const_lv8_0;
    p_Repl2_1_fu_274_p3 <= 
        p_1_fu_260_p3 when (tmp_10_fu_268_p2(0) = '1') else 
        new_exp_V_1_fu_186_p2;
    p_Repl2_s_fu_443_p3 <= 
        new_mant_V_1_reg_475 when (tmp_9_reg_523(0) = '1') else 
        new_mant_V_fu_427_p7;
    p_Result_1_fu_449_p4 <= ((p_Repl2_2_reg_461 & p_Repl2_1_reg_528) & p_Repl2_s_fu_443_p3);
    
    p_Result_s_fu_315_p4_proc : process(xf_V_reg_558)
    begin
        p_Result_s_fu_315_p4 <= xf_V_reg_558;
        p_Result_s_fu_315_p4(23) <= ap_const_lv1_1(0);
    end process;

    p_Val2_s_fu_122_p1 <= in_r;
    p_cast_cast_fu_156_p3 <= 
        ap_const_lv8_2 when (tmp_fu_148_p3(0) = '1') else 
        ap_const_lv8_3;
    sel_tmp1_fu_212_p2 <= (tmp_4_reg_501 and sel_tmp_fu_207_p2);
    sel_tmp5_demorgan_fu_224_p2 <= (tmp_4_reg_501 or tmp_3_reg_493);
    sel_tmp5_fu_228_p2 <= (sel_tmp5_demorgan_fu_224_p2 xor ap_const_lv1_1);
    sel_tmp6_fu_234_p2 <= (tmp_6_fu_197_p2 and sel_tmp5_fu_228_p2);
    sel_tmp_fu_207_p2 <= (tmp_3_reg_493 xor ap_const_lv1_1);
    shift_V_1_fu_176_p2 <= std_logic_vector(signed(ap_const_lv8_FE) + signed(new_exp_V_fu_134_p4));
    shift_V_2_fu_217_p3 <= 
        shift_V_cast_cast_fu_190_p3 when (sel_tmp1_fu_212_p2(0) = '1') else 
        shift_V_1_reg_507;
    shift_V_3_fu_240_p3 <= 
        shift_V_fu_202_p2 when (sel_tmp6_fu_234_p2(0) = '1') else 
        shift_V_2_fu_217_p3;
    shift_V_4_fu_248_p3 <= 
        ap_const_lv8_1 when (tmp_3_reg_493(0) = '1') else 
        shift_V_3_fu_240_p3;
    shift_V_cast_cast_fu_190_p3 <= 
        ap_const_lv8_1 when (tmp_reg_482(0) = '1') else 
        ap_const_lv8_2;
    shift_V_fu_202_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) - unsigned(new_exp_V_reg_466));
    tmp_10_fu_268_p2 <= (tmp_9_fu_255_p2 or tmp_1_fu_182_p2);
    tmp_12_fu_302_p1 <= grp_fu_296_p2(27 - 1 downto 0);
    tmp_15_fu_423_p1 <= call_ret2_i_i_reg_604_0(3 - 1 downto 0);
    tmp_1_fu_182_p2 <= "1" when (unsigned(p_cast_cast_reg_487) > unsigned(new_exp_V_reg_466)) else "0";
    tmp_3_fu_164_p2 <= "1" when (new_exp_V_fu_134_p4 = ap_const_lv8_0) else "0";
    tmp_4_fu_170_p2 <= "1" when (unsigned(p_cast_cast_fu_156_p3) < unsigned(new_exp_V_fu_134_p4)) else "0";
    tmp_6_fu_197_p2 <= "1" when (unsigned(new_exp_V_reg_466) < unsigned(ap_const_lv8_3)) else "0";
    tmp_7_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_548),27));
    tmp_9_fu_255_p2 <= "1" when (new_exp_V_reg_466 = ap_const_lv8_FF) else "0";
    tmp_fu_148_p3 <= p_Val2_s_fu_122_p1(22 downto 22);
    xf_V_1_fu_324_p3 <= 
        xf_V_reg_558 when (tmp_3_reg_493(0) = '1') else 
        p_Result_s_fu_315_p4;
    xf_V_4_fu_330_p2 <= std_logic_vector(unsigned(ap_const_lv27_1) + unsigned(xf_V_1_fu_324_p3));
    xf_V_fu_309_p3 <= 
        tmp_7_fu_306_p1 when (tmp_6_reg_512(0) = '1') else 
        tmp_12_reg_553;
end behav;
