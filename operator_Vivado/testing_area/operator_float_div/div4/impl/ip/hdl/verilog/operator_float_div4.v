// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="operator_float_div4,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.845200,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=39,HLS_SYN_LUT=322,HLS_VERSION=2018_2}" *)

module operator_float_div4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in_r;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] p_Repl2_2_reg_283;
wire   [7:0] new_exp_V_fu_82_p4;
reg   [7:0] new_exp_V_reg_288;
wire   [22:0] new_mant_V_2_fu_92_p1;
reg   [22:0] new_mant_V_2_reg_294;
wire   [0:0] icmp_fu_106_p2;
reg   [0:0] icmp_reg_301;
wire   [0:0] tmp_3_fu_112_p2;
reg   [0:0] tmp_3_reg_306;
wire   [1:0] p_0274_2_fu_154_p3;
reg   [1:0] p_0274_2_reg_311;
wire   [0:0] icmp4_fu_172_p2;
reg   [0:0] icmp4_reg_317;
wire   [31:0] p_Val2_s_fu_70_p1;
wire   [6:0] tmp_10_fu_96_p4;
wire   [1:0] tmp_9_fu_124_p4;
wire   [0:0] tmp_4_fu_118_p2;
wire   [0:0] tmp_s_fu_148_p2;
wire   [1:0] p_shift_V_fu_140_p3;
wire   [1:0] shift_V_cast_fu_134_p2;
wire   [5:0] tmp_11_fu_162_p4;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_181_p2;
wire   [0:0] tmp_6_fu_199_p2;
wire   [7:0] p_new_exp_V_1_fu_191_p3;
wire   [7:0] new_exp_V_1_fu_186_p2;
wire   [23:0] xf_V_1_cast_fu_178_p1;
wire   [23:0] tmp_5_fu_212_p3;
wire   [23:0] xf_V_fu_219_p3;
wire   [23:0] tmp_cast_fu_233_p1;
wire   [26:0] tmp_9_cast2_fu_226_p1;
wire   [26:0] tmp_cast1_fu_230_p1;
wire   [23:0] tmp_2_fu_236_p2;
wire   [26:0] tmp_7_fu_242_p2;
wire   [22:0] tmp_12_fu_248_p1;
wire   [22:0] tmp_13_fu_252_p1;
wire   [22:0] new_mant_V_1_fu_256_p3;
wire   [7:0] p_Repl2_1_fu_204_p3;
wire   [22:0] new_mant_V_fu_263_p3;
wire   [31:0] p_Result_s_fu_270_p4;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp4_reg_317 <= icmp4_fu_172_p2;
        icmp_reg_301 <= icmp_fu_106_p2;
        new_exp_V_reg_288 <= {{p_Val2_s_fu_70_p1[30:23]}};
        new_mant_V_2_reg_294 <= new_mant_V_2_fu_92_p1;
        p_0274_2_reg_311 <= p_0274_2_fu_154_p3;
        p_Repl2_2_reg_283 <= p_Val2_s_fu_70_p1[32'd31];
        tmp_3_reg_306 <= tmp_3_fu_112_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return = p_Result_s_fu_270_p4;

assign icmp4_fu_172_p2 = ((tmp_11_fu_162_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_fu_106_p2 = ((tmp_10_fu_96_p4 == 7'd0) ? 1'b1 : 1'b0);

assign new_exp_V_1_fu_186_p2 = ($signed(8'd254) + $signed(new_exp_V_reg_288));

assign new_exp_V_fu_82_p4 = {{p_Val2_s_fu_70_p1[30:23]}};

assign new_mant_V_1_fu_256_p3 = ((icmp4_reg_317[0:0] === 1'b1) ? tmp_12_fu_248_p1 : tmp_13_fu_252_p1);

assign new_mant_V_2_fu_92_p1 = p_Val2_s_fu_70_p1[22:0];

assign new_mant_V_fu_263_p3 = ((tmp_fu_181_p2[0:0] === 1'b1) ? new_mant_V_2_reg_294 : new_mant_V_1_fu_256_p3);

assign p_0274_2_fu_154_p3 = ((tmp_s_fu_148_p2[0:0] === 1'b1) ? p_shift_V_fu_140_p3 : shift_V_cast_fu_134_p2);

assign p_Repl2_1_fu_204_p3 = ((tmp_6_fu_199_p2[0:0] === 1'b1) ? p_new_exp_V_1_fu_191_p3 : new_exp_V_1_fu_186_p2);

assign p_Result_s_fu_270_p4 = {{{p_Repl2_2_reg_283}, {p_Repl2_1_fu_204_p3}}, {new_mant_V_fu_263_p3}};

assign p_Val2_s_fu_70_p1 = in_r;

assign p_new_exp_V_1_fu_191_p3 = ((tmp_fu_181_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign p_shift_V_fu_140_p3 = ((tmp_3_fu_112_p2[0:0] === 1'b1) ? 2'd2 : 2'd0);

assign shift_V_cast_fu_134_p2 = (tmp_9_fu_124_p4 ^ 2'd3);

assign tmp_10_fu_96_p4 = {{p_Val2_s_fu_70_p1[30:24]}};

assign tmp_11_fu_162_p4 = {{p_Val2_s_fu_70_p1[30:25]}};

assign tmp_12_fu_248_p1 = tmp_2_fu_236_p2[22:0];

assign tmp_13_fu_252_p1 = tmp_7_fu_242_p2[22:0];

assign tmp_2_fu_236_p2 = xf_V_fu_219_p3 >> tmp_cast_fu_233_p1;

assign tmp_3_fu_112_p2 = ((new_exp_V_fu_82_p4 == 8'd0) ? 1'b1 : 1'b0);

assign tmp_4_fu_118_p2 = ((new_exp_V_fu_82_p4 > 8'd2) ? 1'b1 : 1'b0);

assign tmp_5_fu_212_p3 = {{1'd1}, {new_mant_V_2_reg_294}};

assign tmp_6_fu_199_p2 = (tmp_fu_181_p2 | icmp_reg_301);

assign tmp_7_fu_242_p2 = tmp_9_cast2_fu_226_p1 << tmp_cast1_fu_230_p1;

assign tmp_9_cast2_fu_226_p1 = xf_V_fu_219_p3;

assign tmp_9_fu_124_p4 = {{p_Val2_s_fu_70_p1[24:23]}};

assign tmp_cast1_fu_230_p1 = p_0274_2_reg_311;

assign tmp_cast_fu_233_p1 = p_0274_2_reg_311;

assign tmp_fu_181_p2 = ((new_exp_V_reg_288 == 8'd255) ? 1'b1 : 1'b0);

assign tmp_s_fu_148_p2 = (tmp_4_fu_118_p2 | tmp_3_fu_112_p2);

assign xf_V_1_cast_fu_178_p1 = new_mant_V_2_reg_294;

assign xf_V_fu_219_p3 = ((tmp_3_reg_306[0:0] === 1'b1) ? xf_V_1_cast_fu_178_p1 : tmp_5_fu_212_p3);

endmodule //operator_float_div4
