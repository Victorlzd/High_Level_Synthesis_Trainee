

================================================================
== Vivado HLS Report for 'operator_float_div11'
================================================================
* Date:           Fri Aug  3 10:43:37 2018

* Version:        2018.2 (Build 2258646 on Thu Jun 14 20:25:20 MDT 2018)
* Project:        operator_float_div
* Solution:       div11
* Product family: kintex7
* Target device:  xc7k160tfbg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|    32.570|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    1|    1|    1|    1|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 2
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 24.8>
ST_1 : Operation 3 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(float %in_r) nounwind, !map !362"   --->   Operation 3 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 4 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(float 0.000000e+00) nounwind, !map !368"   --->   Operation 4 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([21 x i8]* @operator_float_div11_1) nounwind"   --->   Operation 5 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%in_read = call float @_ssdm_op_Read.ap_auto.float(float %in_r) nounwind"   --->   Operation 6 'read' 'in_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLatency(i32 0, i32 1, [1 x i8]* @p_str) nounwind" [test.cpp:7842]   --->   Operation 7 'speclatency' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%p_Val2_s = bitcast float %in_read to i32" [test.cpp:7234->test.cpp:7854]   --->   Operation 8 'bitcast' 'p_Val2_s' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%p_Repl2_2 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_s, i32 31)" [test.cpp:7235->test.cpp:7854]   --->   Operation 9 'bitselect' 'p_Repl2_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%new_exp_V = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %p_Val2_s, i32 23, i32 30) nounwind" [test.cpp:7236->test.cpp:7854]   --->   Operation 10 'partselect' 'new_exp_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%new_mant_V = trunc i32 %p_Val2_s to i23" [test.cpp:7237->test.cpp:7854]   --->   Operation 11 'trunc' 'new_mant_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%xf_V_3_cast = zext i23 %new_mant_V to i24" [test.cpp:7859]   --->   Operation 12 'zext' 'xf_V_3_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (1.51ns)   --->   "%tmp = icmp ult i23 %new_mant_V, 3145728" [test.cpp:7860]   --->   Operation 13 'icmp' 'tmp' <Predicate = true> <Delay = 1.51> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.18> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 14 [1/1] (0.66ns)   --->   "%shift_V_cast_cast = select i1 %tmp, i8 4, i8 3" [test.cpp:7860]   --->   Operation 14 'select' 'shift_V_cast_cast' <Predicate = true> <Delay = 0.66> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.56> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 15 [1/1] (1.22ns)   --->   "%tmp_1 = icmp eq i8 %new_exp_V, -1" [test.cpp:7862]   --->   Operation 15 'icmp' 'tmp_1' <Predicate = true> <Delay = 1.22> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.18> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 16 [1/1] (1.22ns)   --->   "%tmp_2 = icmp ugt i8 %shift_V_cast_cast, %new_exp_V" [test.cpp:7863]   --->   Operation 16 'icmp' 'tmp_2' <Predicate = true> <Delay = 1.22> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.18> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 17 [1/1] (1.39ns)   --->   "%new_exp_V_1 = sub i8 %new_exp_V, %shift_V_cast_cast" [test.cpp:7866]   --->   Operation 17 'sub' 'new_exp_V_1' <Predicate = true> <Delay = 1.39> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.71> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 18 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_1)   --->   "%p_new_exp_V_1 = select i1 %tmp_1, i8 -1, i8 0" [test.cpp:6558->test.cpp:7887]   --->   Operation 18 'select' 'p_new_exp_V_1' <Predicate = true> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.56> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 19 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_1)   --->   "%tmp_8 = or i1 %tmp_1, %tmp_2" [test.cpp:6558->test.cpp:7887]   --->   Operation 19 'or' 'tmp_8' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 20 [1/1] (0.74ns) (out node of the LUT)   --->   "%p_Repl2_1 = select i1 %tmp_8, i8 %p_new_exp_V_1, i8 %new_exp_V_1" [test.cpp:6558->test.cpp:7887]   --->   Operation 20 'select' 'p_Repl2_1' <Predicate = true> <Delay = 0.74> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.56> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 21 [1/1] (1.06ns)   --->   "br i1 %tmp_1, label %._crit_edge416, label %_ifconv1" [test.cpp:7867]   --->   Operation 21 'br' <Predicate = true> <Delay = 1.06>
ST_1 : Operation 22 [1/1] (1.22ns)   --->   "%tmp_4 = icmp eq i8 %new_exp_V, 0" [test.cpp:7868]   --->   Operation 22 'icmp' 'tmp_4' <Predicate = (!tmp_1)> <Delay = 1.22> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.18> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 23 [1/1] (1.22ns)   --->   "%tmp_5 = icmp ult i8 %shift_V_cast_cast, %new_exp_V" [test.cpp:7871]   --->   Operation 23 'icmp' 'tmp_5' <Predicate = (!tmp_1)> <Delay = 1.22> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.18> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%tmp_13 = call i7 @_ssdm_op_PartSelect.i7.i32.i32.i32(i32 %p_Val2_s, i32 24, i32 30)" [test.cpp:7872]   --->   Operation 24 'partselect' 'tmp_13' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (1.18ns)   --->   "%icmp = icmp eq i7 %tmp_13, 0" [test.cpp:7872]   --->   Operation 25 'icmp' 'icmp' <Predicate = (!tmp_1)> <Delay = 1.18> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.18> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 26 [1/1] (1.39ns)   --->   "%shift_V = sub i8 1, %new_exp_V" [test.cpp:7873]   --->   Operation 26 'sub' 'shift_V' <Predicate = (!tmp_1)> <Delay = 1.39> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.71> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 27 [1/1] (1.39ns)   --->   "%shift_V_1 = add i8 -1, %new_exp_V" [test.cpp:7875]   --->   Operation 27 'add' 'shift_V_1' <Predicate = (!tmp_1)> <Delay = 1.39> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.71> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 28 [1/1] (0.00ns) (grouped into LUT with out node shift_V_3)   --->   "%sel_tmp3_demorgan = or i1 %tmp_4, %tmp_5" [test.cpp:7868]   --->   Operation 28 'or' 'sel_tmp3_demorgan' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 29 [1/1] (0.00ns) (grouped into LUT with out node shift_V_3)   --->   "%sel_tmp3 = xor i1 %sel_tmp3_demorgan, true" [test.cpp:7868]   --->   Operation 29 'xor' 'sel_tmp3' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 30 [1/1] (0.00ns) (grouped into LUT with out node shift_V_3)   --->   "%sel_tmp4 = and i1 %icmp, %sel_tmp3" [test.cpp:7872]   --->   Operation 30 'and' 'sel_tmp4' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 31 [1/1] (0.00ns) (grouped into LUT with out node shift_V_3)   --->   "%shift_V_2 = select i1 %sel_tmp4, i8 %shift_V, i8 %shift_V_1" [test.cpp:7872]   --->   Operation 31 'select' 'shift_V_2' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.56> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 32 [1/1] (0.74ns) (out node of the LUT)   --->   "%shift_V_3 = select i1 %tmp_4, i8 0, i8 %shift_V_2" [test.cpp:7868]   --->   Operation 32 'select' 'shift_V_3' <Predicate = (!tmp_1)> <Delay = 0.74> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.56> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 33 [1/1] (0.00ns) (grouped into LUT with out node shift_V_4)   --->   "%sel_tmp7 = xor i1 %tmp_4, true" [test.cpp:7868]   --->   Operation 33 'xor' 'sel_tmp7' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 34 [1/1] (0.00ns) (grouped into LUT with out node shift_V_4)   --->   "%sel_tmp8 = and i1 %tmp_5, %sel_tmp7" [test.cpp:7871]   --->   Operation 34 'and' 'sel_tmp8' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 35 [1/1] (0.74ns) (out node of the LUT)   --->   "%shift_V_4 = select i1 %sel_tmp8, i8 %shift_V_cast_cast, i8 %shift_V_3" [test.cpp:7871]   --->   Operation 35 'select' 'shift_V_4' <Predicate = (!tmp_1)> <Delay = 0.74> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.56> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%tmp_9 = call i24 @_ssdm_op_BitConcatenate.i24.i1.i23(i1 true, i23 %new_mant_V)" [test.cpp:7879]   --->   Operation 36 'bitconcatenate' 'tmp_9' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.66ns)   --->   "%xf_V_1 = select i1 %tmp_4, i24 %xf_V_3_cast, i24 %tmp_9" [test.cpp:7868]   --->   Operation 37 'select' 'xf_V_1' <Predicate = (!tmp_1)> <Delay = 0.66> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.56> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 38 [1/1] (0.00ns) (grouped into LUT with out node xf_V)   --->   "%tmp_s = zext i24 %xf_V_1 to i32" [test.cpp:7881]   --->   Operation 38 'zext' 'tmp_s' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns) (grouped into LUT with out node xf_V)   --->   "%tmp_3 = zext i8 %shift_V_4 to i32" [test.cpp:7881]   --->   Operation 39 'zext' 'tmp_3' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.00ns) (grouped into LUT with out node xf_V)   --->   "%tmp_3_cast = zext i8 %shift_V_4 to i24" [test.cpp:7881]   --->   Operation 40 'zext' 'tmp_3_cast' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.00ns) (grouped into LUT with out node xf_V)   --->   "%tmp_7 = lshr i24 %xf_V_1, %tmp_3_cast" [test.cpp:7881]   --->   Operation 41 'lshr' 'tmp_7' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "Shift">   --->   Core 28 'Shift' <Latency = 0> <II = 1> <Delay = 2.44> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 42 [1/1] (0.00ns) (grouped into LUT with out node xf_V)   --->   "%tmp_6 = shl i32 %tmp_s, %tmp_3" [test.cpp:7883]   --->   Operation 42 'shl' 'tmp_6' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "Shift">   --->   Core 28 'Shift' <Latency = 0> <II = 1> <Delay = 2.44> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 43 [1/1] (0.00ns) (grouped into LUT with out node xf_V)   --->   "%tmp_10 = zext i24 %tmp_7 to i28" [test.cpp:7881]   --->   Operation 43 'zext' 'tmp_10' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 44 [1/1] (0.00ns) (grouped into LUT with out node xf_V)   --->   "%tmp_14 = trunc i32 %tmp_6 to i28" [test.cpp:7883]   --->   Operation 44 'trunc' 'tmp_14' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 45 [1/1] (0.00ns) (grouped into LUT with out node xf_V)   --->   "%xf_V_2 = select i1 %icmp, i28 %tmp_10, i28 %tmp_14" [test.cpp:7872]   --->   Operation 45 'select' 'xf_V_2' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.56> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 46 [1/1] (2.44ns) (out node of the LUT)   --->   "%xf_V = add i28 5, %xf_V_2" [test.cpp:7884]   --->   Operation 46 'add' 'xf_V' <Predicate = (!tmp_1)> <Delay = 2.44> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.71> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 47 [1/1] (0.00ns)   --->   "%p_Result_16_i_i = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V, i32 26, i32 27) nounwind" [test.cpp:7829->test.cpp:7838->test.cpp:7885]   --->   Operation 47 'partselect' 'p_Result_16_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 48 [1/1] (3.50ns)   --->   "%call_ret_i_i = call fastcc { i2, i4 } @lut_div11_chunk(i2 %p_Result_16_i_i, i4 0) nounwind" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 48 'call' 'call_ret_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_1 : Operation 49 [1/1] (0.00ns)   --->   "%r_V_ret_i_i = extractvalue { i2, i4 } %call_ret_i_i, 1" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 49 'extractvalue' 'r_V_ret_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 50 [1/1] (0.00ns)   --->   "%p_Result_16_1_i_i = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V, i32 24, i32 25) nounwind" [test.cpp:7829->test.cpp:7838->test.cpp:7885]   --->   Operation 50 'partselect' 'p_Result_16_1_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 51 [1/1] (3.50ns)   --->   "%call_ret_1_i_i = call fastcc { i2, i4 } @lut_div11_chunk(i2 %p_Result_16_1_i_i, i4 %r_V_ret_i_i) nounwind" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 51 'call' 'call_ret_1_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_1 : Operation 52 [1/1] (0.00ns)   --->   "%r_V_ret_1_i_i = extractvalue { i2, i4 } %call_ret_1_i_i, 1" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 52 'extractvalue' 'r_V_ret_1_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 53 [1/1] (0.00ns)   --->   "%p_Result_16_2_i_i = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V, i32 22, i32 23) nounwind" [test.cpp:7829->test.cpp:7838->test.cpp:7885]   --->   Operation 53 'partselect' 'p_Result_16_2_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 54 [1/1] (3.50ns)   --->   "%call_ret_2_i_i = call fastcc { i2, i4 } @lut_div11_chunk(i2 %p_Result_16_2_i_i, i4 %r_V_ret_1_i_i) nounwind" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 54 'call' 'call_ret_2_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_1 : Operation 55 [1/1] (0.00ns)   --->   "%q_chunk_V_0_2_i_i = extractvalue { i2, i4 } %call_ret_2_i_i, 0" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 55 'extractvalue' 'q_chunk_V_0_2_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 56 [1/1] (0.00ns)   --->   "%r_V_ret_2_i_i = extractvalue { i2, i4 } %call_ret_2_i_i, 1" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 56 'extractvalue' 'r_V_ret_2_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 57 [1/1] (0.00ns)   --->   "%p_Result_16_3_i_i = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V, i32 20, i32 21) nounwind" [test.cpp:7829->test.cpp:7838->test.cpp:7885]   --->   Operation 57 'partselect' 'p_Result_16_3_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 58 [1/1] (3.50ns)   --->   "%call_ret_3_i_i = call fastcc { i2, i4 } @lut_div11_chunk(i2 %p_Result_16_3_i_i, i4 %r_V_ret_2_i_i) nounwind" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 58 'call' 'call_ret_3_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_1 : Operation 59 [1/1] (0.00ns)   --->   "%q_chunk_V_0_3_i_i = extractvalue { i2, i4 } %call_ret_3_i_i, 0" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 59 'extractvalue' 'q_chunk_V_0_3_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 60 [1/1] (0.00ns)   --->   "%r_V_ret_3_i_i = extractvalue { i2, i4 } %call_ret_3_i_i, 1" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 60 'extractvalue' 'r_V_ret_3_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 61 [1/1] (0.00ns)   --->   "%p_Result_16_4_i_i = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V, i32 18, i32 19) nounwind" [test.cpp:7829->test.cpp:7838->test.cpp:7885]   --->   Operation 61 'partselect' 'p_Result_16_4_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 62 [1/1] (3.50ns)   --->   "%call_ret_4_i_i = call fastcc { i2, i4 } @lut_div11_chunk(i2 %p_Result_16_4_i_i, i4 %r_V_ret_3_i_i) nounwind" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 62 'call' 'call_ret_4_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_1 : Operation 63 [1/1] (0.00ns)   --->   "%q_chunk_V_0_4_i_i = extractvalue { i2, i4 } %call_ret_4_i_i, 0" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 63 'extractvalue' 'q_chunk_V_0_4_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 64 [1/1] (0.00ns)   --->   "%r_V_ret_4_i_i = extractvalue { i2, i4 } %call_ret_4_i_i, 1" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 64 'extractvalue' 'r_V_ret_4_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 65 [1/1] (0.00ns)   --->   "%p_Result_16_5_i_i = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V, i32 16, i32 17) nounwind" [test.cpp:7829->test.cpp:7838->test.cpp:7885]   --->   Operation 65 'partselect' 'p_Result_16_5_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 66 [1/1] (0.00ns)   --->   "%p_Result_16_6_i_i = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V, i32 14, i32 15) nounwind" [test.cpp:7829->test.cpp:7838->test.cpp:7885]   --->   Operation 66 'partselect' 'p_Result_16_6_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 67 [1/1] (0.00ns)   --->   "%p_Result_16_7_i_i = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V, i32 12, i32 13) nounwind" [test.cpp:7829->test.cpp:7838->test.cpp:7885]   --->   Operation 67 'partselect' 'p_Result_16_7_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 68 [1/1] (0.00ns)   --->   "%p_Result_16_8_i_i = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V, i32 10, i32 11) nounwind" [test.cpp:7829->test.cpp:7838->test.cpp:7885]   --->   Operation 68 'partselect' 'p_Result_16_8_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 69 [1/1] (0.00ns)   --->   "%p_Result_16_9_i_i = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V, i32 8, i32 9) nounwind" [test.cpp:7829->test.cpp:7838->test.cpp:7885]   --->   Operation 69 'partselect' 'p_Result_16_9_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 70 [1/1] (0.00ns)   --->   "%p_Result_16_i_i_8 = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V, i32 6, i32 7) nounwind" [test.cpp:7829->test.cpp:7838->test.cpp:7885]   --->   Operation 70 'partselect' 'p_Result_16_i_i_8' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 71 [1/1] (0.00ns)   --->   "%p_Result_16_10_i_i = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V, i32 4, i32 5) nounwind" [test.cpp:7829->test.cpp:7838->test.cpp:7885]   --->   Operation 71 'partselect' 'p_Result_16_10_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 72 [1/1] (0.00ns)   --->   "%p_Result_16_11_i_i = call i2 @_ssdm_op_PartSelect.i2.i28.i32.i32(i28 %xf_V, i32 2, i32 3) nounwind" [test.cpp:7829->test.cpp:7838->test.cpp:7885]   --->   Operation 72 'partselect' 'p_Result_16_11_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 73 [1/1] (0.00ns)   --->   "%tmp_15 = trunc i28 %xf_V to i2" [test.cpp:7829->test.cpp:7838->test.cpp:7885]   --->   Operation 73 'trunc' 'tmp_15' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 74 [1/1] (0.00ns)   --->   "%tmp_16 = trunc i2 %q_chunk_V_0_2_i_i to i1" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 74 'trunc' 'tmp_16' <Predicate = (!tmp_1)> <Delay = 0.00>

State 2 <SV = 1> <Delay = 32.5>
ST_2 : Operation 75 [1/1] (3.50ns)   --->   "%call_ret_5_i_i = call fastcc { i2, i4 } @lut_div11_chunk(i2 %p_Result_16_5_i_i, i4 %r_V_ret_4_i_i) nounwind" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 75 'call' 'call_ret_5_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 76 [1/1] (0.00ns)   --->   "%q_chunk_V_0_5_i_i = extractvalue { i2, i4 } %call_ret_5_i_i, 0" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 76 'extractvalue' 'q_chunk_V_0_5_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 77 [1/1] (0.00ns)   --->   "%r_V_ret_5_i_i = extractvalue { i2, i4 } %call_ret_5_i_i, 1" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 77 'extractvalue' 'r_V_ret_5_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 78 [1/1] (3.50ns)   --->   "%call_ret_6_i_i = call fastcc { i2, i4 } @lut_div11_chunk(i2 %p_Result_16_6_i_i, i4 %r_V_ret_5_i_i) nounwind" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 78 'call' 'call_ret_6_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 79 [1/1] (0.00ns)   --->   "%q_chunk_V_0_6_i_i = extractvalue { i2, i4 } %call_ret_6_i_i, 0" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 79 'extractvalue' 'q_chunk_V_0_6_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 80 [1/1] (0.00ns)   --->   "%r_V_ret_6_i_i = extractvalue { i2, i4 } %call_ret_6_i_i, 1" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 80 'extractvalue' 'r_V_ret_6_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 81 [1/1] (3.50ns)   --->   "%call_ret_7_i_i = call fastcc { i2, i4 } @lut_div11_chunk(i2 %p_Result_16_7_i_i, i4 %r_V_ret_6_i_i) nounwind" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 81 'call' 'call_ret_7_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 82 [1/1] (0.00ns)   --->   "%q_chunk_V_0_7_i_i = extractvalue { i2, i4 } %call_ret_7_i_i, 0" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 82 'extractvalue' 'q_chunk_V_0_7_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 83 [1/1] (0.00ns)   --->   "%r_V_ret_7_i_i = extractvalue { i2, i4 } %call_ret_7_i_i, 1" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 83 'extractvalue' 'r_V_ret_7_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 84 [1/1] (3.50ns)   --->   "%call_ret_8_i_i = call fastcc { i2, i4 } @lut_div11_chunk(i2 %p_Result_16_8_i_i, i4 %r_V_ret_7_i_i) nounwind" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 84 'call' 'call_ret_8_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 85 [1/1] (0.00ns)   --->   "%q_chunk_V_0_8_i_i = extractvalue { i2, i4 } %call_ret_8_i_i, 0" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 85 'extractvalue' 'q_chunk_V_0_8_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 86 [1/1] (0.00ns)   --->   "%r_V_ret_8_i_i = extractvalue { i2, i4 } %call_ret_8_i_i, 1" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 86 'extractvalue' 'r_V_ret_8_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 87 [1/1] (3.50ns)   --->   "%call_ret_9_i_i = call fastcc { i2, i4 } @lut_div11_chunk(i2 %p_Result_16_9_i_i, i4 %r_V_ret_8_i_i) nounwind" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 87 'call' 'call_ret_9_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 88 [1/1] (0.00ns)   --->   "%q_chunk_V_0_9_i_i = extractvalue { i2, i4 } %call_ret_9_i_i, 0" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 88 'extractvalue' 'q_chunk_V_0_9_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 89 [1/1] (0.00ns)   --->   "%r_V_ret_9_i_i = extractvalue { i2, i4 } %call_ret_9_i_i, 1" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 89 'extractvalue' 'r_V_ret_9_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 90 [1/1] (3.50ns)   --->   "%call_ret_i_i_9 = call fastcc { i2, i4 } @lut_div11_chunk(i2 %p_Result_16_i_i_8, i4 %r_V_ret_9_i_i) nounwind" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 90 'call' 'call_ret_i_i_9' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 91 [1/1] (0.00ns)   --->   "%q_chunk_V_0_i_i = extractvalue { i2, i4 } %call_ret_i_i_9, 0" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 91 'extractvalue' 'q_chunk_V_0_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 92 [1/1] (0.00ns)   --->   "%r_V_ret_i_i_10 = extractvalue { i2, i4 } %call_ret_i_i_9, 1" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 92 'extractvalue' 'r_V_ret_i_i_10' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 93 [1/1] (3.50ns)   --->   "%call_ret_10_i_i = call fastcc { i2, i4 } @lut_div11_chunk(i2 %p_Result_16_10_i_i, i4 %r_V_ret_i_i_10) nounwind" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 93 'call' 'call_ret_10_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 94 [1/1] (0.00ns)   --->   "%q_chunk_V_0_10_i_i = extractvalue { i2, i4 } %call_ret_10_i_i, 0" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 94 'extractvalue' 'q_chunk_V_0_10_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 95 [1/1] (0.00ns)   --->   "%r_V_ret_10_i_i = extractvalue { i2, i4 } %call_ret_10_i_i, 1" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 95 'extractvalue' 'r_V_ret_10_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 96 [1/1] (3.50ns)   --->   "%call_ret_11_i_i = call fastcc { i2, i4 } @lut_div11_chunk(i2 %p_Result_16_11_i_i, i4 %r_V_ret_10_i_i) nounwind" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 96 'call' 'call_ret_11_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 97 [1/1] (0.00ns)   --->   "%q_chunk_V_0_11_i_i = extractvalue { i2, i4 } %call_ret_11_i_i, 0" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 97 'extractvalue' 'q_chunk_V_0_11_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 98 [1/1] (0.00ns)   --->   "%r_V_ret_11_i_i = extractvalue { i2, i4 } %call_ret_11_i_i, 1" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 98 'extractvalue' 'r_V_ret_11_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 99 [1/1] (3.50ns)   --->   "%call_ret_12_i_i = call fastcc { i2, i4 } @lut_div11_chunk(i2 %tmp_15, i4 %r_V_ret_11_i_i) nounwind" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 99 'call' 'call_ret_12_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 100 [1/1] (0.00ns)   --->   "%q_chunk_V_0_12_i_i = extractvalue { i2, i4 } %call_ret_12_i_i, 0" [test.cpp:7830->test.cpp:7838->test.cpp:7885]   --->   Operation 100 'extractvalue' 'q_chunk_V_0_12_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 101 [1/1] (0.00ns)   --->   "%new_mant_V_1 = call i23 @_ssdm_op_BitConcatenate.i23.i1.i2.i2.i2.i2.i2.i2.i2.i2.i2.i2.i2(i1 %tmp_16, i2 %q_chunk_V_0_3_i_i, i2 %q_chunk_V_0_4_i_i, i2 %q_chunk_V_0_5_i_i, i2 %q_chunk_V_0_6_i_i, i2 %q_chunk_V_0_7_i_i, i2 %q_chunk_V_0_8_i_i, i2 %q_chunk_V_0_9_i_i, i2 %q_chunk_V_0_i_i, i2 %q_chunk_V_0_10_i_i, i2 %q_chunk_V_0_11_i_i, i2 %q_chunk_V_0_12_i_i)" [test.cpp:7885]   --->   Operation 101 'bitconcatenate' 'new_mant_V_1' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 102 [1/1] (1.06ns)   --->   "br label %._crit_edge416" [test.cpp:7886]   --->   Operation 102 'br' <Predicate = (!tmp_1)> <Delay = 1.06>
ST_2 : Operation 103 [1/1] (0.00ns)   --->   "%p_Repl2_s = phi i23 [ %new_mant_V_1, %_ifconv1 ], [ %new_mant_V, %_ifconv ]"   --->   Operation 103 'phi' 'p_Repl2_s' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 104 [1/1] (0.00ns)   --->   "%p_Result_s = call i32 @_ssdm_op_BitConcatenate.i32.i1.i8.i23(i1 %p_Repl2_2, i8 %p_Repl2_1, i23 %p_Repl2_s) nounwind" [test.cpp:6559->test.cpp:7887]   --->   Operation 104 'bitconcatenate' 'p_Result_s' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 105 [1/1] (0.00ns)   --->   "%out = bitcast i32 %p_Result_s to float" [test.cpp:6560->test.cpp:7887]   --->   Operation 105 'bitcast' 'out' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 106 [1/1] (0.00ns)   --->   "ret float %out" [test.cpp:7888]   --->   Operation 106 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 24.8ns
The critical path consists of the following:
	wire read on port 'in_r' [5]  (0 ns)
	'icmp' operation ('tmp', test.cpp:7860) [12]  (1.52 ns)
	'select' operation ('shift_V_cast_cast', test.cpp:7860) [13]  (0.66 ns)
	'icmp' operation ('tmp_5', test.cpp:7871) [23]  (1.22 ns)
	'or' operation ('sel_tmp3_demorgan', test.cpp:7868) [28]  (0 ns)
	'xor' operation ('sel_tmp3', test.cpp:7868) [29]  (0 ns)
	'and' operation ('sel_tmp4', test.cpp:7872) [30]  (0 ns)
	'select' operation ('shift.V', test.cpp:7872) [31]  (0 ns)
	'select' operation ('shift.V', test.cpp:7868) [32]  (0.74 ns)
	'select' operation ('shift.V', test.cpp:7871) [35]  (0.74 ns)
	'shl' operation ('tmp_6', test.cpp:7883) [42]  (0 ns)
	'select' operation ('xf.V', test.cpp:7872) [45]  (0 ns)
	'add' operation ('xf.V', test.cpp:7884) [46]  (2.45 ns)
	'call' operation ('call_ret_i_i', test.cpp:7830->test.cpp:7838->test.cpp:7885) to 'lut_div11_chunk' [48]  (3.5 ns)
	'call' operation ('call_ret_1_i_i', test.cpp:7830->test.cpp:7838->test.cpp:7885) to 'lut_div11_chunk' [51]  (3.5 ns)
	'call' operation ('call_ret_2_i_i', test.cpp:7830->test.cpp:7838->test.cpp:7885) to 'lut_div11_chunk' [54]  (3.5 ns)
	'call' operation ('call_ret_3_i_i', test.cpp:7830->test.cpp:7838->test.cpp:7885) to 'lut_div11_chunk' [58]  (3.5 ns)
	'call' operation ('call_ret_4_i_i', test.cpp:7830->test.cpp:7838->test.cpp:7885) to 'lut_div11_chunk' [62]  (3.5 ns)

 <State 2>: 32.6ns
The critical path consists of the following:
	'call' operation ('call_ret_5_i_i', test.cpp:7830->test.cpp:7838->test.cpp:7885) to 'lut_div11_chunk' [66]  (3.5 ns)
	'call' operation ('call_ret_6_i_i', test.cpp:7830->test.cpp:7838->test.cpp:7885) to 'lut_div11_chunk' [70]  (3.5 ns)
	'call' operation ('call_ret_7_i_i', test.cpp:7830->test.cpp:7838->test.cpp:7885) to 'lut_div11_chunk' [74]  (3.5 ns)
	'call' operation ('call_ret_8_i_i', test.cpp:7830->test.cpp:7838->test.cpp:7885) to 'lut_div11_chunk' [78]  (3.5 ns)
	'call' operation ('call_ret_9_i_i', test.cpp:7830->test.cpp:7838->test.cpp:7885) to 'lut_div11_chunk' [82]  (3.5 ns)
	'call' operation ('call_ret_i_i_9', test.cpp:7830->test.cpp:7838->test.cpp:7885) to 'lut_div11_chunk' [86]  (3.5 ns)
	'call' operation ('call_ret_10_i_i', test.cpp:7830->test.cpp:7838->test.cpp:7885) to 'lut_div11_chunk' [90]  (3.5 ns)
	'call' operation ('call_ret_11_i_i', test.cpp:7830->test.cpp:7838->test.cpp:7885) to 'lut_div11_chunk' [94]  (3.5 ns)
	'call' operation ('call_ret_12_i_i', test.cpp:7830->test.cpp:7838->test.cpp:7885) to 'lut_div11_chunk' [98]  (3.5 ns)
	multiplexor before 'phi' operation ('mant.V') with incoming values : ('ssdm_int<23 + 1024 * 0, false>.V', test.cpp:7237->test.cpp:7854) ('new_mant.V', test.cpp:7885) [104]  (1.06 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
