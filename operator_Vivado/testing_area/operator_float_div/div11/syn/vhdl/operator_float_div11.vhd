-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity operator_float_div11 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of operator_float_div11 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "operator_float_div11,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.344000,HLS_SYN_LAT=50,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=623,HLS_SYN_LUT=852,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv23_300000 : STD_LOGIC_VECTOR (22 downto 0) := "01100000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv28_5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_145 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_lut_div11_chunk_fu_122_ap_idle : STD_LOGIC;
    signal grp_lut_div11_chunk_fu_122_ap_ready : STD_LOGIC;
    signal grp_lut_div11_chunk_fu_122_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal p_Repl2_2_reg_580 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_exp_V_reg_585 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_mant_V_1_fu_172_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal new_mant_V_1_reg_596 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_603 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_608 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_cast_cast_fu_198_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_V_cast_cast_reg_614 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_3_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_621 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_629 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_fu_215_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_V_reg_635 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_V_1_fu_220_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_V_1_reg_640 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_V_4_fu_271_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_V_4_reg_645 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_5_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_651 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_1_fu_297_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_1_reg_656 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_314_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_2_reg_676 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_13_fu_325_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_13_reg_681 : STD_LOGIC_VECTOR (27 downto 0);
    signal xf_V_fu_332_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal xf_V_reg_686 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal d_chunk_V_reg_692 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal d_chunk_V_1_reg_697 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_chunk_V_2_reg_702 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_chunk_V_3_reg_707 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_chunk_V_4_reg_712 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_chunk_V_5_reg_717 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_chunk_V_6_reg_722 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_chunk_V_7_reg_727 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_chunk_V_8_reg_732 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_chunk_V_9_reg_737 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_chunk_V_10_reg_742 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_chunk_V_11_reg_747 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_chunk_V_12_reg_752 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_chunk_V_13_fu_489_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_chunk_V_13_reg_757 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_lut_div11_chunk_fu_122_ap_return_0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_lut_div11_chunk_fu_122_ap_return_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal call_ret3_i_i_reg_762_0 : STD_LOGIC_VECTOR (1 downto 0);
    signal call_ret4_i_i_reg_767_0 : STD_LOGIC_VECTOR (1 downto 0);
    signal call_ret5_i_i_reg_772_0 : STD_LOGIC_VECTOR (1 downto 0);
    signal call_ret6_i_i_reg_777_0 : STD_LOGIC_VECTOR (1 downto 0);
    signal call_ret7_i_i_reg_782_0 : STD_LOGIC_VECTOR (1 downto 0);
    signal call_ret8_i_i_reg_787_0 : STD_LOGIC_VECTOR (1 downto 0);
    signal call_ret9_i_i_reg_792_0 : STD_LOGIC_VECTOR (1 downto 0);
    signal call_ret10_i_i_reg_797_0 : STD_LOGIC_VECTOR (1 downto 0);
    signal call_ret11_i_i_reg_802_0 : STD_LOGIC_VECTOR (1 downto 0);
    signal call_ret12_i_i_reg_807_0 : STD_LOGIC_VECTOR (1 downto 0);
    signal call_ret13_i_i_reg_812_0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_lut_div11_chunk_fu_122_ap_start : STD_LOGIC;
    signal grp_lut_div11_chunk_fu_122_d_V : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_lut_div11_chunk_fu_122_r_in_V : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_lut_div11_chunk_fu_122_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal p_Val2_s_fu_150_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_182_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sel_tmp2_demorgan_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_2_fu_248_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp6_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_3_fu_254_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_283_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_exp_V_1_fu_229_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_314_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_319_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_329_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Result_s_fu_338_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal xf_V_1_fu_347_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal xf_V_4_fu_353_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_16_fu_530_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_mant_V_fu_534_p13 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Repl2_s_fu_562_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_1_fu_568_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);

    component lut_div11_chunk IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        d_V : IN STD_LOGIC_VECTOR (1 downto 0);
        r_in_V : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component operator_float_dibkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (22 downto 0);
        din1 : IN STD_LOGIC_VECTOR (22 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component operator_float_dicud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_lut_div11_chunk_fu_122 : component lut_div11_chunk
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lut_div11_chunk_fu_122_ap_start,
        ap_done => grp_lut_div11_chunk_fu_122_ap_done,
        ap_idle => grp_lut_div11_chunk_fu_122_ap_idle,
        ap_ready => grp_lut_div11_chunk_fu_122_ap_ready,
        d_V => grp_lut_div11_chunk_fu_122_d_V,
        r_in_V => grp_lut_div11_chunk_fu_122_r_in_V,
        ap_return_0 => grp_lut_div11_chunk_fu_122_ap_return_0,
        ap_return_1 => grp_lut_div11_chunk_fu_122_ap_return_1);

    operator_float_dibkb_U9 : component operator_float_dibkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        OP => 1,
        din0_WIDTH => 23,
        din1_WIDTH => 8,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => new_mant_V_1_reg_596,
        din1 => grp_fu_314_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_314_p2);

    operator_float_dicud_U10 : component operator_float_dicud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        OP => 0,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_319_p0,
        din1 => grp_fu_319_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_319_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_lut_div11_chunk_fu_122_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lut_div11_chunk_fu_122_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    grp_lut_div11_chunk_fu_122_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lut_div11_chunk_fu_122_ap_ready = ap_const_logic_1)) then 
                    grp_lut_div11_chunk_fu_122_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                call_ret10_i_i_reg_797_0 <= grp_lut_div11_chunk_fu_122_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                call_ret11_i_i_reg_802_0 <= grp_lut_div11_chunk_fu_122_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                call_ret12_i_i_reg_807_0 <= grp_lut_div11_chunk_fu_122_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                call_ret13_i_i_reg_812_0 <= grp_lut_div11_chunk_fu_122_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                call_ret3_i_i_reg_762_0 <= grp_lut_div11_chunk_fu_122_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                call_ret4_i_i_reg_767_0 <= grp_lut_div11_chunk_fu_122_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                call_ret5_i_i_reg_772_0 <= grp_lut_div11_chunk_fu_122_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                call_ret6_i_i_reg_777_0 <= grp_lut_div11_chunk_fu_122_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                call_ret7_i_i_reg_782_0 <= grp_lut_div11_chunk_fu_122_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                call_ret8_i_i_reg_787_0 <= grp_lut_div11_chunk_fu_122_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                call_ret9_i_i_reg_792_0 <= grp_lut_div11_chunk_fu_122_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                d_chunk_V_10_reg_742 <= xf_V_4_fu_353_p2(7 downto 6);
                d_chunk_V_11_reg_747 <= xf_V_4_fu_353_p2(5 downto 4);
                d_chunk_V_12_reg_752 <= xf_V_4_fu_353_p2(3 downto 2);
                d_chunk_V_13_reg_757 <= d_chunk_V_13_fu_489_p1;
                d_chunk_V_1_reg_697 <= xf_V_4_fu_353_p2(25 downto 24);
                d_chunk_V_2_reg_702 <= xf_V_4_fu_353_p2(23 downto 22);
                d_chunk_V_3_reg_707 <= xf_V_4_fu_353_p2(21 downto 20);
                d_chunk_V_4_reg_712 <= xf_V_4_fu_353_p2(19 downto 18);
                d_chunk_V_5_reg_717 <= xf_V_4_fu_353_p2(17 downto 16);
                d_chunk_V_6_reg_722 <= xf_V_4_fu_353_p2(15 downto 14);
                d_chunk_V_7_reg_727 <= xf_V_4_fu_353_p2(13 downto 12);
                d_chunk_V_8_reg_732 <= xf_V_4_fu_353_p2(11 downto 10);
                d_chunk_V_9_reg_737 <= xf_V_4_fu_353_p2(9 downto 8);
                d_chunk_V_reg_692 <= xf_V_4_fu_353_p2(27 downto 26);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_reg_608 <= icmp_fu_192_p2;
                new_exp_V_reg_585 <= p_Val2_s_fu_150_p1(30 downto 23);
                new_mant_V_1_reg_596 <= new_mant_V_1_fu_172_p1;
                p_Repl2_2_reg_580 <= p_Val2_s_fu_150_p1(31 downto 31);
                tmp_reg_603 <= tmp_fu_176_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p_Repl2_1_reg_656 <= p_Repl2_1_fu_297_p3;
                shift_V_4_reg_645 <= shift_V_4_fu_271_p3;
                tmp_5_reg_651 <= tmp_5_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then
                reg_145 <= grp_lut_div11_chunk_fu_122_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                shift_V_1_reg_640 <= shift_V_1_fu_220_p2;
                    shift_V_cast_cast_reg_614(2 downto 0) <= shift_V_cast_cast_fu_198_p3(2 downto 0);
                shift_V_reg_635 <= shift_V_fu_215_p2;
                tmp_3_reg_621 <= tmp_3_fu_205_p2;
                tmp_4_reg_629 <= tmp_4_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_reg_608 = ap_const_lv1_0))) then
                tmp_13_reg_681 <= tmp_13_fu_325_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_reg_608 = ap_const_lv1_1))) then
                tmp_2_reg_676 <= grp_fu_314_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                xf_V_reg_686 <= xf_V_fu_332_p3;
            end if;
        end if;
    end process;
    shift_V_cast_cast_reg_614(7 downto 3) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state11, grp_lut_div11_chunk_fu_122_ap_done, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(grp_lut_div11_chunk_fu_122_ap_done, ap_CS_fsm_state37)
    begin
        if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_lut_div11_chunk_fu_122_ap_done, ap_CS_fsm_state37)
    begin
        if (((grp_lut_div11_chunk_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_1_fu_568_p4;
    d_chunk_V_13_fu_489_p1 <= xf_V_4_fu_353_p2(2 - 1 downto 0);
    grp_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_V_4_reg_645),23));
    grp_fu_319_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_mant_V_1_reg_596),32));
    grp_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_V_4_reg_645),32));
    grp_lut_div11_chunk_fu_122_ap_start <= grp_lut_div11_chunk_fu_122_ap_start_reg;

    grp_lut_div11_chunk_fu_122_d_V_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, d_chunk_V_reg_692, d_chunk_V_1_reg_697, d_chunk_V_2_reg_702, d_chunk_V_3_reg_707, d_chunk_V_4_reg_712, d_chunk_V_5_reg_717, d_chunk_V_6_reg_722, d_chunk_V_7_reg_727, d_chunk_V_8_reg_732, d_chunk_V_9_reg_737, d_chunk_V_10_reg_742, d_chunk_V_11_reg_747, d_chunk_V_12_reg_752, d_chunk_V_13_reg_757, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_lut_div11_chunk_fu_122_d_V <= d_chunk_V_13_reg_757;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_lut_div11_chunk_fu_122_d_V <= d_chunk_V_12_reg_752;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_lut_div11_chunk_fu_122_d_V <= d_chunk_V_11_reg_747;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_lut_div11_chunk_fu_122_d_V <= d_chunk_V_10_reg_742;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_lut_div11_chunk_fu_122_d_V <= d_chunk_V_9_reg_737;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_lut_div11_chunk_fu_122_d_V <= d_chunk_V_8_reg_732;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_lut_div11_chunk_fu_122_d_V <= d_chunk_V_7_reg_727;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_lut_div11_chunk_fu_122_d_V <= d_chunk_V_6_reg_722;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_lut_div11_chunk_fu_122_d_V <= d_chunk_V_5_reg_717;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_lut_div11_chunk_fu_122_d_V <= d_chunk_V_4_reg_712;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_lut_div11_chunk_fu_122_d_V <= d_chunk_V_3_reg_707;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_lut_div11_chunk_fu_122_d_V <= d_chunk_V_2_reg_702;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_lut_div11_chunk_fu_122_d_V <= d_chunk_V_1_reg_697;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_lut_div11_chunk_fu_122_d_V <= d_chunk_V_reg_692;
        else 
            grp_lut_div11_chunk_fu_122_d_V <= "XX";
        end if; 
    end process;


    grp_lut_div11_chunk_fu_122_r_in_V_assign_proc : process(reg_145, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_lut_div11_chunk_fu_122_r_in_V <= reg_145;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_lut_div11_chunk_fu_122_r_in_V <= ap_const_lv4_0;
        else 
            grp_lut_div11_chunk_fu_122_r_in_V <= "XXXX";
        end if; 
    end process;

    icmp_fu_192_p2 <= "1" when (tmp_12_fu_182_p4 = ap_const_lv7_0) else "0";
    new_exp_V_1_fu_229_p2 <= std_logic_vector(unsigned(new_exp_V_reg_585) - unsigned(shift_V_cast_cast_reg_614));
    new_mant_V_1_fu_172_p1 <= p_Val2_s_fu_150_p1(23 - 1 downto 0);
    new_mant_V_fu_534_p13 <= (((((((((((tmp_16_fu_530_p1 & call_ret4_i_i_reg_767_0) & call_ret5_i_i_reg_772_0) & call_ret6_i_i_reg_777_0) & call_ret7_i_i_reg_782_0) & call_ret8_i_i_reg_787_0) & call_ret9_i_i_reg_792_0) & call_ret10_i_i_reg_797_0) & call_ret11_i_i_reg_802_0) & call_ret12_i_i_reg_807_0) & call_ret13_i_i_reg_812_0) & grp_lut_div11_chunk_fu_122_ap_return_0);
    p_Repl2_1_fu_297_p3 <= 
        p_s_fu_283_p3 when (tmp_8_fu_291_p2(0) = '1') else 
        new_exp_V_1_fu_229_p2;
    p_Repl2_s_fu_562_p3 <= 
        new_mant_V_1_reg_596 when (tmp_5_reg_651(0) = '1') else 
        new_mant_V_fu_534_p13;
    p_Result_1_fu_568_p4 <= ((p_Repl2_2_reg_580 & p_Repl2_1_reg_656) & p_Repl2_s_fu_562_p3);
    
    p_Result_s_fu_338_p4_proc : process(xf_V_reg_686)
    begin
        p_Result_s_fu_338_p4 <= xf_V_reg_686;
        p_Result_s_fu_338_p4(23) <= ap_const_lv1_1(0);
    end process;

    p_Val2_s_fu_150_p1 <= in_r;
    p_s_fu_283_p3 <= 
        ap_const_lv8_FF when (tmp_5_fu_278_p2(0) = '1') else 
        ap_const_lv8_0;
    sel_tmp2_demorgan_fu_233_p2 <= (tmp_4_reg_629 or tmp_3_reg_621);
    sel_tmp2_fu_237_p2 <= (sel_tmp2_demorgan_fu_233_p2 xor ap_const_lv1_1);
    sel_tmp3_fu_243_p2 <= (sel_tmp2_fu_237_p2 and icmp_reg_608);
    sel_tmp6_fu_261_p2 <= (tmp_3_reg_621 xor ap_const_lv1_1);
    sel_tmp7_fu_266_p2 <= (tmp_4_reg_629 and sel_tmp6_fu_261_p2);
    shift_V_1_fu_220_p2 <= std_logic_vector(signed(ap_const_lv8_FF) + signed(new_exp_V_reg_585));
    shift_V_2_fu_248_p3 <= 
        shift_V_reg_635 when (sel_tmp3_fu_243_p2(0) = '1') else 
        shift_V_1_reg_640;
    shift_V_3_fu_254_p3 <= 
        ap_const_lv8_0 when (tmp_3_reg_621(0) = '1') else 
        shift_V_2_fu_248_p3;
    shift_V_4_fu_271_p3 <= 
        shift_V_cast_cast_reg_614 when (sel_tmp7_fu_266_p2(0) = '1') else 
        shift_V_3_fu_254_p3;
    shift_V_cast_cast_fu_198_p3 <= 
        ap_const_lv8_4 when (tmp_reg_603(0) = '1') else 
        ap_const_lv8_3;
    shift_V_fu_215_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) - unsigned(new_exp_V_reg_585));
    tmp_12_fu_182_p4 <= p_Val2_s_fu_150_p1(30 downto 24);
    tmp_13_fu_325_p1 <= grp_fu_319_p2(28 - 1 downto 0);
    tmp_16_fu_530_p1 <= call_ret3_i_i_reg_762_0(1 - 1 downto 0);
    tmp_1_fu_225_p2 <= "1" when (unsigned(shift_V_cast_cast_reg_614) > unsigned(new_exp_V_reg_585)) else "0";
    tmp_3_fu_205_p2 <= "1" when (new_exp_V_reg_585 = ap_const_lv8_0) else "0";
    tmp_4_fu_210_p2 <= "1" when (unsigned(shift_V_cast_cast_fu_198_p3) < unsigned(new_exp_V_reg_585)) else "0";
    tmp_5_fu_278_p2 <= "1" when (new_exp_V_reg_585 = ap_const_lv8_FF) else "0";
    tmp_6_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_676),28));
    tmp_8_fu_291_p2 <= (tmp_5_fu_278_p2 or tmp_1_fu_225_p2);
    tmp_fu_176_p2 <= "1" when (unsigned(new_mant_V_1_fu_172_p1) < unsigned(ap_const_lv23_300000)) else "0";
    xf_V_1_fu_347_p3 <= 
        xf_V_reg_686 when (tmp_3_reg_621(0) = '1') else 
        p_Result_s_fu_338_p4;
    xf_V_4_fu_353_p2 <= std_logic_vector(unsigned(ap_const_lv28_5) + unsigned(xf_V_1_fu_347_p3));
    xf_V_fu_332_p3 <= 
        tmp_6_fu_329_p1 when (icmp_reg_608(0) = '1') else 
        tmp_13_reg_681;
end behav;
