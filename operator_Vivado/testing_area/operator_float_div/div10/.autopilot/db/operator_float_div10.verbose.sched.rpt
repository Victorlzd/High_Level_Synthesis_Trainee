

================================================================
== Vivado HLS Report for 'operator_float_div10'
================================================================
* Date:           Fri Aug 31 16:09:11 2018

* Version:        2018.2 (Build 2258646 on Thu Jun 14 20:25:20 MDT 2018)
* Project:        operator_float_div
* Solution:       div10
* Product family: kintex7
* Target device:  xc7k160tfbg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   2.50|     2.132|        0.31|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |   38|   38|   38|   38|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 29
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 0.64>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%in_read = call float @_ssdm_op_Read.ap_auto.float(float %in_r) nounwind"   --->   Operation 30 'read' 'in_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%p_Val2_s = bitcast float %in_read to i32" [test.cpp:63->test.cpp:799]   --->   Operation 31 'bitcast' 'p_Val2_s' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%p_Repl2_2 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_s, i32 31)" [test.cpp:64->test.cpp:799]   --->   Operation 32 'bitselect' 'p_Repl2_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%new_exp_V = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %p_Val2_s, i32 23, i32 30) nounwind" [test.cpp:65->test.cpp:799]   --->   Operation 33 'partselect' 'new_exp_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%new_mant_V_1 = trunc i32 %p_Val2_s to i23" [test.cpp:66->test.cpp:799]   --->   Operation 34 'trunc' 'new_mant_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%tmp = call i2 @_ssdm_op_PartSelect.i2.i32.i32.i32(i32 %p_Val2_s, i32 21, i32 22)" [test.cpp:805]   --->   Operation 35 'partselect' 'tmp' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.64ns)   --->   "%icmp = icmp eq i2 %tmp, 0" [test.cpp:805]   --->   Operation 36 'icmp' 'icmp' <Predicate = true> <Delay = 0.64> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.22> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 2 <SV = 1> <Delay = 1.88>
ST_2 : Operation 37 [1/1] (0.66ns)   --->   "%p_cast_cast = select i1 %icmp, i8 4, i8 3" [test.cpp:805]   --->   Operation 37 'select' 'p_cast_cast' <Predicate = true> <Delay = 0.66> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 38 [1/1] (1.22ns)   --->   "%tmp_3 = icmp eq i8 %new_exp_V, 0" [test.cpp:811]   --->   Operation 38 'icmp' 'tmp_3' <Predicate = true> <Delay = 1.22> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.22> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 39 [1/1] (1.22ns)   --->   "%tmp_4 = icmp ult i8 %p_cast_cast, %new_exp_V" [test.cpp:814]   --->   Operation 39 'icmp' 'tmp_4' <Predicate = true> <Delay = 1.22> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.22> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 40 [1/1] (1.39ns)   --->   "%shift_V_1 = add i8 -2, %new_exp_V" [test.cpp:818]   --->   Operation 40 'add' 'shift_V_1' <Predicate = true> <Delay = 1.39> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.71> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 3 <SV = 2> <Delay = 2.13>
ST_3 : Operation 41 [1/1] (1.22ns)   --->   "%tmp_1 = icmp ugt i8 %p_cast_cast, %new_exp_V" [test.cpp:807]   --->   Operation 41 'icmp' 'tmp_1' <Predicate = true> <Delay = 1.22> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.22> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 42 [1/1] (1.39ns)   --->   "%new_exp_V_1 = sub i8 %new_exp_V, %p_cast_cast" [test.cpp:810]   --->   Operation 42 'sub' 'new_exp_V_1' <Predicate = true> <Delay = 1.39> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.71> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 43 [1/1] (0.00ns) (grouped into LUT with out node shift_V_2)   --->   "%shift_V_cast_cast = select i1 %icmp, i8 3, i8 2" [test.cpp:805]   --->   Operation 43 'select' 'shift_V_cast_cast' <Predicate = (!tmp_3)> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 44 [1/1] (1.22ns)   --->   "%tmp_6 = icmp ult i8 %new_exp_V, 3" [test.cpp:815]   --->   Operation 44 'icmp' 'tmp_6' <Predicate = true> <Delay = 1.22> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.22> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 45 [1/1] (1.39ns)   --->   "%shift_V = sub i8 2, %new_exp_V" [test.cpp:816]   --->   Operation 45 'sub' 'shift_V' <Predicate = (!tmp_3)> <Delay = 1.39> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.71> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 46 [1/1] (0.00ns) (grouped into LUT with out node shift_V_2)   --->   "%sel_tmp = xor i1 %tmp_3, true" [test.cpp:811]   --->   Operation 46 'xor' 'sel_tmp' <Predicate = (!tmp_3)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 47 [1/1] (0.00ns) (grouped into LUT with out node shift_V_2)   --->   "%sel_tmp1 = and i1 %tmp_4, %sel_tmp" [test.cpp:814]   --->   Operation 47 'and' 'sel_tmp1' <Predicate = (!tmp_3)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 48 [1/1] (0.74ns) (out node of the LUT)   --->   "%shift_V_2 = select i1 %sel_tmp1, i8 %shift_V_cast_cast, i8 %shift_V_1" [test.cpp:814]   --->   Operation 48 'select' 'shift_V_2' <Predicate = (!tmp_3)> <Delay = 0.74> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 49 [1/1] (0.00ns) (grouped into LUT with out node shift_V_4)   --->   "%sel_tmp5_demorgan = or i1 %tmp_3, %tmp_4" [test.cpp:811]   --->   Operation 49 'or' 'sel_tmp5_demorgan' <Predicate = (!tmp_3)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 50 [1/1] (0.00ns) (grouped into LUT with out node shift_V_4)   --->   "%sel_tmp5 = xor i1 %sel_tmp5_demorgan, true" [test.cpp:811]   --->   Operation 50 'xor' 'sel_tmp5' <Predicate = (!tmp_3)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 51 [1/1] (0.00ns) (grouped into LUT with out node shift_V_4)   --->   "%sel_tmp6 = and i1 %tmp_6, %sel_tmp5" [test.cpp:815]   --->   Operation 51 'and' 'sel_tmp6' <Predicate = (!tmp_3)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 52 [1/1] (0.00ns) (grouped into LUT with out node shift_V_4)   --->   "%shift_V_3 = select i1 %sel_tmp6, i8 %shift_V, i8 %shift_V_2" [test.cpp:815]   --->   Operation 52 'select' 'shift_V_3' <Predicate = (!tmp_3)> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 53 [1/1] (0.74ns) (out node of the LUT)   --->   "%shift_V_4 = select i1 %tmp_3, i8 1, i8 %shift_V_3" [test.cpp:811]   --->   Operation 53 'select' 'shift_V_4' <Predicate = true> <Delay = 0.74> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 54 [1/1] (1.22ns)   --->   "%tmp_9 = icmp eq i8 %new_exp_V, -1" [test.cpp:829]   --->   Operation 54 'icmp' 'tmp_9' <Predicate = true> <Delay = 1.22> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.22> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 55 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_1)   --->   "%p_1 = select i1 %tmp_9, i8 -1, i8 0" [test.cpp:829]   --->   Operation 55 'select' 'p_1' <Predicate = true> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 56 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_1)   --->   "%tmp_10 = or i1 %tmp_9, %tmp_1" [test.cpp:829]   --->   Operation 56 'or' 'tmp_10' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 57 [1/1] (0.74ns) (out node of the LUT)   --->   "%p_Repl2_1 = select i1 %tmp_10, i8 %p_1, i8 %new_exp_V_1" [test.cpp:829]   --->   Operation 57 'select' 'p_Repl2_1' <Predicate = true> <Delay = 0.74> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>

State 4 <SV = 3> <Delay = 1.91>
ST_4 : Operation 58 [1/1] (0.00ns)   --->   "%tmp_s = zext i23 %new_mant_V_1 to i32" [test.cpp:822]   --->   Operation 58 'zext' 'tmp_s' <Predicate = (!tmp_6)> <Delay = 0.00>
ST_4 : Operation 59 [1/1] (0.00ns)   --->   "%tmp_2 = zext i8 %shift_V_4 to i32" [test.cpp:822]   --->   Operation 59 'zext' 'tmp_2' <Predicate = (!tmp_6)> <Delay = 0.00>
ST_4 : Operation 60 [1/1] (0.00ns)   --->   "%tmp_2_cast = zext i8 %shift_V_4 to i23" [test.cpp:822]   --->   Operation 60 'zext' 'tmp_2_cast' <Predicate = (tmp_6)> <Delay = 0.00>
ST_4 : Operation 61 [4/4] (1.91ns)   --->   "%tmp_5 = lshr i23 %new_mant_V_1, %tmp_2_cast" [test.cpp:822]   --->   Operation 61 'lshr' 'tmp_5' <Predicate = (tmp_6)> <Delay = 1.91> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.91> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 62 [4/4] (1.91ns)   --->   "%tmp_8 = shl i32 %tmp_s, %tmp_2" [test.cpp:824]   --->   Operation 62 'shl' 'tmp_8' <Predicate = (!tmp_6)> <Delay = 1.91> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.91> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>

State 5 <SV = 4> <Delay = 1.91>
ST_5 : Operation 63 [3/4] (1.91ns)   --->   "%tmp_5 = lshr i23 %new_mant_V_1, %tmp_2_cast" [test.cpp:822]   --->   Operation 63 'lshr' 'tmp_5' <Predicate = (tmp_6)> <Delay = 1.91> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.91> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 64 [3/4] (1.91ns)   --->   "%tmp_8 = shl i32 %tmp_s, %tmp_2" [test.cpp:824]   --->   Operation 64 'shl' 'tmp_8' <Predicate = (!tmp_6)> <Delay = 1.91> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.91> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>

State 6 <SV = 5> <Delay = 1.91>
ST_6 : Operation 65 [2/4] (1.91ns)   --->   "%tmp_5 = lshr i23 %new_mant_V_1, %tmp_2_cast" [test.cpp:822]   --->   Operation 65 'lshr' 'tmp_5' <Predicate = (tmp_6)> <Delay = 1.91> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.91> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 66 [2/4] (1.91ns)   --->   "%tmp_8 = shl i32 %tmp_s, %tmp_2" [test.cpp:824]   --->   Operation 66 'shl' 'tmp_8' <Predicate = (!tmp_6)> <Delay = 1.91> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.91> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>

State 7 <SV = 6> <Delay = 1.91>
ST_7 : Operation 67 [1/4] (1.91ns)   --->   "%tmp_5 = lshr i23 %new_mant_V_1, %tmp_2_cast" [test.cpp:822]   --->   Operation 67 'lshr' 'tmp_5' <Predicate = (tmp_6)> <Delay = 1.91> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.91> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 68 [1/4] (1.91ns)   --->   "%tmp_8 = shl i32 %tmp_s, %tmp_2" [test.cpp:824]   --->   Operation 68 'shl' 'tmp_8' <Predicate = (!tmp_6)> <Delay = 1.91> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.91> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 69 [1/1] (0.00ns)   --->   "%tmp_12 = trunc i32 %tmp_8 to i28" [test.cpp:824]   --->   Operation 69 'trunc' 'tmp_12' <Predicate = (!tmp_6)> <Delay = 0.00>

State 8 <SV = 7> <Delay = 0.56>
ST_8 : Operation 70 [1/1] (0.00ns)   --->   "%tmp_7 = zext i23 %tmp_5 to i28" [test.cpp:822]   --->   Operation 70 'zext' 'tmp_7' <Predicate = (tmp_6)> <Delay = 0.00>
ST_8 : Operation 71 [1/1] (0.56ns)   --->   "%xf_V = select i1 %tmp_6, i28 %tmp_7, i28 %tmp_12" [test.cpp:815]   --->   Operation 71 'select' 'xf_V' <Predicate = true> <Delay = 0.56> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>

State 9 <SV = 8> <Delay = 1.71>
ST_9 : Operation 72 [1/1] (0.00ns) (grouped into LUT with out node xf_V_4)   --->   "%p_Result_s = call i28 @_ssdm_op_BitSet.i28.i28.i32.i1(i28 %xf_V, i32 23, i1 true)" [test.cpp:826]   --->   Operation 72 'bitset' 'p_Result_s' <Predicate = (!tmp_3)> <Delay = 0.00>
ST_9 : Operation 73 [1/1] (0.00ns) (grouped into LUT with out node xf_V_4)   --->   "%xf_V_1 = select i1 %tmp_3, i28 %xf_V, i28 %p_Result_s" [test.cpp:811]   --->   Operation 73 'select' 'xf_V_1' <Predicate = true> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_9 : Operation 74 [1/1] (1.71ns) (out node of the LUT)   --->   "%xf_V_4 = add i28 2, %xf_V_1" [test.cpp:827]   --->   Operation 74 'add' 'xf_V_4' <Predicate = true> <Delay = 1.71> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.71> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 75 [1/1] (0.00ns)   --->   "%tmp_14 = call i1 @_ssdm_op_BitSelect.i1.i28.i32(i28 %xf_V_4, i32 27)" [test.cpp:750->test.cpp:784->test.cpp:828]   --->   Operation 75 'bitselect' 'tmp_14' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 76 [1/1] (0.00ns)   --->   "%d_chunk_V_1 = call i3 @_ssdm_op_PartSelect.i3.i28.i32.i32(i28 %xf_V_4, i32 24, i32 26) nounwind" [test.cpp:753->test.cpp:784->test.cpp:828]   --->   Operation 76 'partselect' 'd_chunk_V_1' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 77 [1/1] (0.00ns)   --->   "%d_chunk_V_2 = call i3 @_ssdm_op_PartSelect.i3.i28.i32.i32(i28 %xf_V_4, i32 21, i32 23) nounwind" [test.cpp:756->test.cpp:784->test.cpp:828]   --->   Operation 77 'partselect' 'd_chunk_V_2' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 78 [1/1] (0.00ns)   --->   "%d_chunk_V_3 = call i3 @_ssdm_op_PartSelect.i3.i28.i32.i32(i28 %xf_V_4, i32 18, i32 20) nounwind" [test.cpp:759->test.cpp:784->test.cpp:828]   --->   Operation 78 'partselect' 'd_chunk_V_3' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 79 [1/1] (0.00ns)   --->   "%d_chunk_V_4 = call i3 @_ssdm_op_PartSelect.i3.i28.i32.i32(i28 %xf_V_4, i32 15, i32 17) nounwind" [test.cpp:762->test.cpp:784->test.cpp:828]   --->   Operation 79 'partselect' 'd_chunk_V_4' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 80 [1/1] (0.00ns)   --->   "%d_chunk_V_5 = call i3 @_ssdm_op_PartSelect.i3.i28.i32.i32(i28 %xf_V_4, i32 12, i32 14) nounwind" [test.cpp:765->test.cpp:784->test.cpp:828]   --->   Operation 80 'partselect' 'd_chunk_V_5' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 81 [1/1] (0.00ns)   --->   "%d_chunk_V_6 = call i3 @_ssdm_op_PartSelect.i3.i28.i32.i32(i28 %xf_V_4, i32 9, i32 11) nounwind" [test.cpp:768->test.cpp:784->test.cpp:828]   --->   Operation 81 'partselect' 'd_chunk_V_6' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 82 [1/1] (0.00ns)   --->   "%d_chunk_V_7 = call i3 @_ssdm_op_PartSelect.i3.i28.i32.i32(i28 %xf_V_4, i32 6, i32 8) nounwind" [test.cpp:771->test.cpp:784->test.cpp:828]   --->   Operation 82 'partselect' 'd_chunk_V_7' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 83 [1/1] (0.00ns)   --->   "%d_chunk_V_8 = call i3 @_ssdm_op_PartSelect.i3.i28.i32.i32(i28 %xf_V_4, i32 3, i32 5) nounwind" [test.cpp:774->test.cpp:784->test.cpp:828]   --->   Operation 83 'partselect' 'd_chunk_V_8' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 84 [1/1] (0.00ns)   --->   "%d_chunk_V_9 = trunc i28 %xf_V_4 to i3" [test.cpp:777->test.cpp:784->test.cpp:828]   --->   Operation 84 'trunc' 'd_chunk_V_9' <Predicate = true> <Delay = 0.00>

State 10 <SV = 9> <Delay = 1.43>
ST_10 : Operation 85 [1/1] (0.00ns)   --->   "%d_chunk_V = zext i1 %tmp_14 to i3" [test.cpp:750->test.cpp:784->test.cpp:828]   --->   Operation 85 'zext' 'd_chunk_V' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 86 [2/2] (1.43ns)   --->   "%call_ret1_i_i = call fastcc { i3, i3 } @lut_div5_chunk(i3 %d_chunk_V, i3 0) nounwind" [test.cpp:751->test.cpp:784->test.cpp:828]   --->   Operation 86 'call' 'call_ret1_i_i' <Predicate = true> <Delay = 1.43> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 11 <SV = 10> <Delay = 1.33>
ST_11 : Operation 87 [1/2] (1.33ns)   --->   "%call_ret1_i_i = call fastcc { i3, i3 } @lut_div5_chunk(i3 %d_chunk_V, i3 0) nounwind" [test.cpp:751->test.cpp:784->test.cpp:828]   --->   Operation 87 'call' 'call_ret1_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_11 : Operation 88 [1/1] (0.00ns)   --->   "%r_V = extractvalue { i3, i3 } %call_ret1_i_i, 1" [test.cpp:751->test.cpp:784->test.cpp:828]   --->   Operation 88 'extractvalue' 'r_V' <Predicate = true> <Delay = 0.00>

State 12 <SV = 11> <Delay = 1.43>
ST_12 : Operation 89 [2/2] (1.43ns)   --->   "%call_ret2_i_i = call fastcc { i3, i3 } @lut_div5_chunk(i3 %d_chunk_V_1, i3 %r_V) nounwind" [test.cpp:754->test.cpp:784->test.cpp:828]   --->   Operation 89 'call' 'call_ret2_i_i' <Predicate = true> <Delay = 1.43> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 13 <SV = 12> <Delay = 1.33>
ST_13 : Operation 90 [1/2] (1.33ns)   --->   "%call_ret2_i_i = call fastcc { i3, i3 } @lut_div5_chunk(i3 %d_chunk_V_1, i3 %r_V) nounwind" [test.cpp:754->test.cpp:784->test.cpp:828]   --->   Operation 90 'call' 'call_ret2_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_13 : Operation 91 [1/1] (0.00ns)   --->   "%r_V_1 = extractvalue { i3, i3 } %call_ret2_i_i, 1" [test.cpp:754->test.cpp:784->test.cpp:828]   --->   Operation 91 'extractvalue' 'r_V_1' <Predicate = true> <Delay = 0.00>

State 14 <SV = 13> <Delay = 1.43>
ST_14 : Operation 92 [2/2] (1.43ns)   --->   "%call_ret3_i_i = call fastcc { i3, i3 } @lut_div5_chunk(i3 %d_chunk_V_2, i3 %r_V_1) nounwind" [test.cpp:757->test.cpp:784->test.cpp:828]   --->   Operation 92 'call' 'call_ret3_i_i' <Predicate = true> <Delay = 1.43> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 15 <SV = 14> <Delay = 1.33>
ST_15 : Operation 93 [1/2] (1.33ns)   --->   "%call_ret3_i_i = call fastcc { i3, i3 } @lut_div5_chunk(i3 %d_chunk_V_2, i3 %r_V_1) nounwind" [test.cpp:757->test.cpp:784->test.cpp:828]   --->   Operation 93 'call' 'call_ret3_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_15 : Operation 94 [1/1] (0.00ns)   --->   "%r_V_2 = extractvalue { i3, i3 } %call_ret3_i_i, 1" [test.cpp:757->test.cpp:784->test.cpp:828]   --->   Operation 94 'extractvalue' 'r_V_2' <Predicate = true> <Delay = 0.00>

State 16 <SV = 15> <Delay = 1.43>
ST_16 : Operation 95 [2/2] (1.43ns)   --->   "%call_ret4_i_i = call fastcc { i3, i3 } @lut_div5_chunk(i3 %d_chunk_V_3, i3 %r_V_2) nounwind" [test.cpp:760->test.cpp:784->test.cpp:828]   --->   Operation 95 'call' 'call_ret4_i_i' <Predicate = true> <Delay = 1.43> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 17 <SV = 16> <Delay = 1.33>
ST_17 : Operation 96 [1/2] (1.33ns)   --->   "%call_ret4_i_i = call fastcc { i3, i3 } @lut_div5_chunk(i3 %d_chunk_V_3, i3 %r_V_2) nounwind" [test.cpp:760->test.cpp:784->test.cpp:828]   --->   Operation 96 'call' 'call_ret4_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_17 : Operation 97 [1/1] (0.00ns)   --->   "%r_V_3 = extractvalue { i3, i3 } %call_ret4_i_i, 1" [test.cpp:760->test.cpp:784->test.cpp:828]   --->   Operation 97 'extractvalue' 'r_V_3' <Predicate = true> <Delay = 0.00>

State 18 <SV = 17> <Delay = 1.43>
ST_18 : Operation 98 [2/2] (1.43ns)   --->   "%call_ret5_i_i = call fastcc { i3, i3 } @lut_div5_chunk(i3 %d_chunk_V_4, i3 %r_V_3) nounwind" [test.cpp:763->test.cpp:784->test.cpp:828]   --->   Operation 98 'call' 'call_ret5_i_i' <Predicate = true> <Delay = 1.43> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 19 <SV = 18> <Delay = 1.33>
ST_19 : Operation 99 [1/2] (1.33ns)   --->   "%call_ret5_i_i = call fastcc { i3, i3 } @lut_div5_chunk(i3 %d_chunk_V_4, i3 %r_V_3) nounwind" [test.cpp:763->test.cpp:784->test.cpp:828]   --->   Operation 99 'call' 'call_ret5_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_19 : Operation 100 [1/1] (0.00ns)   --->   "%r_V_4 = extractvalue { i3, i3 } %call_ret5_i_i, 1" [test.cpp:763->test.cpp:784->test.cpp:828]   --->   Operation 100 'extractvalue' 'r_V_4' <Predicate = true> <Delay = 0.00>

State 20 <SV = 19> <Delay = 1.43>
ST_20 : Operation 101 [2/2] (1.43ns)   --->   "%call_ret6_i_i = call fastcc { i3, i3 } @lut_div5_chunk(i3 %d_chunk_V_5, i3 %r_V_4) nounwind" [test.cpp:766->test.cpp:784->test.cpp:828]   --->   Operation 101 'call' 'call_ret6_i_i' <Predicate = true> <Delay = 1.43> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 21 <SV = 20> <Delay = 1.33>
ST_21 : Operation 102 [1/2] (1.33ns)   --->   "%call_ret6_i_i = call fastcc { i3, i3 } @lut_div5_chunk(i3 %d_chunk_V_5, i3 %r_V_4) nounwind" [test.cpp:766->test.cpp:784->test.cpp:828]   --->   Operation 102 'call' 'call_ret6_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_21 : Operation 103 [1/1] (0.00ns)   --->   "%r_V_5 = extractvalue { i3, i3 } %call_ret6_i_i, 1" [test.cpp:766->test.cpp:784->test.cpp:828]   --->   Operation 103 'extractvalue' 'r_V_5' <Predicate = true> <Delay = 0.00>

State 22 <SV = 21> <Delay = 1.43>
ST_22 : Operation 104 [2/2] (1.43ns)   --->   "%call_ret7_i_i = call fastcc { i3, i3 } @lut_div5_chunk(i3 %d_chunk_V_6, i3 %r_V_5) nounwind" [test.cpp:769->test.cpp:784->test.cpp:828]   --->   Operation 104 'call' 'call_ret7_i_i' <Predicate = true> <Delay = 1.43> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 23 <SV = 22> <Delay = 1.33>
ST_23 : Operation 105 [1/2] (1.33ns)   --->   "%call_ret7_i_i = call fastcc { i3, i3 } @lut_div5_chunk(i3 %d_chunk_V_6, i3 %r_V_5) nounwind" [test.cpp:769->test.cpp:784->test.cpp:828]   --->   Operation 105 'call' 'call_ret7_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_23 : Operation 106 [1/1] (0.00ns)   --->   "%r_V_6 = extractvalue { i3, i3 } %call_ret7_i_i, 1" [test.cpp:769->test.cpp:784->test.cpp:828]   --->   Operation 106 'extractvalue' 'r_V_6' <Predicate = true> <Delay = 0.00>

State 24 <SV = 23> <Delay = 1.43>
ST_24 : Operation 107 [2/2] (1.43ns)   --->   "%call_ret8_i_i = call fastcc { i3, i3 } @lut_div5_chunk(i3 %d_chunk_V_7, i3 %r_V_6) nounwind" [test.cpp:772->test.cpp:784->test.cpp:828]   --->   Operation 107 'call' 'call_ret8_i_i' <Predicate = true> <Delay = 1.43> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 25 <SV = 24> <Delay = 1.33>
ST_25 : Operation 108 [1/2] (1.33ns)   --->   "%call_ret8_i_i = call fastcc { i3, i3 } @lut_div5_chunk(i3 %d_chunk_V_7, i3 %r_V_6) nounwind" [test.cpp:772->test.cpp:784->test.cpp:828]   --->   Operation 108 'call' 'call_ret8_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_25 : Operation 109 [1/1] (0.00ns)   --->   "%r_V_7 = extractvalue { i3, i3 } %call_ret8_i_i, 1" [test.cpp:772->test.cpp:784->test.cpp:828]   --->   Operation 109 'extractvalue' 'r_V_7' <Predicate = true> <Delay = 0.00>

State 26 <SV = 25> <Delay = 1.43>
ST_26 : Operation 110 [2/2] (1.43ns)   --->   "%call_ret9_i_i = call fastcc { i3, i3 } @lut_div5_chunk(i3 %d_chunk_V_8, i3 %r_V_7) nounwind" [test.cpp:775->test.cpp:784->test.cpp:828]   --->   Operation 110 'call' 'call_ret9_i_i' <Predicate = true> <Delay = 1.43> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 27 <SV = 26> <Delay = 1.33>
ST_27 : Operation 111 [1/2] (1.33ns)   --->   "%call_ret9_i_i = call fastcc { i3, i3 } @lut_div5_chunk(i3 %d_chunk_V_8, i3 %r_V_7) nounwind" [test.cpp:775->test.cpp:784->test.cpp:828]   --->   Operation 111 'call' 'call_ret9_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_27 : Operation 112 [1/1] (0.00ns)   --->   "%r_V_8 = extractvalue { i3, i3 } %call_ret9_i_i, 1" [test.cpp:775->test.cpp:784->test.cpp:828]   --->   Operation 112 'extractvalue' 'r_V_8' <Predicate = true> <Delay = 0.00>

State 28 <SV = 27> <Delay = 1.43>
ST_28 : Operation 113 [2/2] (1.43ns)   --->   "%call_ret_i_i = call fastcc { i3, i3 } @lut_div5_chunk(i3 %d_chunk_V_9, i3 %r_V_8) nounwind" [test.cpp:778->test.cpp:784->test.cpp:828]   --->   Operation 113 'call' 'call_ret_i_i' <Predicate = true> <Delay = 1.43> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 29 <SV = 28> <Delay = 2.06>
ST_29 : Operation 114 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(float %in_r) nounwind, !map !223"   --->   Operation 114 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_29 : Operation 115 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(float 0.000000e+00) nounwind, !map !229"   --->   Operation 115 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_29 : Operation 116 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([21 x i8]* @operator_float_div10_1) nounwind"   --->   Operation 116 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_29 : Operation 117 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V = extractvalue { i3, i3 } %call_ret3_i_i, 0" [test.cpp:757->test.cpp:784->test.cpp:828]   --->   Operation 117 'extractvalue' 'q_chunk_V' <Predicate = (!tmp_9)> <Delay = 0.00>
ST_29 : Operation 118 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_1 = extractvalue { i3, i3 } %call_ret4_i_i, 0" [test.cpp:760->test.cpp:784->test.cpp:828]   --->   Operation 118 'extractvalue' 'q_chunk_V_1' <Predicate = (!tmp_9)> <Delay = 0.00>
ST_29 : Operation 119 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_2 = extractvalue { i3, i3 } %call_ret5_i_i, 0" [test.cpp:763->test.cpp:784->test.cpp:828]   --->   Operation 119 'extractvalue' 'q_chunk_V_2' <Predicate = (!tmp_9)> <Delay = 0.00>
ST_29 : Operation 120 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_3 = extractvalue { i3, i3 } %call_ret6_i_i, 0" [test.cpp:766->test.cpp:784->test.cpp:828]   --->   Operation 120 'extractvalue' 'q_chunk_V_3' <Predicate = (!tmp_9)> <Delay = 0.00>
ST_29 : Operation 121 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_4 = extractvalue { i3, i3 } %call_ret7_i_i, 0" [test.cpp:769->test.cpp:784->test.cpp:828]   --->   Operation 121 'extractvalue' 'q_chunk_V_4' <Predicate = (!tmp_9)> <Delay = 0.00>
ST_29 : Operation 122 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_5 = extractvalue { i3, i3 } %call_ret8_i_i, 0" [test.cpp:772->test.cpp:784->test.cpp:828]   --->   Operation 122 'extractvalue' 'q_chunk_V_5' <Predicate = (!tmp_9)> <Delay = 0.00>
ST_29 : Operation 123 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_6 = extractvalue { i3, i3 } %call_ret9_i_i, 0" [test.cpp:775->test.cpp:784->test.cpp:828]   --->   Operation 123 'extractvalue' 'q_chunk_V_6' <Predicate = (!tmp_9)> <Delay = 0.00>
ST_29 : Operation 124 [1/2] (1.33ns)   --->   "%call_ret_i_i = call fastcc { i3, i3 } @lut_div5_chunk(i3 %d_chunk_V_9, i3 %r_V_8) nounwind" [test.cpp:778->test.cpp:784->test.cpp:828]   --->   Operation 124 'call' 'call_ret_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_29 : Operation 125 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_7 = extractvalue { i3, i3 } %call_ret_i_i, 0" [test.cpp:778->test.cpp:784->test.cpp:828]   --->   Operation 125 'extractvalue' 'q_chunk_V_7' <Predicate = (!tmp_9)> <Delay = 0.00>
ST_29 : Operation 126 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%tmp_16 = trunc i3 %q_chunk_V to i2" [test.cpp:757->test.cpp:784->test.cpp:828]   --->   Operation 126 'trunc' 'tmp_16' <Predicate = (!tmp_9)> <Delay = 0.00>
ST_29 : Operation 127 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%new_mant_V = call i23 @_ssdm_op_BitConcatenate.i23.i2.i3.i3.i3.i3.i3.i3.i3(i2 %tmp_16, i3 %q_chunk_V_1, i3 %q_chunk_V_2, i3 %q_chunk_V_3, i3 %q_chunk_V_4, i3 %q_chunk_V_5, i3 %q_chunk_V_6, i3 %q_chunk_V_7)" [test.cpp:828]   --->   Operation 127 'bitconcatenate' 'new_mant_V' <Predicate = (!tmp_9)> <Delay = 0.00>
ST_29 : Operation 128 [1/1] (0.73ns) (out node of the LUT)   --->   "%p_Repl2_s = select i1 %tmp_9, i23 %new_mant_V_1, i23 %new_mant_V" [test.cpp:829]   --->   Operation 128 'select' 'p_Repl2_s' <Predicate = true> <Delay = 0.73> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_29 : Operation 129 [1/1] (0.00ns)   --->   "%p_Result_1 = call i32 @_ssdm_op_BitConcatenate.i32.i1.i8.i23(i1 %p_Repl2_2, i8 %p_Repl2_1, i23 %p_Repl2_s) nounwind" [test.cpp:79->test.cpp:833]   --->   Operation 129 'bitconcatenate' 'p_Result_1' <Predicate = true> <Delay = 0.00>
ST_29 : Operation 130 [1/1] (0.00ns)   --->   "%out = bitcast i32 %p_Result_1 to float" [test.cpp:80->test.cpp:833]   --->   Operation 130 'bitcast' 'out' <Predicate = true> <Delay = 0.00>
ST_29 : Operation 131 [1/1] (0.00ns)   --->   "ret float %out" [test.cpp:834]   --->   Operation 131 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 2.5ns, clock uncertainty: 0.312ns.

 <State 1>: 0.644ns
The critical path consists of the following:
	wire read on port 'in_r' [11]  (0 ns)
	'icmp' operation ('icmp', test.cpp:805) [17]  (0.644 ns)

 <State 2>: 1.88ns
The critical path consists of the following:
	'select' operation ('p_cast_cast', test.cpp:805) [18]  (0.66 ns)
	'icmp' operation ('tmp_4', test.cpp:814) [22]  (1.22 ns)

 <State 3>: 2.13ns
The critical path consists of the following:
	'sub' operation ('new_exp.V', test.cpp:810) [20]  (1.39 ns)
	'select' operation ('__Repl2__', test.cpp:829) [89]  (0.74 ns)

 <State 4>: 1.92ns
The critical path consists of the following:
	'shl' operation ('tmp_8', test.cpp:824) [39]  (1.92 ns)

 <State 5>: 1.92ns
The critical path consists of the following:
	'lshr' operation ('tmp_5', test.cpp:822) [38]  (1.92 ns)

 <State 6>: 1.92ns
The critical path consists of the following:
	'lshr' operation ('tmp_5', test.cpp:822) [38]  (1.92 ns)

 <State 7>: 1.92ns
The critical path consists of the following:
	'lshr' operation ('tmp_5', test.cpp:822) [38]  (1.92 ns)

 <State 8>: 0.568ns
The critical path consists of the following:
	'select' operation ('xf.V', test.cpp:815) [42]  (0.568 ns)

 <State 9>: 1.71ns
The critical path consists of the following:
	'select' operation ('xf.V', test.cpp:811) [44]  (0 ns)
	'add' operation ('xf.V', test.cpp:827) [45]  (1.71 ns)

 <State 10>: 1.44ns
The critical path consists of the following:
	'call' operation ('call_ret1_i_i', test.cpp:751->test.cpp:784->test.cpp:828) to 'lut_div5_chunk' [48]  (1.44 ns)

 <State 11>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret1_i_i', test.cpp:751->test.cpp:784->test.cpp:828) to 'lut_div5_chunk' [48]  (1.33 ns)

 <State 12>: 1.44ns
The critical path consists of the following:
	'call' operation ('call_ret2_i_i', test.cpp:754->test.cpp:784->test.cpp:828) to 'lut_div5_chunk' [51]  (1.44 ns)

 <State 13>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret2_i_i', test.cpp:754->test.cpp:784->test.cpp:828) to 'lut_div5_chunk' [51]  (1.33 ns)

 <State 14>: 1.44ns
The critical path consists of the following:
	'call' operation ('call_ret3_i_i', test.cpp:757->test.cpp:784->test.cpp:828) to 'lut_div5_chunk' [54]  (1.44 ns)

 <State 15>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret3_i_i', test.cpp:757->test.cpp:784->test.cpp:828) to 'lut_div5_chunk' [54]  (1.33 ns)

 <State 16>: 1.44ns
The critical path consists of the following:
	'call' operation ('call_ret4_i_i', test.cpp:760->test.cpp:784->test.cpp:828) to 'lut_div5_chunk' [58]  (1.44 ns)

 <State 17>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret4_i_i', test.cpp:760->test.cpp:784->test.cpp:828) to 'lut_div5_chunk' [58]  (1.33 ns)

 <State 18>: 1.44ns
The critical path consists of the following:
	'call' operation ('call_ret5_i_i', test.cpp:763->test.cpp:784->test.cpp:828) to 'lut_div5_chunk' [62]  (1.44 ns)

 <State 19>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret5_i_i', test.cpp:763->test.cpp:784->test.cpp:828) to 'lut_div5_chunk' [62]  (1.33 ns)

 <State 20>: 1.44ns
The critical path consists of the following:
	'call' operation ('call_ret6_i_i', test.cpp:766->test.cpp:784->test.cpp:828) to 'lut_div5_chunk' [66]  (1.44 ns)

 <State 21>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret6_i_i', test.cpp:766->test.cpp:784->test.cpp:828) to 'lut_div5_chunk' [66]  (1.33 ns)

 <State 22>: 1.44ns
The critical path consists of the following:
	'call' operation ('call_ret7_i_i', test.cpp:769->test.cpp:784->test.cpp:828) to 'lut_div5_chunk' [70]  (1.44 ns)

 <State 23>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret7_i_i', test.cpp:769->test.cpp:784->test.cpp:828) to 'lut_div5_chunk' [70]  (1.33 ns)

 <State 24>: 1.44ns
The critical path consists of the following:
	'call' operation ('call_ret8_i_i', test.cpp:772->test.cpp:784->test.cpp:828) to 'lut_div5_chunk' [74]  (1.44 ns)

 <State 25>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret8_i_i', test.cpp:772->test.cpp:784->test.cpp:828) to 'lut_div5_chunk' [74]  (1.33 ns)

 <State 26>: 1.44ns
The critical path consists of the following:
	'call' operation ('call_ret9_i_i', test.cpp:775->test.cpp:784->test.cpp:828) to 'lut_div5_chunk' [78]  (1.44 ns)

 <State 27>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret9_i_i', test.cpp:775->test.cpp:784->test.cpp:828) to 'lut_div5_chunk' [78]  (1.33 ns)

 <State 28>: 1.44ns
The critical path consists of the following:
	'call' operation ('call_ret_i_i', test.cpp:778->test.cpp:784->test.cpp:828) to 'lut_div5_chunk' [82]  (1.44 ns)

 <State 29>: 2.06ns
The critical path consists of the following:
	'call' operation ('call_ret_i_i', test.cpp:778->test.cpp:784->test.cpp:828) to 'lut_div5_chunk' [82]  (1.33 ns)
	'select' operation ('__Repl2__', test.cpp:829) [90]  (0.731 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
