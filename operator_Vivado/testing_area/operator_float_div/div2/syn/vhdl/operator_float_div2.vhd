-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity operator_float_div2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of operator_float_div2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "operator_float_div2,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.845200,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=38,HLS_SYN_LUT=312,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_Repl2_2_reg_251 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_exp_V_fu_70_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_exp_V_reg_256 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_mant_V_2_fu_80_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal new_mant_V_2_reg_262 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_1_fu_84_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_269 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0274_2_fu_132_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_0274_2_reg_275 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_281 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_58_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_90_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_106_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_fu_100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shift_V_fu_122_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shift_V_cast_fu_116_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_new_exp_V_1_fu_159_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_exp_V_1_fu_154_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xf_V_1_cast_fu_146_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_fu_180_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xf_V_fu_187_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_cast_fu_201_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_cast2_fu_194_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_cast1_fu_198_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_2_fu_204_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_7_fu_210_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_12_fu_216_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_13_fu_220_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal new_mant_V_1_fu_224_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Repl2_1_fu_172_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_mant_V_fu_231_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_s_fu_238_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                new_exp_V_reg_256 <= p_Val2_s_fu_58_p1(30 downto 23);
                new_mant_V_2_reg_262 <= new_mant_V_2_fu_80_p1;
                p_0274_2_reg_275 <= p_0274_2_fu_132_p3;
                p_Repl2_2_reg_251 <= p_Val2_s_fu_58_p1(31 downto 31);
                tmp_1_reg_269 <= tmp_1_fu_84_p2;
                tmp_8_reg_281 <= tmp_8_fu_140_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_s_fu_238_p4;
    icmp_fu_100_p2 <= "0" when (tmp_11_fu_90_p4 = ap_const_lv7_0) else "1";
    new_exp_V_1_fu_154_p2 <= std_logic_vector(signed(ap_const_lv8_FF) + signed(new_exp_V_reg_256));
    new_exp_V_fu_70_p4 <= p_Val2_s_fu_58_p1(30 downto 23);
    new_mant_V_1_fu_224_p3 <= 
        tmp_12_fu_216_p1 when (tmp_8_reg_281(0) = '1') else 
        tmp_13_fu_220_p1;
    new_mant_V_2_fu_80_p1 <= p_Val2_s_fu_58_p1(23 - 1 downto 0);
    new_mant_V_fu_231_p3 <= 
        new_mant_V_2_reg_262 when (tmp_fu_149_p2(0) = '1') else 
        new_mant_V_1_fu_224_p3;
    p_0274_2_fu_132_p3 <= 
        p_shift_V_fu_122_p1 when (tmp_9_fu_126_p2(0) = '1') else 
        shift_V_cast_fu_116_p2;
    p_Repl2_1_fu_172_p3 <= 
        p_new_exp_V_1_fu_159_p3 when (tmp_3_fu_167_p2(0) = '1') else 
        new_exp_V_1_fu_154_p2;
    p_Result_s_fu_238_p4 <= ((p_Repl2_2_reg_251 & p_Repl2_1_fu_172_p3) & new_mant_V_fu_231_p3);
    p_Val2_s_fu_58_p1 <= in_r;
    p_new_exp_V_1_fu_159_p3 <= 
        ap_const_lv8_FF when (tmp_fu_149_p2(0) = '1') else 
        ap_const_lv8_0;
    p_shift_V_fu_122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_84_p2),2));
    shift_V_cast_fu_116_p2 <= std_logic_vector(signed(ap_const_lv2_2) - signed(tmp_6_fu_106_p4));
    tmp_11_fu_90_p4 <= p_Val2_s_fu_58_p1(30 downto 24);
    tmp_12_fu_216_p1 <= tmp_2_fu_204_p2(23 - 1 downto 0);
    tmp_13_fu_220_p1 <= tmp_7_fu_210_p2(23 - 1 downto 0);
    tmp_1_fu_84_p2 <= "1" when (new_exp_V_fu_70_p4 = ap_const_lv8_0) else "0";
    tmp_2_fu_204_p2 <= std_logic_vector(shift_right(unsigned(xf_V_fu_187_p3),to_integer(unsigned('0' & tmp_cast_fu_201_p1(24-1 downto 0)))));
    tmp_3_fu_167_p2 <= (tmp_fu_149_p2 or tmp_1_reg_269);
    tmp_5_fu_180_p3 <= (ap_const_lv1_1 & new_mant_V_2_reg_262);
    tmp_6_fu_106_p4 <= p_Val2_s_fu_58_p1(24 downto 23);
    tmp_7_fu_210_p2 <= std_logic_vector(shift_left(unsigned(tmp_9_cast2_fu_194_p1),to_integer(unsigned('0' & tmp_cast1_fu_198_p1(26-1 downto 0)))));
    tmp_8_fu_140_p2 <= "1" when (unsigned(new_exp_V_fu_70_p4) < unsigned(ap_const_lv8_3)) else "0";
    tmp_9_cast2_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_V_fu_187_p3),26));
    tmp_9_fu_126_p2 <= (tmp_1_fu_84_p2 or icmp_fu_100_p2);
    tmp_cast1_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0274_2_reg_275),26));
    tmp_cast_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0274_2_reg_275),24));
    tmp_fu_149_p2 <= "1" when (new_exp_V_reg_256 = ap_const_lv8_FF) else "0";
    xf_V_1_cast_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_mant_V_2_reg_262),24));
    xf_V_fu_187_p3 <= 
        xf_V_1_cast_fu_146_p1 when (tmp_1_reg_269(0) = '1') else 
        tmp_5_fu_180_p3;
end behav;
