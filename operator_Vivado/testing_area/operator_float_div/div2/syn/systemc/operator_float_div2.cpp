// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "operator_float_div2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic operator_float_div2::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic operator_float_div2::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> operator_float_div2::ap_ST_fsm_state1 = "1";
const sc_lv<2> operator_float_div2::ap_ST_fsm_state2 = "10";
const sc_lv<32> operator_float_div2::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> operator_float_div2::ap_const_lv32_1F = "11111";
const sc_lv<32> operator_float_div2::ap_const_lv32_17 = "10111";
const sc_lv<32> operator_float_div2::ap_const_lv32_1E = "11110";
const sc_lv<8> operator_float_div2::ap_const_lv8_0 = "00000000";
const sc_lv<32> operator_float_div2::ap_const_lv32_18 = "11000";
const sc_lv<7> operator_float_div2::ap_const_lv7_0 = "0000000";
const sc_lv<2> operator_float_div2::ap_const_lv2_2 = "10";
const sc_lv<8> operator_float_div2::ap_const_lv8_3 = "11";
const sc_lv<32> operator_float_div2::ap_const_lv32_1 = "1";
const sc_lv<8> operator_float_div2::ap_const_lv8_FF = "11111111";
const sc_lv<1> operator_float_div2::ap_const_lv1_1 = "1";
const bool operator_float_div2::ap_const_boolean_1 = true;

operator_float_div2::operator_float_div2(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_Result_s_fu_238_p4 );

    SC_METHOD(thread_icmp_fu_100_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_11_fu_90_p4 );

    SC_METHOD(thread_new_exp_V_1_fu_154_p2);
    sensitive << ( new_exp_V_reg_256 );

    SC_METHOD(thread_new_exp_V_fu_70_p4);
    sensitive << ( p_Val2_s_fu_58_p1 );

    SC_METHOD(thread_new_mant_V_1_fu_224_p3);
    sensitive << ( tmp_8_reg_281 );
    sensitive << ( tmp_12_fu_216_p1 );
    sensitive << ( tmp_13_fu_220_p1 );

    SC_METHOD(thread_new_mant_V_2_fu_80_p1);
    sensitive << ( p_Val2_s_fu_58_p1 );

    SC_METHOD(thread_new_mant_V_fu_231_p3);
    sensitive << ( new_mant_V_2_reg_262 );
    sensitive << ( tmp_fu_149_p2 );
    sensitive << ( new_mant_V_1_fu_224_p3 );

    SC_METHOD(thread_p_0274_2_fu_132_p3);
    sensitive << ( tmp_9_fu_126_p2 );
    sensitive << ( p_shift_V_fu_122_p1 );
    sensitive << ( shift_V_cast_fu_116_p2 );

    SC_METHOD(thread_p_Repl2_1_fu_172_p3);
    sensitive << ( tmp_3_fu_167_p2 );
    sensitive << ( p_new_exp_V_1_fu_159_p3 );
    sensitive << ( new_exp_V_1_fu_154_p2 );

    SC_METHOD(thread_p_Result_s_fu_238_p4);
    sensitive << ( p_Repl2_2_reg_251 );
    sensitive << ( p_Repl2_1_fu_172_p3 );
    sensitive << ( new_mant_V_fu_231_p3 );

    SC_METHOD(thread_p_Val2_s_fu_58_p1);
    sensitive << ( in_r );

    SC_METHOD(thread_p_new_exp_V_1_fu_159_p3);
    sensitive << ( tmp_fu_149_p2 );

    SC_METHOD(thread_p_shift_V_fu_122_p1);
    sensitive << ( tmp_1_fu_84_p2 );

    SC_METHOD(thread_shift_V_cast_fu_116_p2);
    sensitive << ( tmp_6_fu_106_p4 );

    SC_METHOD(thread_tmp_11_fu_90_p4);
    sensitive << ( p_Val2_s_fu_58_p1 );

    SC_METHOD(thread_tmp_12_fu_216_p1);
    sensitive << ( tmp_2_fu_204_p2 );

    SC_METHOD(thread_tmp_13_fu_220_p1);
    sensitive << ( tmp_7_fu_210_p2 );

    SC_METHOD(thread_tmp_1_fu_84_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( new_exp_V_fu_70_p4 );

    SC_METHOD(thread_tmp_2_fu_204_p2);
    sensitive << ( xf_V_fu_187_p3 );
    sensitive << ( tmp_cast_fu_201_p1 );

    SC_METHOD(thread_tmp_3_fu_167_p2);
    sensitive << ( tmp_1_reg_269 );
    sensitive << ( tmp_fu_149_p2 );

    SC_METHOD(thread_tmp_5_fu_180_p3);
    sensitive << ( new_mant_V_2_reg_262 );

    SC_METHOD(thread_tmp_6_fu_106_p4);
    sensitive << ( p_Val2_s_fu_58_p1 );

    SC_METHOD(thread_tmp_7_fu_210_p2);
    sensitive << ( tmp_9_cast2_fu_194_p1 );
    sensitive << ( tmp_cast1_fu_198_p1 );

    SC_METHOD(thread_tmp_8_fu_140_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( new_exp_V_fu_70_p4 );

    SC_METHOD(thread_tmp_9_cast2_fu_194_p1);
    sensitive << ( xf_V_fu_187_p3 );

    SC_METHOD(thread_tmp_9_fu_126_p2);
    sensitive << ( tmp_1_fu_84_p2 );
    sensitive << ( icmp_fu_100_p2 );

    SC_METHOD(thread_tmp_cast1_fu_198_p1);
    sensitive << ( p_0274_2_reg_275 );

    SC_METHOD(thread_tmp_cast_fu_201_p1);
    sensitive << ( p_0274_2_reg_275 );

    SC_METHOD(thread_tmp_fu_149_p2);
    sensitive << ( new_exp_V_reg_256 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_xf_V_1_cast_fu_146_p1);
    sensitive << ( new_mant_V_2_reg_262 );

    SC_METHOD(thread_xf_V_fu_187_p3);
    sensitive << ( tmp_1_reg_269 );
    sensitive << ( xf_V_1_cast_fu_146_p1 );
    sensitive << ( tmp_5_fu_180_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "operator_float_div2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_r, "(port)in_r");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, p_Repl2_2_reg_251, "p_Repl2_2_reg_251");
    sc_trace(mVcdFile, new_exp_V_fu_70_p4, "new_exp_V_fu_70_p4");
    sc_trace(mVcdFile, new_exp_V_reg_256, "new_exp_V_reg_256");
    sc_trace(mVcdFile, new_mant_V_2_fu_80_p1, "new_mant_V_2_fu_80_p1");
    sc_trace(mVcdFile, new_mant_V_2_reg_262, "new_mant_V_2_reg_262");
    sc_trace(mVcdFile, tmp_1_fu_84_p2, "tmp_1_fu_84_p2");
    sc_trace(mVcdFile, tmp_1_reg_269, "tmp_1_reg_269");
    sc_trace(mVcdFile, p_0274_2_fu_132_p3, "p_0274_2_fu_132_p3");
    sc_trace(mVcdFile, p_0274_2_reg_275, "p_0274_2_reg_275");
    sc_trace(mVcdFile, tmp_8_fu_140_p2, "tmp_8_fu_140_p2");
    sc_trace(mVcdFile, tmp_8_reg_281, "tmp_8_reg_281");
    sc_trace(mVcdFile, p_Val2_s_fu_58_p1, "p_Val2_s_fu_58_p1");
    sc_trace(mVcdFile, tmp_11_fu_90_p4, "tmp_11_fu_90_p4");
    sc_trace(mVcdFile, tmp_6_fu_106_p4, "tmp_6_fu_106_p4");
    sc_trace(mVcdFile, icmp_fu_100_p2, "icmp_fu_100_p2");
    sc_trace(mVcdFile, tmp_9_fu_126_p2, "tmp_9_fu_126_p2");
    sc_trace(mVcdFile, p_shift_V_fu_122_p1, "p_shift_V_fu_122_p1");
    sc_trace(mVcdFile, shift_V_cast_fu_116_p2, "shift_V_cast_fu_116_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_149_p2, "tmp_fu_149_p2");
    sc_trace(mVcdFile, tmp_3_fu_167_p2, "tmp_3_fu_167_p2");
    sc_trace(mVcdFile, p_new_exp_V_1_fu_159_p3, "p_new_exp_V_1_fu_159_p3");
    sc_trace(mVcdFile, new_exp_V_1_fu_154_p2, "new_exp_V_1_fu_154_p2");
    sc_trace(mVcdFile, xf_V_1_cast_fu_146_p1, "xf_V_1_cast_fu_146_p1");
    sc_trace(mVcdFile, tmp_5_fu_180_p3, "tmp_5_fu_180_p3");
    sc_trace(mVcdFile, xf_V_fu_187_p3, "xf_V_fu_187_p3");
    sc_trace(mVcdFile, tmp_cast_fu_201_p1, "tmp_cast_fu_201_p1");
    sc_trace(mVcdFile, tmp_9_cast2_fu_194_p1, "tmp_9_cast2_fu_194_p1");
    sc_trace(mVcdFile, tmp_cast1_fu_198_p1, "tmp_cast1_fu_198_p1");
    sc_trace(mVcdFile, tmp_2_fu_204_p2, "tmp_2_fu_204_p2");
    sc_trace(mVcdFile, tmp_7_fu_210_p2, "tmp_7_fu_210_p2");
    sc_trace(mVcdFile, tmp_12_fu_216_p1, "tmp_12_fu_216_p1");
    sc_trace(mVcdFile, tmp_13_fu_220_p1, "tmp_13_fu_220_p1");
    sc_trace(mVcdFile, new_mant_V_1_fu_224_p3, "new_mant_V_1_fu_224_p3");
    sc_trace(mVcdFile, p_Repl2_1_fu_172_p3, "p_Repl2_1_fu_172_p3");
    sc_trace(mVcdFile, new_mant_V_fu_231_p3, "new_mant_V_fu_231_p3");
    sc_trace(mVcdFile, p_Result_s_fu_238_p4, "p_Result_s_fu_238_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("operator_float_div2.hdltvin.dat");
    mHdltvoutHandle.open("operator_float_div2.hdltvout.dat");
}

operator_float_div2::~operator_float_div2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void operator_float_div2::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        new_exp_V_reg_256 = p_Val2_s_fu_58_p1.read().range(30, 23);
        new_mant_V_2_reg_262 = new_mant_V_2_fu_80_p1.read();
        p_0274_2_reg_275 = p_0274_2_fu_132_p3.read();
        p_Repl2_2_reg_251 = p_Val2_s_fu_58_p1.read().range(31, 31);
        tmp_1_reg_269 = tmp_1_fu_84_p2.read();
        tmp_8_reg_281 = tmp_8_fu_140_p2.read();
    }
}

void operator_float_div2::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void operator_float_div2::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void operator_float_div2::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void operator_float_div2::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void operator_float_div2::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void operator_float_div2::thread_ap_return() {
    ap_return = p_Result_s_fu_238_p4.read();
}

void operator_float_div2::thread_icmp_fu_100_p2() {
    icmp_fu_100_p2 = (!tmp_11_fu_90_p4.read().is_01() || !ap_const_lv7_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_11_fu_90_p4.read() != ap_const_lv7_0);
}

void operator_float_div2::thread_new_exp_V_1_fu_154_p2() {
    new_exp_V_1_fu_154_p2 = (!ap_const_lv8_FF.is_01() || !new_exp_V_reg_256.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_FF) + sc_biguint<8>(new_exp_V_reg_256.read()));
}

void operator_float_div2::thread_new_exp_V_fu_70_p4() {
    new_exp_V_fu_70_p4 = p_Val2_s_fu_58_p1.read().range(30, 23);
}

void operator_float_div2::thread_new_mant_V_1_fu_224_p3() {
    new_mant_V_1_fu_224_p3 = (!tmp_8_reg_281.read()[0].is_01())? sc_lv<23>(): ((tmp_8_reg_281.read()[0].to_bool())? tmp_12_fu_216_p1.read(): tmp_13_fu_220_p1.read());
}

void operator_float_div2::thread_new_mant_V_2_fu_80_p1() {
    new_mant_V_2_fu_80_p1 = p_Val2_s_fu_58_p1.read().range(23-1, 0);
}

void operator_float_div2::thread_new_mant_V_fu_231_p3() {
    new_mant_V_fu_231_p3 = (!tmp_fu_149_p2.read()[0].is_01())? sc_lv<23>(): ((tmp_fu_149_p2.read()[0].to_bool())? new_mant_V_2_reg_262.read(): new_mant_V_1_fu_224_p3.read());
}

void operator_float_div2::thread_p_0274_2_fu_132_p3() {
    p_0274_2_fu_132_p3 = (!tmp_9_fu_126_p2.read()[0].is_01())? sc_lv<2>(): ((tmp_9_fu_126_p2.read()[0].to_bool())? p_shift_V_fu_122_p1.read(): shift_V_cast_fu_116_p2.read());
}

void operator_float_div2::thread_p_Repl2_1_fu_172_p3() {
    p_Repl2_1_fu_172_p3 = (!tmp_3_fu_167_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_3_fu_167_p2.read()[0].to_bool())? p_new_exp_V_1_fu_159_p3.read(): new_exp_V_1_fu_154_p2.read());
}

void operator_float_div2::thread_p_Result_s_fu_238_p4() {
    p_Result_s_fu_238_p4 = esl_concat<9,23>(esl_concat<1,8>(p_Repl2_2_reg_251.read(), p_Repl2_1_fu_172_p3.read()), new_mant_V_fu_231_p3.read());
}

void operator_float_div2::thread_p_Val2_s_fu_58_p1() {
    p_Val2_s_fu_58_p1 = in_r.read();
}

void operator_float_div2::thread_p_new_exp_V_1_fu_159_p3() {
    p_new_exp_V_1_fu_159_p3 = (!tmp_fu_149_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_fu_149_p2.read()[0].to_bool())? ap_const_lv8_FF: ap_const_lv8_0);
}

void operator_float_div2::thread_p_shift_V_fu_122_p1() {
    p_shift_V_fu_122_p1 = esl_zext<2,1>(tmp_1_fu_84_p2.read());
}

void operator_float_div2::thread_shift_V_cast_fu_116_p2() {
    shift_V_cast_fu_116_p2 = (!ap_const_lv2_2.is_01() || !tmp_6_fu_106_p4.read().is_01())? sc_lv<2>(): (sc_bigint<2>(ap_const_lv2_2) - sc_biguint<2>(tmp_6_fu_106_p4.read()));
}

void operator_float_div2::thread_tmp_11_fu_90_p4() {
    tmp_11_fu_90_p4 = p_Val2_s_fu_58_p1.read().range(30, 24);
}

void operator_float_div2::thread_tmp_12_fu_216_p1() {
    tmp_12_fu_216_p1 = tmp_2_fu_204_p2.read().range(23-1, 0);
}

void operator_float_div2::thread_tmp_13_fu_220_p1() {
    tmp_13_fu_220_p1 = tmp_7_fu_210_p2.read().range(23-1, 0);
}

void operator_float_div2::thread_tmp_1_fu_84_p2() {
    tmp_1_fu_84_p2 = (!new_exp_V_fu_70_p4.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(new_exp_V_fu_70_p4.read() == ap_const_lv8_0);
}

void operator_float_div2::thread_tmp_2_fu_204_p2() {
    tmp_2_fu_204_p2 = (!tmp_cast_fu_201_p1.read().is_01())? sc_lv<24>(): xf_V_fu_187_p3.read() >> (unsigned short)tmp_cast_fu_201_p1.read().to_uint();
}

void operator_float_div2::thread_tmp_3_fu_167_p2() {
    tmp_3_fu_167_p2 = (tmp_fu_149_p2.read() | tmp_1_reg_269.read());
}

void operator_float_div2::thread_tmp_5_fu_180_p3() {
    tmp_5_fu_180_p3 = esl_concat<1,23>(ap_const_lv1_1, new_mant_V_2_reg_262.read());
}

void operator_float_div2::thread_tmp_6_fu_106_p4() {
    tmp_6_fu_106_p4 = p_Val2_s_fu_58_p1.read().range(24, 23);
}

void operator_float_div2::thread_tmp_7_fu_210_p2() {
    tmp_7_fu_210_p2 = (!tmp_cast1_fu_198_p1.read().is_01())? sc_lv<26>(): tmp_9_cast2_fu_194_p1.read() << (unsigned short)tmp_cast1_fu_198_p1.read().to_uint();
}

void operator_float_div2::thread_tmp_8_fu_140_p2() {
    tmp_8_fu_140_p2 = (!new_exp_V_fu_70_p4.read().is_01() || !ap_const_lv8_3.is_01())? sc_lv<1>(): (sc_biguint<8>(new_exp_V_fu_70_p4.read()) < sc_biguint<8>(ap_const_lv8_3));
}

void operator_float_div2::thread_tmp_9_cast2_fu_194_p1() {
    tmp_9_cast2_fu_194_p1 = esl_zext<26,24>(xf_V_fu_187_p3.read());
}

void operator_float_div2::thread_tmp_9_fu_126_p2() {
    tmp_9_fu_126_p2 = (tmp_1_fu_84_p2.read() | icmp_fu_100_p2.read());
}

void operator_float_div2::thread_tmp_cast1_fu_198_p1() {
    tmp_cast1_fu_198_p1 = esl_zext<26,2>(p_0274_2_reg_275.read());
}

void operator_float_div2::thread_tmp_cast_fu_201_p1() {
    tmp_cast_fu_201_p1 = esl_zext<24,2>(p_0274_2_reg_275.read());
}

void operator_float_div2::thread_tmp_fu_149_p2() {
    tmp_fu_149_p2 = (!new_exp_V_reg_256.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(new_exp_V_reg_256.read() == ap_const_lv8_FF);
}

void operator_float_div2::thread_xf_V_1_cast_fu_146_p1() {
    xf_V_1_cast_fu_146_p1 = esl_zext<24,23>(new_mant_V_2_reg_262.read());
}

void operator_float_div2::thread_xf_V_fu_187_p3() {
    xf_V_fu_187_p3 = (!tmp_1_reg_269.read()[0].is_01())? sc_lv<24>(): ((tmp_1_reg_269.read()[0].to_bool())? xf_V_1_cast_fu_146_p1.read(): tmp_5_fu_180_p3.read());
}

void operator_float_div2::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void operator_float_div2::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r\" :  \"" << in_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

