// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="int_32_div3,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.332000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=20,HLS_SYN_LUT=93,HLS_VERSION=2018_2}" *)

module int_32_div3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        d_V,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;
parameter    ap_const_lv32_0 = 32'd0;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] d_V;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] q3_address0;
reg    q3_ce0;
wire   [0:0] q3_q0;
reg   [5:0] q2_address0;
reg    q2_ce0;
wire   [0:0] q2_q0;
reg   [5:0] q1_address0;
reg    q1_ce0;
wire   [0:0] q1_q0;
reg   [5:0] q0_address0;
reg    q0_ce0;
wire   [0:0] q0_q0;
wire   [5:0] r1_address0;
reg    r1_ce0;
wire   [0:0] r1_q0;
wire   [5:0] r0_address0;
reg    r0_ce0;
wire   [0:0] r0_q0;
reg   [3:0] d_chunk_V_reg_269;
reg   [0:0] q3_load_reg_274;
wire    ap_CS_fsm_state2;
reg   [0:0] q2_load_reg_279;
reg   [0:0] q1_load_reg_284;
reg   [0:0] q0_load_reg_289;
reg   [0:0] r1_load_reg_294;
reg   [0:0] r0_load_reg_299;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_fu_176_p1;
wire   [63:0] tmp_2_fu_203_p1;
wire   [3:0] p_Result_s_fu_166_p4;
wire   [5:0] p_Result_s_7_fu_196_p4;
wire    ap_CS_fsm_state4;
wire   [7:0] tmp_1_fu_211_p9;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

int_32_div3_q3 #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q3_address0),
    .ce0(q3_ce0),
    .q0(q3_q0)
);

int_32_div3_q2 #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q2_address0),
    .ce0(q2_ce0),
    .q0(q2_q0)
);

int_32_div3_q1 #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q1_address0),
    .ce0(q1_ce0),
    .q0(q1_q0)
);

int_32_div3_q0 #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q0_address0),
    .ce0(q0_ce0),
    .q0(q0_q0)
);

int_32_div3_r1 #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
r1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(r1_address0),
    .ce0(r1_ce0),
    .q0(r1_q0)
);

int_32_div3_r0 #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
r0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(r0_address0),
    .ce0(r0_ce0),
    .q0(r0_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        d_chunk_V_reg_269 <= {{d_V[27:24]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        q0_load_reg_289 <= q0_q0;
        q1_load_reg_284 <= q1_q0;
        q2_load_reg_279 <= q2_q0;
        q3_load_reg_274 <= q3_q0;
        r0_load_reg_299 <= r0_q0;
        r1_load_reg_294 <= r1_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        q0_address0 = tmp_2_fu_203_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        q0_address0 = tmp_fu_176_p1;
    end else begin
        q0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        q0_ce0 = 1'b1;
    end else begin
        q0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        q1_address0 = tmp_2_fu_203_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        q1_address0 = tmp_fu_176_p1;
    end else begin
        q1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        q1_ce0 = 1'b1;
    end else begin
        q1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        q2_address0 = tmp_2_fu_203_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        q2_address0 = tmp_fu_176_p1;
    end else begin
        q2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        q2_ce0 = 1'b1;
    end else begin
        q2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        q3_address0 = tmp_2_fu_203_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        q3_address0 = tmp_fu_176_p1;
    end else begin
        q3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        q3_ce0 = 1'b1;
    end else begin
        q3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r0_ce0 = 1'b1;
    end else begin
        r0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r1_ce0 = 1'b1;
    end else begin
        r1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_return = {{tmp_1_fu_211_p9}, {ap_const_lv32_0[23:0]}};

assign p_Result_s_7_fu_196_p4 = {{{r1_load_reg_294}, {r0_load_reg_299}}, {d_chunk_V_reg_269}};

assign p_Result_s_fu_166_p4 = {{d_V[31:28]}};

assign r0_address0 = tmp_fu_176_p1;

assign r1_address0 = tmp_fu_176_p1;

assign tmp_1_fu_211_p9 = {{{{{{{{q3_load_reg_274}, {q2_load_reg_279}}, {q1_load_reg_284}}, {q0_load_reg_289}}, {q3_q0}}, {q2_q0}}, {q1_q0}}, {q0_q0}};

assign tmp_2_fu_203_p1 = p_Result_s_7_fu_196_p4;

assign tmp_fu_176_p1 = p_Result_s_fu_166_p4;

endmodule //int_32_div3
