// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _int_32_div3_HH_
#define _int_32_div3_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "int_32_div3_q3.h"
#include "int_32_div3_q2.h"
#include "int_32_div3_q1.h"
#include "int_32_div3_q0.h"
#include "int_32_div3_r1.h"
#include "int_32_div3_r0.h"

namespace ap_rtl {

struct int_32_div3 : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > d_V;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    int_32_div3(sc_module_name name);
    SC_HAS_PROCESS(int_32_div3);

    ~int_32_div3();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    int_32_div3_q3* q3_U;
    int_32_div3_q2* q2_U;
    int_32_div3_q1* q1_U;
    int_32_div3_q0* q0_U;
    int_32_div3_r1* r1_U;
    int_32_div3_r0* r0_U;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<6> > q3_address0;
    sc_signal< sc_logic > q3_ce0;
    sc_signal< sc_lv<1> > q3_q0;
    sc_signal< sc_lv<6> > q2_address0;
    sc_signal< sc_logic > q2_ce0;
    sc_signal< sc_lv<1> > q2_q0;
    sc_signal< sc_lv<6> > q1_address0;
    sc_signal< sc_logic > q1_ce0;
    sc_signal< sc_lv<1> > q1_q0;
    sc_signal< sc_lv<6> > q0_address0;
    sc_signal< sc_logic > q0_ce0;
    sc_signal< sc_lv<1> > q0_q0;
    sc_signal< sc_lv<6> > r1_address0;
    sc_signal< sc_logic > r1_ce0;
    sc_signal< sc_lv<1> > r1_q0;
    sc_signal< sc_lv<6> > r0_address0;
    sc_signal< sc_logic > r0_ce0;
    sc_signal< sc_lv<1> > r0_q0;
    sc_signal< sc_lv<4> > d_chunk_V_reg_275;
    sc_signal< sc_lv<1> > q3_load_reg_280;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > q2_load_reg_285;
    sc_signal< sc_lv<1> > q1_load_reg_290;
    sc_signal< sc_lv<1> > q0_load_reg_295;
    sc_signal< sc_lv<1> > r1_load_reg_300;
    sc_signal< sc_lv<1> > r0_load_reg_305;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > tmp_fu_182_p1;
    sc_signal< sc_lv<64> > tmp_2_fu_209_p1;
    sc_signal< sc_lv<4> > p_Result_s_fu_172_p4;
    sc_signal< sc_lv<6> > p_Result_s_7_fu_202_p4;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<8> > tmp_4_fu_217_p9;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_1C;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1B;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_p_Result_s_7_fu_202_p4();
    void thread_p_Result_s_fu_172_p4();
    void thread_q0_address0();
    void thread_q0_ce0();
    void thread_q1_address0();
    void thread_q1_ce0();
    void thread_q2_address0();
    void thread_q2_ce0();
    void thread_q3_address0();
    void thread_q3_ce0();
    void thread_r0_address0();
    void thread_r0_ce0();
    void thread_r1_address0();
    void thread_r1_ce0();
    void thread_tmp_2_fu_209_p1();
    void thread_tmp_4_fu_217_p9();
    void thread_tmp_fu_182_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
