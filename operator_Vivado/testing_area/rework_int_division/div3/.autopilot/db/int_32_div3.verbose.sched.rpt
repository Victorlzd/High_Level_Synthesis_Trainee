

================================================================
== Vivado HLS Report for 'int_32_div3'
================================================================
* Date:           Tue Aug 28 11:07:28 2018

* Version:        2018.2 (Build 2258646 on Thu Jun 14 20:25:20 MDT 2018)
* Project:        rework_int_division
* Solution:       div3
* Product family: kintex7
* Target device:  xc7k160tfbg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   2.50|     1.332|        0.31|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    3|    3|    3|    3|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 4
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.33>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%d_V_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %d_V)"   --->   Operation 5 'read' 'd_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%p_Result_s = call i4 @_ssdm_op_PartSelect.i4.i32.i32.i32(i32 %d_V_read, i32 28, i32 31)" [test.cpp:47]   --->   Operation 6 'partselect' 'p_Result_s' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%tmp = zext i4 %p_Result_s to i64" [test.cpp:48]   --->   Operation 7 'zext' 'tmp' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%q3_addr = getelementptr [64 x i1]* @q3, i64 0, i64 %tmp" [test.cpp:48]   --->   Operation 8 'getelementptr' 'q3_addr' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [2/2] (1.33ns)   --->   "%q3_load = load i1* %q3_addr, align 1" [test.cpp:48]   --->   Operation 9 'load' 'q3_load' <Predicate = true> <Delay = 1.33> <Core = "ROM_nP">   --->   Core 48 'ROM_nP' <Latency = 1> <II = 1> <Delay = 1.33> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 1> <Depth = 64> <ROM>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%q2_addr = getelementptr [64 x i1]* @q2, i64 0, i64 %tmp" [test.cpp:49]   --->   Operation 10 'getelementptr' 'q2_addr' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [2/2] (1.33ns)   --->   "%q2_load = load i1* %q2_addr, align 1" [test.cpp:49]   --->   Operation 11 'load' 'q2_load' <Predicate = true> <Delay = 1.33> <Core = "ROM_nP">   --->   Core 48 'ROM_nP' <Latency = 1> <II = 1> <Delay = 1.33> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 1> <Depth = 64> <ROM>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%q1_addr = getelementptr [64 x i1]* @q1, i64 0, i64 %tmp" [test.cpp:50]   --->   Operation 12 'getelementptr' 'q1_addr' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [2/2] (1.33ns)   --->   "%q1_load = load i1* %q1_addr, align 1" [test.cpp:50]   --->   Operation 13 'load' 'q1_load' <Predicate = true> <Delay = 1.33> <Core = "ROM_nP">   --->   Core 48 'ROM_nP' <Latency = 1> <II = 1> <Delay = 1.33> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 1> <Depth = 64> <ROM>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%q0_addr = getelementptr [64 x i1]* @q0, i64 0, i64 %tmp" [test.cpp:51]   --->   Operation 14 'getelementptr' 'q0_addr' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [2/2] (1.33ns)   --->   "%q0_load = load i1* %q0_addr, align 1" [test.cpp:51]   --->   Operation 15 'load' 'q0_load' <Predicate = true> <Delay = 1.33> <Core = "ROM_nP">   --->   Core 48 'ROM_nP' <Latency = 1> <II = 1> <Delay = 1.33> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 1> <Depth = 64> <ROM>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%r1_addr = getelementptr [64 x i1]* @r1, i64 0, i64 %tmp" [test.cpp:52]   --->   Operation 16 'getelementptr' 'r1_addr' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [2/2] (1.33ns)   --->   "%r1_load = load i1* %r1_addr, align 1" [test.cpp:52]   --->   Operation 17 'load' 'r1_load' <Predicate = true> <Delay = 1.33> <Core = "ROM_nP">   --->   Core 48 'ROM_nP' <Latency = 1> <II = 1> <Delay = 1.33> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 1> <Depth = 64> <ROM>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%r0_addr = getelementptr [64 x i1]* @r0, i64 0, i64 %tmp" [test.cpp:53]   --->   Operation 18 'getelementptr' 'r0_addr' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [2/2] (1.33ns)   --->   "%r0_load = load i1* %r0_addr, align 1" [test.cpp:53]   --->   Operation 19 'load' 'r0_load' <Predicate = true> <Delay = 1.33> <Core = "ROM_nP">   --->   Core 48 'ROM_nP' <Latency = 1> <II = 1> <Delay = 1.33> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 1> <Depth = 64> <ROM>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%d_chunk_V = call i4 @_ssdm_op_PartSelect.i4.i32.i32.i32(i32 %d_V_read, i32 24, i32 27)" [test.cpp:58]   --->   Operation 20 'partselect' 'd_chunk_V' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 1.33>
ST_2 : Operation 21 [1/2] (1.33ns)   --->   "%q3_load = load i1* %q3_addr, align 1" [test.cpp:48]   --->   Operation 21 'load' 'q3_load' <Predicate = true> <Delay = 1.33> <Core = "ROM_nP">   --->   Core 48 'ROM_nP' <Latency = 1> <II = 1> <Delay = 1.33> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 1> <Depth = 64> <ROM>
ST_2 : Operation 22 [1/2] (1.33ns)   --->   "%q2_load = load i1* %q2_addr, align 1" [test.cpp:49]   --->   Operation 22 'load' 'q2_load' <Predicate = true> <Delay = 1.33> <Core = "ROM_nP">   --->   Core 48 'ROM_nP' <Latency = 1> <II = 1> <Delay = 1.33> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 1> <Depth = 64> <ROM>
ST_2 : Operation 23 [1/2] (1.33ns)   --->   "%q1_load = load i1* %q1_addr, align 1" [test.cpp:50]   --->   Operation 23 'load' 'q1_load' <Predicate = true> <Delay = 1.33> <Core = "ROM_nP">   --->   Core 48 'ROM_nP' <Latency = 1> <II = 1> <Delay = 1.33> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 1> <Depth = 64> <ROM>
ST_2 : Operation 24 [1/2] (1.33ns)   --->   "%q0_load = load i1* %q0_addr, align 1" [test.cpp:51]   --->   Operation 24 'load' 'q0_load' <Predicate = true> <Delay = 1.33> <Core = "ROM_nP">   --->   Core 48 'ROM_nP' <Latency = 1> <II = 1> <Delay = 1.33> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 1> <Depth = 64> <ROM>
ST_2 : Operation 25 [1/2] (1.33ns)   --->   "%r1_load = load i1* %r1_addr, align 1" [test.cpp:52]   --->   Operation 25 'load' 'r1_load' <Predicate = true> <Delay = 1.33> <Core = "ROM_nP">   --->   Core 48 'ROM_nP' <Latency = 1> <II = 1> <Delay = 1.33> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 1> <Depth = 64> <ROM>
ST_2 : Operation 26 [1/2] (1.33ns)   --->   "%r0_load = load i1* %r0_addr, align 1" [test.cpp:53]   --->   Operation 26 'load' 'r0_load' <Predicate = true> <Delay = 1.33> <Core = "ROM_nP">   --->   Core 48 'ROM_nP' <Latency = 1> <II = 1> <Delay = 1.33> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 1> <Depth = 64> <ROM>

State 3 <SV = 2> <Delay = 1.33>
ST_3 : Operation 27 [1/1] (0.00ns)   --->   "%p_Result_s_7 = call i6 @_ssdm_op_BitConcatenate.i6.i1.i1.i4(i1 %r1_load, i1 %r0_load, i4 %d_chunk_V)" [test.cpp:60]   --->   Operation 27 'bitconcatenate' 'p_Result_s_7' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 28 [1/1] (0.00ns)   --->   "%tmp_2 = zext i6 %p_Result_s_7 to i64" [test.cpp:60]   --->   Operation 28 'zext' 'tmp_2' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 29 [1/1] (0.00ns)   --->   "%q3_addr_1 = getelementptr [64 x i1]* @q3, i64 0, i64 %tmp_2" [test.cpp:60]   --->   Operation 29 'getelementptr' 'q3_addr_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 30 [2/2] (1.33ns)   --->   "%q3_load_1 = load i1* %q3_addr_1, align 1" [test.cpp:60]   --->   Operation 30 'load' 'q3_load_1' <Predicate = true> <Delay = 1.33> <Core = "ROM_nP">   --->   Core 48 'ROM_nP' <Latency = 1> <II = 1> <Delay = 1.33> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 1> <Depth = 64> <ROM>
ST_3 : Operation 31 [1/1] (0.00ns)   --->   "%q2_addr_1 = getelementptr [64 x i1]* @q2, i64 0, i64 %tmp_2" [test.cpp:61]   --->   Operation 31 'getelementptr' 'q2_addr_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 32 [2/2] (1.33ns)   --->   "%q2_load_1 = load i1* %q2_addr_1, align 1" [test.cpp:61]   --->   Operation 32 'load' 'q2_load_1' <Predicate = true> <Delay = 1.33> <Core = "ROM_nP">   --->   Core 48 'ROM_nP' <Latency = 1> <II = 1> <Delay = 1.33> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 1> <Depth = 64> <ROM>
ST_3 : Operation 33 [1/1] (0.00ns)   --->   "%q1_addr_1 = getelementptr [64 x i1]* @q1, i64 0, i64 %tmp_2" [test.cpp:62]   --->   Operation 33 'getelementptr' 'q1_addr_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 34 [2/2] (1.33ns)   --->   "%q1_load_1 = load i1* %q1_addr_1, align 1" [test.cpp:62]   --->   Operation 34 'load' 'q1_load_1' <Predicate = true> <Delay = 1.33> <Core = "ROM_nP">   --->   Core 48 'ROM_nP' <Latency = 1> <II = 1> <Delay = 1.33> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 1> <Depth = 64> <ROM>
ST_3 : Operation 35 [1/1] (0.00ns)   --->   "%q0_addr_1 = getelementptr [64 x i1]* @q0, i64 0, i64 %tmp_2" [test.cpp:63]   --->   Operation 35 'getelementptr' 'q0_addr_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 36 [2/2] (1.33ns)   --->   "%q0_load_1 = load i1* %q0_addr_1, align 1" [test.cpp:63]   --->   Operation 36 'load' 'q0_load_1' <Predicate = true> <Delay = 1.33> <Core = "ROM_nP">   --->   Core 48 'ROM_nP' <Latency = 1> <II = 1> <Delay = 1.33> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 1> <Depth = 64> <ROM>

State 4 <SV = 3> <Delay = 1.33>
ST_4 : Operation 37 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32 0), !map !76"   --->   Operation 37 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 38 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32 %d_V), !map !82"   --->   Operation 38 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 39 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([12 x i8]* @int_32_div3_str) nounwind"   --->   Operation 39 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 40 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLatency(i32 0, i32 1, [1 x i8]* @p_str) nounwind" [test.cpp:30]   --->   Operation 40 'speclatency' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 41 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLatency(i32 0, i32 1, [1 x i8]* @p_str) nounwind" [test.cpp:45]   --->   Operation 41 'speclatency' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 42 [1/2] (1.33ns)   --->   "%q3_load_1 = load i1* %q3_addr_1, align 1" [test.cpp:60]   --->   Operation 42 'load' 'q3_load_1' <Predicate = true> <Delay = 1.33> <Core = "ROM_nP">   --->   Core 48 'ROM_nP' <Latency = 1> <II = 1> <Delay = 1.33> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 1> <Depth = 64> <ROM>
ST_4 : Operation 43 [1/2] (1.33ns)   --->   "%q2_load_1 = load i1* %q2_addr_1, align 1" [test.cpp:61]   --->   Operation 43 'load' 'q2_load_1' <Predicate = true> <Delay = 1.33> <Core = "ROM_nP">   --->   Core 48 'ROM_nP' <Latency = 1> <II = 1> <Delay = 1.33> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 1> <Depth = 64> <ROM>
ST_4 : Operation 44 [1/2] (1.33ns)   --->   "%q1_load_1 = load i1* %q1_addr_1, align 1" [test.cpp:62]   --->   Operation 44 'load' 'q1_load_1' <Predicate = true> <Delay = 1.33> <Core = "ROM_nP">   --->   Core 48 'ROM_nP' <Latency = 1> <II = 1> <Delay = 1.33> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 1> <Depth = 64> <ROM>
ST_4 : Operation 45 [1/2] (1.33ns)   --->   "%q0_load_1 = load i1* %q0_addr_1, align 1" [test.cpp:63]   --->   Operation 45 'load' 'q0_load_1' <Predicate = true> <Delay = 1.33> <Core = "ROM_nP">   --->   Core 48 'ROM_nP' <Latency = 1> <II = 1> <Delay = 1.33> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 1> <Depth = 64> <ROM>
ST_4 : Operation 46 [1/1] (0.00ns)   --->   "%tmp_1 = call i8 @_ssdm_op_BitConcatenate.i8.i1.i1.i1.i1.i1.i1.i1.i1(i1 %q3_load, i1 %q2_load, i1 %q1_load, i1 %q0_load, i1 %q3_load_1, i1 %q2_load_1, i1 %q1_load_1, i1 %q0_load_1)" [test.cpp:63]   --->   Operation 46 'bitconcatenate' 'tmp_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 47 [1/1] (0.00ns)   --->   "%p_Result_1 = call i32 @_ssdm_op_PartSet.i32.i32.i8.i32.i32(i32 undef, i8 %tmp_1, i32 24, i32 31)" [test.cpp:63]   --->   Operation 47 'partset' 'p_Result_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 48 [1/1] (0.00ns)   --->   "ret i32 %p_Result_1" [test.cpp:125]   --->   Operation 48 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 2.5ns, clock uncertainty: 0.312ns.

 <State 1>: 1.33ns
The critical path consists of the following:
	wire read on port 'd_V' [13]  (0 ns)
	'getelementptr' operation ('q1_addr', test.cpp:50) [20]  (0 ns)
	'load' operation ('q1_load', test.cpp:50) on array 'q1' [21]  (1.33 ns)

 <State 2>: 1.33ns
The critical path consists of the following:
	'load' operation ('q3_load', test.cpp:48) on array 'q3' [17]  (1.33 ns)

 <State 3>: 1.33ns
The critical path consists of the following:
	'getelementptr' operation ('q3_addr_1', test.cpp:60) [31]  (0 ns)
	'load' operation ('q3_load_1', test.cpp:60) on array 'q3' [32]  (1.33 ns)

 <State 4>: 1.33ns
The critical path consists of the following:
	'load' operation ('q3_load_1', test.cpp:60) on array 'q3' [32]  (1.33 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
