-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity operator_double_div2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of operator_double_div2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "operator_double_div2,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.292000,HLS_SYN_LAT=8,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1226,HLS_SYN_LUT=1134,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_Repl2_2_reg_214 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_exp_V_1_fu_58_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_exp_V_1_reg_219 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_mant_V_1_fu_68_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal new_mant_V_1_reg_226 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_fu_72_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_233 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0272_2_fu_120_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_0272_2_reg_238 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_137_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal r_V_reg_259 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_142_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal r_V_1_reg_264 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Val2_s_fu_46_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_78_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_94_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_fu_88_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shift_V_fu_110_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shift_V_cast_fu_104_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_137_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_142_p0 : STD_LOGIC_VECTOR (53 downto 0);
    signal grp_fu_142_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_6_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_158_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_s_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_173_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_exp_V_fu_148_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal xf_V_fu_161_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Repl2_1_fu_186_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Repl2_s_fu_194_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_s_fu_201_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component operator_double_dbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (51 downto 0);
        din1 : IN STD_LOGIC_VECTOR (51 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component operator_double_dcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (53 downto 0);
        din1 : IN STD_LOGIC_VECTOR (53 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (53 downto 0) );
    end component;



begin
    operator_double_dbkb_U1 : component operator_double_dbkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        OP => 1,
        din0_WIDTH => 52,
        din1_WIDTH => 2,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => new_mant_V_1_reg_226,
        din1 => grp_fu_137_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_137_p2);

    operator_double_dcud_U2 : component operator_double_dcud
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        OP => 0,
        din0_WIDTH => 54,
        din1_WIDTH => 2,
        dout_WIDTH => 54)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_142_p0,
        din1 => grp_fu_142_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_142_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                new_exp_V_1_reg_219 <= p_Val2_s_fu_46_p1(62 downto 52);
                new_mant_V_1_reg_226 <= new_mant_V_1_fu_68_p1;
                p_0272_2_reg_238 <= p_0272_2_fu_120_p3;
                p_Repl2_2_reg_214 <= p_Val2_s_fu_46_p1(63 downto 63);
                tmp_reg_233 <= tmp_fu_72_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                r_V_1_reg_264 <= grp_fu_142_p2;
                r_V_reg_259 <= grp_fu_137_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_s_fu_201_p4;
    grp_fu_137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0272_2_reg_238),52));
    grp_fu_142_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_mant_V_1_reg_226),54));
    grp_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0272_2_reg_238),54));
    icmp_fu_88_p2 <= "0" when (tmp_7_fu_78_p4 = ap_const_lv10_0) else "1";
    new_exp_V_1_fu_58_p4 <= p_Val2_s_fu_46_p1(62 downto 52);
    new_exp_V_fu_148_p2 <= std_logic_vector(signed(ap_const_lv11_7FF) + signed(new_exp_V_1_reg_219));
    new_mant_V_1_fu_68_p1 <= p_Val2_s_fu_46_p1(52 - 1 downto 0);
    p_0272_2_fu_120_p3 <= 
        p_shift_V_fu_110_p1 when (tmp_4_fu_114_p2(0) = '1') else 
        shift_V_cast_fu_104_p2;
    p_Repl2_1_fu_186_p3 <= 
        p_s_fu_173_p3 when (tmp_1_fu_181_p2(0) = '1') else 
        new_exp_V_fu_148_p2;
    p_Repl2_s_fu_194_p3 <= 
        new_mant_V_1_reg_226 when (tmp_s_fu_168_p2(0) = '1') else 
        xf_V_fu_161_p3;
    p_Result_s_fu_201_p4 <= ((p_Repl2_2_reg_214 & p_Repl2_1_fu_186_p3) & p_Repl2_s_fu_194_p3);
    p_Val2_s_fu_46_p1 <= in_r;
    p_s_fu_173_p3 <= 
        ap_const_lv11_7FF when (tmp_s_fu_168_p2(0) = '1') else 
        ap_const_lv11_0;
    p_shift_V_fu_110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_72_p2),2));
    shift_V_cast_fu_104_p2 <= std_logic_vector(signed(ap_const_lv2_2) - signed(tmp_3_fu_94_p4));
    tmp_1_fu_181_p2 <= (tmp_s_fu_168_p2 or tmp_reg_233);
    tmp_3_fu_94_p4 <= p_Val2_s_fu_46_p1(53 downto 52);
    tmp_4_fu_114_p2 <= (tmp_fu_72_p2 or icmp_fu_88_p2);
    tmp_6_fu_153_p2 <= "1" when (unsigned(new_exp_V_1_reg_219) < unsigned(ap_const_lv11_3)) else "0";
    tmp_7_fu_78_p4 <= p_Val2_s_fu_46_p1(62 downto 53);
    tmp_8_fu_158_p1 <= r_V_1_reg_264(52 - 1 downto 0);
    tmp_fu_72_p2 <= "1" when (new_exp_V_1_fu_58_p4 = ap_const_lv11_0) else "0";
    tmp_s_fu_168_p2 <= "1" when (new_exp_V_1_reg_219 = ap_const_lv11_7FF) else "0";
    xf_V_fu_161_p3 <= 
        r_V_reg_259 when (tmp_6_fu_153_p2(0) = '1') else 
        tmp_8_fu_158_p1;
end behav;
