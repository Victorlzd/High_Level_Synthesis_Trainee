// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "operator_double_div2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic operator_double_div2::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> operator_double_div2::ap_const_lv32_3F = "111111";
const sc_lv<32> operator_double_div2::ap_const_lv32_34 = "110100";
const sc_lv<32> operator_double_div2::ap_const_lv32_3E = "111110";
const sc_lv<11> operator_double_div2::ap_const_lv11_7FF = "11111111111";
const sc_lv<11> operator_double_div2::ap_const_lv11_0 = "00000000000";
const sc_lv<32> operator_double_div2::ap_const_lv32_35 = "110101";
const sc_lv<10> operator_double_div2::ap_const_lv10_0 = "0000000000";
const sc_lv<2> operator_double_div2::ap_const_lv2_2 = "10";
const sc_lv<1> operator_double_div2::ap_const_lv1_1 = "1";
const sc_lv<11> operator_double_div2::ap_const_lv11_3 = "11";
const sc_lv<1> operator_double_div2::ap_const_lv1_0 = "0";
const sc_logic operator_double_div2::ap_const_logic_0 = sc_dt::Log_0;
const bool operator_double_div2::ap_const_boolean_1 = true;

operator_double_div2::operator_double_div2(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_start );
    sensitive << ( p_Result_s_fu_248_p4 );

    SC_METHOD(thread_icmp_fu_138_p2);
    sensitive << ( ap_start );
    sensitive << ( tmp_fu_88_p2 );
    sensitive << ( tmp_10_fu_128_p4 );

    SC_METHOD(thread_new_exp_V_1_fu_100_p2);
    sensitive << ( new_exp_V_fu_70_p4 );

    SC_METHOD(thread_new_exp_V_fu_70_p4);
    sensitive << ( p_Val2_s_fu_58_p1 );

    SC_METHOD(thread_new_mant_V_1_fu_232_p3);
    sensitive << ( tmp_8_fu_198_p2 );
    sensitive << ( tmp_11_fu_224_p1 );
    sensitive << ( tmp_12_fu_228_p1 );

    SC_METHOD(thread_new_mant_V_2_fu_80_p1);
    sensitive << ( p_Val2_s_fu_58_p1 );

    SC_METHOD(thread_new_mant_V_fu_240_p3);
    sensitive << ( new_mant_V_2_fu_80_p1 );
    sensitive << ( tmp_fu_88_p2 );
    sensitive << ( new_mant_V_1_fu_232_p3 );

    SC_METHOD(thread_p_0274_2_fu_170_p3);
    sensitive << ( tmp_6_fu_164_p2 );
    sensitive << ( p_shift_V_fu_160_p1 );
    sensitive << ( shift_V_cast_fu_154_p2 );

    SC_METHOD(thread_p_Repl2_1_fu_120_p3);
    sensitive << ( tmp_3_fu_114_p2 );
    sensitive << ( p_new_exp_V_1_fu_106_p3 );
    sensitive << ( new_exp_V_1_fu_100_p2 );

    SC_METHOD(thread_p_Repl2_2_fu_62_p3);
    sensitive << ( p_Val2_s_fu_58_p1 );

    SC_METHOD(thread_p_Result_s_fu_248_p4);
    sensitive << ( p_Repl2_2_fu_62_p3 );
    sensitive << ( p_Repl2_1_fu_120_p3 );
    sensitive << ( new_mant_V_fu_240_p3 );

    SC_METHOD(thread_p_Val2_s_fu_58_p1);
    sensitive << ( in_r );

    SC_METHOD(thread_p_cast_fu_194_p1);
    sensitive << ( xf_V_fu_186_p3 );

    SC_METHOD(thread_p_new_exp_V_1_fu_106_p3);
    sensitive << ( tmp_fu_88_p2 );

    SC_METHOD(thread_p_shift_V_fu_160_p1);
    sensitive << ( tmp_1_fu_94_p2 );

    SC_METHOD(thread_r_V_1_fu_218_p2);
    sensitive << ( p_cast_fu_194_p1 );
    sensitive << ( tmp_9_fu_204_p1 );

    SC_METHOD(thread_r_V_fu_212_p2);
    sensitive << ( xf_V_fu_186_p3 );
    sensitive << ( tmp_9_cast_fu_208_p1 );

    SC_METHOD(thread_shift_V_cast_fu_154_p2);
    sensitive << ( tmp_5_fu_144_p4 );

    SC_METHOD(thread_tmp_10_fu_128_p4);
    sensitive << ( p_Val2_s_fu_58_p1 );

    SC_METHOD(thread_tmp_11_fu_224_p1);
    sensitive << ( r_V_fu_212_p2 );

    SC_METHOD(thread_tmp_12_fu_228_p1);
    sensitive << ( r_V_1_fu_218_p2 );

    SC_METHOD(thread_tmp_1_fu_94_p2);
    sensitive << ( ap_start );
    sensitive << ( new_exp_V_fu_70_p4 );

    SC_METHOD(thread_tmp_2_fu_178_p3);
    sensitive << ( new_mant_V_2_fu_80_p1 );

    SC_METHOD(thread_tmp_3_fu_114_p2);
    sensitive << ( tmp_fu_88_p2 );
    sensitive << ( tmp_1_fu_94_p2 );

    SC_METHOD(thread_tmp_5_fu_144_p4);
    sensitive << ( p_Val2_s_fu_58_p1 );

    SC_METHOD(thread_tmp_6_fu_164_p2);
    sensitive << ( tmp_1_fu_94_p2 );
    sensitive << ( icmp_fu_138_p2 );

    SC_METHOD(thread_tmp_8_fu_198_p2);
    sensitive << ( ap_start );
    sensitive << ( new_exp_V_fu_70_p4 );
    sensitive << ( tmp_fu_88_p2 );

    SC_METHOD(thread_tmp_9_cast_fu_208_p1);
    sensitive << ( p_0274_2_fu_170_p3 );

    SC_METHOD(thread_tmp_9_fu_204_p1);
    sensitive << ( p_0274_2_fu_170_p3 );

    SC_METHOD(thread_tmp_fu_88_p2);
    sensitive << ( ap_start );
    sensitive << ( new_exp_V_fu_70_p4 );

    SC_METHOD(thread_xf_V_4_cast_fu_84_p1);
    sensitive << ( new_mant_V_2_fu_80_p1 );

    SC_METHOD(thread_xf_V_fu_186_p3);
    sensitive << ( tmp_1_fu_94_p2 );
    sensitive << ( xf_V_4_cast_fu_84_p1 );
    sensitive << ( tmp_2_fu_178_p3 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "operator_double_div2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_r, "(port)in_r");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, p_Val2_s_fu_58_p1, "p_Val2_s_fu_58_p1");
    sc_trace(mVcdFile, new_mant_V_2_fu_80_p1, "new_mant_V_2_fu_80_p1");
    sc_trace(mVcdFile, new_exp_V_fu_70_p4, "new_exp_V_fu_70_p4");
    sc_trace(mVcdFile, tmp_fu_88_p2, "tmp_fu_88_p2");
    sc_trace(mVcdFile, tmp_1_fu_94_p2, "tmp_1_fu_94_p2");
    sc_trace(mVcdFile, tmp_3_fu_114_p2, "tmp_3_fu_114_p2");
    sc_trace(mVcdFile, p_new_exp_V_1_fu_106_p3, "p_new_exp_V_1_fu_106_p3");
    sc_trace(mVcdFile, new_exp_V_1_fu_100_p2, "new_exp_V_1_fu_100_p2");
    sc_trace(mVcdFile, tmp_10_fu_128_p4, "tmp_10_fu_128_p4");
    sc_trace(mVcdFile, tmp_5_fu_144_p4, "tmp_5_fu_144_p4");
    sc_trace(mVcdFile, icmp_fu_138_p2, "icmp_fu_138_p2");
    sc_trace(mVcdFile, tmp_6_fu_164_p2, "tmp_6_fu_164_p2");
    sc_trace(mVcdFile, p_shift_V_fu_160_p1, "p_shift_V_fu_160_p1");
    sc_trace(mVcdFile, shift_V_cast_fu_154_p2, "shift_V_cast_fu_154_p2");
    sc_trace(mVcdFile, xf_V_4_cast_fu_84_p1, "xf_V_4_cast_fu_84_p1");
    sc_trace(mVcdFile, tmp_2_fu_178_p3, "tmp_2_fu_178_p3");
    sc_trace(mVcdFile, xf_V_fu_186_p3, "xf_V_fu_186_p3");
    sc_trace(mVcdFile, p_0274_2_fu_170_p3, "p_0274_2_fu_170_p3");
    sc_trace(mVcdFile, tmp_9_cast_fu_208_p1, "tmp_9_cast_fu_208_p1");
    sc_trace(mVcdFile, p_cast_fu_194_p1, "p_cast_fu_194_p1");
    sc_trace(mVcdFile, tmp_9_fu_204_p1, "tmp_9_fu_204_p1");
    sc_trace(mVcdFile, r_V_fu_212_p2, "r_V_fu_212_p2");
    sc_trace(mVcdFile, r_V_1_fu_218_p2, "r_V_1_fu_218_p2");
    sc_trace(mVcdFile, tmp_8_fu_198_p2, "tmp_8_fu_198_p2");
    sc_trace(mVcdFile, tmp_11_fu_224_p1, "tmp_11_fu_224_p1");
    sc_trace(mVcdFile, tmp_12_fu_228_p1, "tmp_12_fu_228_p1");
    sc_trace(mVcdFile, new_mant_V_1_fu_232_p3, "new_mant_V_1_fu_232_p3");
    sc_trace(mVcdFile, p_Repl2_2_fu_62_p3, "p_Repl2_2_fu_62_p3");
    sc_trace(mVcdFile, p_Repl2_1_fu_120_p3, "p_Repl2_1_fu_120_p3");
    sc_trace(mVcdFile, new_mant_V_fu_240_p3, "new_mant_V_fu_240_p3");
    sc_trace(mVcdFile, p_Result_s_fu_248_p4, "p_Result_s_fu_248_p4");
#endif

    }
    mHdltvinHandle.open("operator_double_div2.hdltvin.dat");
    mHdltvoutHandle.open("operator_double_div2.hdltvout.dat");
}

operator_double_div2::~operator_double_div2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void operator_double_div2::thread_ap_done() {
    ap_done = ap_start.read();
}

void operator_double_div2::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void operator_double_div2::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void operator_double_div2::thread_ap_return() {
    ap_return = p_Result_s_fu_248_p4.read();
}

void operator_double_div2::thread_icmp_fu_138_p2() {
    icmp_fu_138_p2 = (!tmp_10_fu_128_p4.read().is_01() || !ap_const_lv10_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_10_fu_128_p4.read() != ap_const_lv10_0);
}

void operator_double_div2::thread_new_exp_V_1_fu_100_p2() {
    new_exp_V_1_fu_100_p2 = (!ap_const_lv11_7FF.is_01() || !new_exp_V_fu_70_p4.read().is_01())? sc_lv<11>(): (sc_bigint<11>(ap_const_lv11_7FF) + sc_biguint<11>(new_exp_V_fu_70_p4.read()));
}

void operator_double_div2::thread_new_exp_V_fu_70_p4() {
    new_exp_V_fu_70_p4 = p_Val2_s_fu_58_p1.read().range(62, 52);
}

void operator_double_div2::thread_new_mant_V_1_fu_232_p3() {
    new_mant_V_1_fu_232_p3 = (!tmp_8_fu_198_p2.read()[0].is_01())? sc_lv<52>(): ((tmp_8_fu_198_p2.read()[0].to_bool())? tmp_11_fu_224_p1.read(): tmp_12_fu_228_p1.read());
}

void operator_double_div2::thread_new_mant_V_2_fu_80_p1() {
    new_mant_V_2_fu_80_p1 = p_Val2_s_fu_58_p1.read().range(52-1, 0);
}

void operator_double_div2::thread_new_mant_V_fu_240_p3() {
    new_mant_V_fu_240_p3 = (!tmp_fu_88_p2.read()[0].is_01())? sc_lv<52>(): ((tmp_fu_88_p2.read()[0].to_bool())? new_mant_V_2_fu_80_p1.read(): new_mant_V_1_fu_232_p3.read());
}

void operator_double_div2::thread_p_0274_2_fu_170_p3() {
    p_0274_2_fu_170_p3 = (!tmp_6_fu_164_p2.read()[0].is_01())? sc_lv<2>(): ((tmp_6_fu_164_p2.read()[0].to_bool())? p_shift_V_fu_160_p1.read(): shift_V_cast_fu_154_p2.read());
}

void operator_double_div2::thread_p_Repl2_1_fu_120_p3() {
    p_Repl2_1_fu_120_p3 = (!tmp_3_fu_114_p2.read()[0].is_01())? sc_lv<11>(): ((tmp_3_fu_114_p2.read()[0].to_bool())? p_new_exp_V_1_fu_106_p3.read(): new_exp_V_1_fu_100_p2.read());
}

void operator_double_div2::thread_p_Repl2_2_fu_62_p3() {
    p_Repl2_2_fu_62_p3 = p_Val2_s_fu_58_p1.read().range(63, 63);
}

void operator_double_div2::thread_p_Result_s_fu_248_p4() {
    p_Result_s_fu_248_p4 = esl_concat<12,52>(esl_concat<1,11>(p_Repl2_2_fu_62_p3.read(), p_Repl2_1_fu_120_p3.read()), new_mant_V_fu_240_p3.read());
}

void operator_double_div2::thread_p_Val2_s_fu_58_p1() {
    p_Val2_s_fu_58_p1 = in_r.read();
}

void operator_double_div2::thread_p_cast_fu_194_p1() {
    p_cast_fu_194_p1 = esl_zext<55,53>(xf_V_fu_186_p3.read());
}

void operator_double_div2::thread_p_new_exp_V_1_fu_106_p3() {
    p_new_exp_V_1_fu_106_p3 = (!tmp_fu_88_p2.read()[0].is_01())? sc_lv<11>(): ((tmp_fu_88_p2.read()[0].to_bool())? ap_const_lv11_7FF: ap_const_lv11_0);
}

void operator_double_div2::thread_p_shift_V_fu_160_p1() {
    p_shift_V_fu_160_p1 = esl_zext<2,1>(tmp_1_fu_94_p2.read());
}

void operator_double_div2::thread_r_V_1_fu_218_p2() {
    r_V_1_fu_218_p2 = (!tmp_9_fu_204_p1.read().is_01())? sc_lv<55>(): p_cast_fu_194_p1.read() << (unsigned short)tmp_9_fu_204_p1.read().to_uint();
}

void operator_double_div2::thread_r_V_fu_212_p2() {
    r_V_fu_212_p2 = (!tmp_9_cast_fu_208_p1.read().is_01())? sc_lv<53>(): xf_V_fu_186_p3.read() >> (unsigned short)tmp_9_cast_fu_208_p1.read().to_uint();
}

void operator_double_div2::thread_shift_V_cast_fu_154_p2() {
    shift_V_cast_fu_154_p2 = (!ap_const_lv2_2.is_01() || !tmp_5_fu_144_p4.read().is_01())? sc_lv<2>(): (sc_bigint<2>(ap_const_lv2_2) - sc_biguint<2>(tmp_5_fu_144_p4.read()));
}

void operator_double_div2::thread_tmp_10_fu_128_p4() {
    tmp_10_fu_128_p4 = p_Val2_s_fu_58_p1.read().range(62, 53);
}

void operator_double_div2::thread_tmp_11_fu_224_p1() {
    tmp_11_fu_224_p1 = r_V_fu_212_p2.read().range(52-1, 0);
}

void operator_double_div2::thread_tmp_12_fu_228_p1() {
    tmp_12_fu_228_p1 = r_V_1_fu_218_p2.read().range(52-1, 0);
}

void operator_double_div2::thread_tmp_1_fu_94_p2() {
    tmp_1_fu_94_p2 = (!new_exp_V_fu_70_p4.read().is_01() || !ap_const_lv11_0.is_01())? sc_lv<1>(): sc_lv<1>(new_exp_V_fu_70_p4.read() == ap_const_lv11_0);
}

void operator_double_div2::thread_tmp_2_fu_178_p3() {
    tmp_2_fu_178_p3 = esl_concat<1,52>(ap_const_lv1_1, new_mant_V_2_fu_80_p1.read());
}

void operator_double_div2::thread_tmp_3_fu_114_p2() {
    tmp_3_fu_114_p2 = (tmp_fu_88_p2.read() | tmp_1_fu_94_p2.read());
}

void operator_double_div2::thread_tmp_5_fu_144_p4() {
    tmp_5_fu_144_p4 = p_Val2_s_fu_58_p1.read().range(53, 52);
}

void operator_double_div2::thread_tmp_6_fu_164_p2() {
    tmp_6_fu_164_p2 = (tmp_1_fu_94_p2.read() | icmp_fu_138_p2.read());
}

void operator_double_div2::thread_tmp_8_fu_198_p2() {
    tmp_8_fu_198_p2 = (!new_exp_V_fu_70_p4.read().is_01() || !ap_const_lv11_3.is_01())? sc_lv<1>(): (sc_biguint<11>(new_exp_V_fu_70_p4.read()) < sc_biguint<11>(ap_const_lv11_3));
}

void operator_double_div2::thread_tmp_9_cast_fu_208_p1() {
    tmp_9_cast_fu_208_p1 = esl_zext<53,2>(p_0274_2_fu_170_p3.read());
}

void operator_double_div2::thread_tmp_9_fu_204_p1() {
    tmp_9_fu_204_p1 = esl_zext<55,2>(p_0274_2_fu_170_p3.read());
}

void operator_double_div2::thread_tmp_fu_88_p2() {
    tmp_fu_88_p2 = (!new_exp_V_fu_70_p4.read().is_01() || !ap_const_lv11_7FF.is_01())? sc_lv<1>(): sc_lv<1>(new_exp_V_fu_70_p4.read() == ap_const_lv11_7FF);
}

void operator_double_div2::thread_xf_V_4_cast_fu_84_p1() {
    xf_V_4_cast_fu_84_p1 = esl_zext<53,52>(new_mant_V_2_fu_80_p1.read());
}

void operator_double_div2::thread_xf_V_fu_186_p3() {
    xf_V_fu_186_p3 = (!tmp_1_fu_94_p2.read()[0].is_01())? sc_lv<53>(): ((tmp_1_fu_94_p2.read()[0].to_bool())? xf_V_4_cast_fu_84_p1.read(): tmp_2_fu_178_p3.read());
}

void operator_double_div2::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r\" :  \"" << in_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

