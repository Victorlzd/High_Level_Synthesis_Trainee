// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "lut_div11_chunk.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic lut_div11_chunk::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic lut_div11_chunk::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> lut_div11_chunk::ap_ST_fsm_state1 = "1";
const sc_lv<2> lut_div11_chunk::ap_ST_fsm_state2 = "10";
const sc_lv<32> lut_div11_chunk::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> lut_div11_chunk::ap_const_lv32_1 = "1";
const sc_lv<2> lut_div11_chunk::ap_const_lv2_0 = "00";
const sc_lv<4> lut_div11_chunk::ap_const_lv4_0 = "0000";
const bool lut_div11_chunk::ap_const_boolean_1 = true;

lut_div11_chunk::lut_div11_chunk(sc_module_name name) : sc_module(name), mVcdFile(0) {
    r0_U = new lut_div11_chunk_r0("r0_U");
    r0_U->clk(ap_clk);
    r0_U->reset(ap_rst);
    r0_U->address0(r0_address0);
    r0_U->ce0(r0_ce0);
    r0_U->q0(r0_q0);
    r1_U = new lut_div11_chunk_r1("r1_U");
    r1_U->clk(ap_clk);
    r1_U->reset(ap_rst);
    r1_U->address0(r1_address0);
    r1_U->ce0(r1_ce0);
    r1_U->q0(r1_q0);
    r2_U = new lut_div11_chunk_r2("r2_U");
    r2_U->clk(ap_clk);
    r2_U->reset(ap_rst);
    r2_U->address0(r2_address0);
    r2_U->ce0(r2_ce0);
    r2_U->q0(r2_q0);
    r3_U = new lut_div11_chunk_r3("r3_U");
    r3_U->clk(ap_clk);
    r3_U->reset(ap_rst);
    r3_U->address0(r3_address0);
    r3_U->ce0(r3_ce0);
    r3_U->q0(r3_q0);
    q0_U = new lut_div11_chunk_q0("q0_U");
    q0_U->clk(ap_clk);
    q0_U->reset(ap_rst);
    q0_U->address0(q0_address0);
    q0_U->ce0(q0_ce0);
    q0_U->q0(q0_q0);
    q1_U = new lut_div11_chunk_q1("q1_U");
    q1_U->clk(ap_clk);
    q1_U->reset(ap_rst);
    q1_U->address0(q1_address0);
    q1_U->ce0(q1_ce0);
    q1_U->q0(q1_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_Result_2_fu_150_p3 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_Result_s_fu_138_p5 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_p_Result_2_fu_150_p3);
    sensitive << ( q0_q0 );
    sensitive << ( q1_q0 );

    SC_METHOD(thread_p_Result_4_fu_120_p3);
    sensitive << ( d_V );
    sensitive << ( r_in_V );

    SC_METHOD(thread_p_Result_s_fu_138_p5);
    sensitive << ( r0_q0 );
    sensitive << ( r1_q0 );
    sensitive << ( r2_q0 );
    sensitive << ( r3_q0 );

    SC_METHOD(thread_q0_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_128_p1 );

    SC_METHOD(thread_q0_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_q1_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_128_p1 );

    SC_METHOD(thread_q1_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_r0_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_128_p1 );

    SC_METHOD(thread_r0_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_r1_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_128_p1 );

    SC_METHOD(thread_r1_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_r2_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_128_p1 );

    SC_METHOD(thread_r2_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_r3_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_128_p1 );

    SC_METHOD(thread_r3_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_tmp_fu_128_p1);
    sensitive << ( p_Result_4_fu_120_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "01";
    ap_return_0_preg = "00";
    ap_return_1_preg = "0000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "lut_div11_chunk_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, d_V, "(port)d_V");
    sc_trace(mVcdFile, r_in_V, "(port)r_in_V");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, r0_address0, "r0_address0");
    sc_trace(mVcdFile, r0_ce0, "r0_ce0");
    sc_trace(mVcdFile, r0_q0, "r0_q0");
    sc_trace(mVcdFile, r1_address0, "r1_address0");
    sc_trace(mVcdFile, r1_ce0, "r1_ce0");
    sc_trace(mVcdFile, r1_q0, "r1_q0");
    sc_trace(mVcdFile, r2_address0, "r2_address0");
    sc_trace(mVcdFile, r2_ce0, "r2_ce0");
    sc_trace(mVcdFile, r2_q0, "r2_q0");
    sc_trace(mVcdFile, r3_address0, "r3_address0");
    sc_trace(mVcdFile, r3_ce0, "r3_ce0");
    sc_trace(mVcdFile, r3_q0, "r3_q0");
    sc_trace(mVcdFile, q0_address0, "q0_address0");
    sc_trace(mVcdFile, q0_ce0, "q0_ce0");
    sc_trace(mVcdFile, q0_q0, "q0_q0");
    sc_trace(mVcdFile, q1_address0, "q1_address0");
    sc_trace(mVcdFile, q1_ce0, "q1_ce0");
    sc_trace(mVcdFile, q1_q0, "q1_q0");
    sc_trace(mVcdFile, tmp_fu_128_p1, "tmp_fu_128_p1");
    sc_trace(mVcdFile, p_Result_4_fu_120_p3, "p_Result_4_fu_120_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, p_Result_2_fu_150_p3, "p_Result_2_fu_150_p3");
    sc_trace(mVcdFile, p_Result_s_fu_138_p5, "p_Result_s_fu_138_p5");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

lut_div11_chunk::~lut_div11_chunk() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete r0_U;
    delete r1_U;
    delete r2_U;
    delete r3_U;
    delete q0_U;
    delete q1_U;
}

void lut_div11_chunk::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv2_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_0_preg = p_Result_2_fu_150_p3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv4_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_1_preg = p_Result_s_fu_138_p5.read();
        }
    }
}

void lut_div11_chunk::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void lut_div11_chunk::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void lut_div11_chunk::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void lut_div11_chunk::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void lut_div11_chunk::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void lut_div11_chunk::thread_ap_return_0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_0 = p_Result_2_fu_150_p3.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void lut_div11_chunk::thread_ap_return_1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_1 = p_Result_s_fu_138_p5.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void lut_div11_chunk::thread_p_Result_2_fu_150_p3() {
    p_Result_2_fu_150_p3 = esl_concat<1,1>(q1_q0.read(), q0_q0.read());
}

void lut_div11_chunk::thread_p_Result_4_fu_120_p3() {
    p_Result_4_fu_120_p3 = esl_concat<4,2>(r_in_V.read(), d_V.read());
}

void lut_div11_chunk::thread_p_Result_s_fu_138_p5() {
    p_Result_s_fu_138_p5 = esl_concat<3,1>(esl_concat<2,1>(esl_concat<1,1>(r3_q0.read(), r2_q0.read()), r1_q0.read()), r0_q0.read());
}

void lut_div11_chunk::thread_q0_address0() {
    q0_address0 =  (sc_lv<6>) (tmp_fu_128_p1.read());
}

void lut_div11_chunk::thread_q0_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        q0_ce0 = ap_const_logic_1;
    } else {
        q0_ce0 = ap_const_logic_0;
    }
}

void lut_div11_chunk::thread_q1_address0() {
    q1_address0 =  (sc_lv<6>) (tmp_fu_128_p1.read());
}

void lut_div11_chunk::thread_q1_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        q1_ce0 = ap_const_logic_1;
    } else {
        q1_ce0 = ap_const_logic_0;
    }
}

void lut_div11_chunk::thread_r0_address0() {
    r0_address0 =  (sc_lv<6>) (tmp_fu_128_p1.read());
}

void lut_div11_chunk::thread_r0_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        r0_ce0 = ap_const_logic_1;
    } else {
        r0_ce0 = ap_const_logic_0;
    }
}

void lut_div11_chunk::thread_r1_address0() {
    r1_address0 =  (sc_lv<6>) (tmp_fu_128_p1.read());
}

void lut_div11_chunk::thread_r1_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        r1_ce0 = ap_const_logic_1;
    } else {
        r1_ce0 = ap_const_logic_0;
    }
}

void lut_div11_chunk::thread_r2_address0() {
    r2_address0 =  (sc_lv<6>) (tmp_fu_128_p1.read());
}

void lut_div11_chunk::thread_r2_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        r2_ce0 = ap_const_logic_1;
    } else {
        r2_ce0 = ap_const_logic_0;
    }
}

void lut_div11_chunk::thread_r3_address0() {
    r3_address0 =  (sc_lv<6>) (tmp_fu_128_p1.read());
}

void lut_div11_chunk::thread_r3_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        r3_ce0 = ap_const_logic_1;
    } else {
        r3_ce0 = ap_const_logic_0;
    }
}

void lut_div11_chunk::thread_tmp_fu_128_p1() {
    tmp_fu_128_p1 = esl_zext<64,6>(p_Result_4_fu_120_p3.read());
}

void lut_div11_chunk::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

