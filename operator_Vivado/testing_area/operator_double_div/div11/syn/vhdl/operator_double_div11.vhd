-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity operator_double_div11 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of operator_double_div11 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "operator_double_div11,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=30.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=24.311250,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=231,HLS_SYN_LUT=10848,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv52_6000000000000 : STD_LOGIC_VECTOR (51 downto 0) := "0110000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv57_5 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_Repl2_2_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_mant_V_fu_100_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_1_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_342 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_1_fu_154_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Repl2_1_reg_346 : STD_LOGIC_VECTOR (10 downto 0);
    signal xf_V_4_fu_308_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal xf_V_4_reg_351 : STD_LOGIC_VECTOR (56 downto 0);
    signal grp_int_57_div11_fu_73_ap_start : STD_LOGIC;
    signal grp_int_57_div11_fu_73_ap_done : STD_LOGIC;
    signal grp_int_57_div11_fu_73_ap_idle : STD_LOGIC;
    signal grp_int_57_div11_fu_73_ap_ready : STD_LOGIC;
    signal grp_int_57_div11_fu_73_ap_return : STD_LOGIC_VECTOR (56 downto 0);
    signal new_mant_V_1_fu_315_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_phi_mux_p_Repl2_s_phi_fu_67_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Repl2_s_reg_64 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal grp_int_57_div11_fu_73_ap_start_reg : STD_LOGIC := '0';
    signal p_Val2_s_fu_78_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_exp_V_fu_90_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_cast_cast_fu_114_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_new_exp_V_1_fu_140_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_exp_V_1_fu_134_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_fu_174_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_demorgan_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_fu_190_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_1_fu_196_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_2_fu_220_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sel_tmp7_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_3_fu_228_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal xf_V_5_cast_fu_104_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_3_fu_256_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal xf_V_fu_264_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal shift_V_4_fu_248_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast_fu_280_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal r_V_fu_284_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_cast_fu_272_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_s_fu_276_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal r_V_cast_fu_290_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal r_V_1_fu_294_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal xf_V_3_fu_300_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal p_Result_s_fu_320_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component int_57_div11 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V : IN STD_LOGIC_VECTOR (56 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (56 downto 0) );
    end component;



begin
    grp_int_57_div11_fu_73 : component int_57_div11
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_int_57_div11_fu_73_ap_start,
        ap_done => grp_int_57_div11_fu_73_ap_done,
        ap_idle => grp_int_57_div11_fu_73_ap_idle,
        ap_ready => grp_int_57_div11_fu_73_ap_ready,
        in_V => xf_V_4_reg_351,
        ap_return => grp_int_57_div11_fu_73_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_int_57_div11_fu_73_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_int_57_div11_fu_73_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (tmp_1_fu_122_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_int_57_div11_fu_73_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_int_57_div11_fu_73_ap_ready = ap_const_logic_1)) then 
                    grp_int_57_div11_fu_73_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    p_Repl2_s_reg_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (tmp_1_fu_122_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Repl2_s_reg_64 <= new_mant_V_fu_100_p1;
            elsif (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (tmp_1_reg_342 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_Repl2_s_reg_64 <= new_mant_V_1_fu_315_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_Repl2_1_reg_346 <= p_Repl2_1_fu_154_p3;
                p_Repl2_2_reg_332 <= p_Val2_s_fu_78_p1(63 downto 63);
                tmp_1_reg_342 <= tmp_1_fu_122_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (tmp_1_fu_122_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                xf_V_4_reg_351 <= xf_V_4_fu_308_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state2_on_subcall_done_assign_proc : process(tmp_1_reg_342, grp_int_57_div11_fu_73_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((tmp_1_reg_342 = ap_const_lv1_0) and (grp_int_57_div11_fu_73_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_Repl2_s_phi_fu_67_p4_assign_proc : process(tmp_1_reg_342, new_mant_V_1_fu_315_p1, p_Repl2_s_reg_64, ap_CS_fsm_state2)
    begin
        if (((tmp_1_reg_342 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_phi_mux_p_Repl2_s_phi_fu_67_p4 <= new_mant_V_1_fu_315_p1;
        else 
            ap_phi_mux_p_Repl2_s_phi_fu_67_p4 <= p_Repl2_s_reg_64;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_s_fu_320_p4;
    grp_int_57_div11_fu_73_ap_start <= grp_int_57_div11_fu_73_ap_start_reg;
    icmp_fu_184_p2 <= "1" when (tmp_9_fu_174_p4 = ap_const_lv10_0) else "0";
    new_exp_V_1_fu_134_p2 <= std_logic_vector(unsigned(new_exp_V_fu_90_p4) - unsigned(shift_V_cast_cast_fu_114_p3));
    new_exp_V_fu_90_p4 <= p_Val2_s_fu_78_p1(62 downto 52);
    new_mant_V_1_fu_315_p1 <= grp_int_57_div11_fu_73_ap_return(52 - 1 downto 0);
    new_mant_V_fu_100_p1 <= p_Val2_s_fu_78_p1(52 - 1 downto 0);
    p_Repl2_1_fu_154_p3 <= 
        p_new_exp_V_1_fu_140_p3 when (tmp_7_fu_148_p2(0) = '1') else 
        new_exp_V_1_fu_134_p2;
    p_Result_s_fu_320_p4 <= ((p_Repl2_2_reg_332 & p_Repl2_1_reg_346) & ap_phi_mux_p_Repl2_s_phi_fu_67_p4);
    p_Val2_s_fu_78_p1 <= in_r;
    p_cast_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_V_fu_264_p3),57));
    p_new_exp_V_1_fu_140_p3 <= 
        ap_const_lv11_7FF when (tmp_1_fu_122_p2(0) = '1') else 
        ap_const_lv11_0;
    r_V_1_fu_294_p2 <= std_logic_vector(shift_left(unsigned(p_cast_fu_272_p1),to_integer(unsigned('0' & tmp_s_fu_276_p1(31-1 downto 0)))));
    r_V_cast_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_284_p2),57));
    r_V_fu_284_p2 <= std_logic_vector(shift_right(unsigned(xf_V_fu_264_p3),to_integer(unsigned('0' & tmp_cast_fu_280_p1(31-1 downto 0)))));
    sel_tmp3_demorgan_fu_202_p2 <= (tmp_5_fu_168_p2 or tmp_4_fu_162_p2);
    sel_tmp3_fu_208_p2 <= (sel_tmp3_demorgan_fu_202_p2 xor ap_const_lv1_1);
    sel_tmp4_fu_214_p2 <= (sel_tmp3_fu_208_p2 and icmp_fu_184_p2);
    sel_tmp7_fu_236_p2 <= (tmp_4_fu_162_p2 xor ap_const_lv1_1);
    sel_tmp8_fu_242_p2 <= (tmp_5_fu_168_p2 and sel_tmp7_fu_236_p2);
    shift_V_1_fu_196_p2 <= std_logic_vector(signed(ap_const_lv11_7FF) + signed(new_exp_V_fu_90_p4));
    shift_V_2_fu_220_p3 <= 
        shift_V_fu_190_p2 when (sel_tmp4_fu_214_p2(0) = '1') else 
        shift_V_1_fu_196_p2;
    shift_V_3_fu_228_p3 <= 
        ap_const_lv11_0 when (tmp_4_fu_162_p2(0) = '1') else 
        shift_V_2_fu_220_p3;
    shift_V_4_fu_248_p3 <= 
        shift_V_cast_cast_fu_114_p3 when (sel_tmp8_fu_242_p2(0) = '1') else 
        shift_V_3_fu_228_p3;
    shift_V_cast_cast_fu_114_p3 <= 
        ap_const_lv11_4 when (tmp_fu_108_p2(0) = '1') else 
        ap_const_lv11_3;
    shift_V_fu_190_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) - unsigned(new_exp_V_fu_90_p4));
    tmp_1_fu_122_p2 <= "1" when (new_exp_V_fu_90_p4 = ap_const_lv11_7FF) else "0";
    tmp_2_fu_128_p2 <= "1" when (unsigned(shift_V_cast_cast_fu_114_p3) > unsigned(new_exp_V_fu_90_p4)) else "0";
    tmp_3_fu_256_p3 <= (ap_const_lv1_1 & new_mant_V_fu_100_p1);
    tmp_4_fu_162_p2 <= "1" when (new_exp_V_fu_90_p4 = ap_const_lv11_0) else "0";
    tmp_5_fu_168_p2 <= "1" when (unsigned(shift_V_cast_cast_fu_114_p3) < unsigned(new_exp_V_fu_90_p4)) else "0";
    tmp_7_fu_148_p2 <= (tmp_2_fu_128_p2 or tmp_1_fu_122_p2);
    tmp_9_fu_174_p4 <= p_Val2_s_fu_78_p1(62 downto 53);
    tmp_cast_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_V_4_fu_248_p3),53));
    tmp_fu_108_p2 <= "1" when (unsigned(new_mant_V_fu_100_p1) < unsigned(ap_const_lv52_6000000000000)) else "0";
    tmp_s_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_V_4_fu_248_p3),57));
    xf_V_3_fu_300_p3 <= 
        r_V_cast_fu_290_p1 when (icmp_fu_184_p2(0) = '1') else 
        r_V_1_fu_294_p2;
    xf_V_4_fu_308_p2 <= std_logic_vector(unsigned(ap_const_lv57_5) + unsigned(xf_V_3_fu_300_p3));
    xf_V_5_cast_fu_104_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_mant_V_fu_100_p1),53));
    xf_V_fu_264_p3 <= 
        xf_V_5_cast_fu_104_p1 when (tmp_4_fu_162_p2(0) = '1') else 
        tmp_3_fu_256_p3;
end behav;
