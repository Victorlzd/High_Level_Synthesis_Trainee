// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "operator_double_div4.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic operator_double_div4::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic operator_double_div4::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> operator_double_div4::ap_ST_fsm_state1 = "1";
const sc_lv<9> operator_double_div4::ap_ST_fsm_state2 = "10";
const sc_lv<9> operator_double_div4::ap_ST_fsm_state3 = "100";
const sc_lv<9> operator_double_div4::ap_ST_fsm_state4 = "1000";
const sc_lv<9> operator_double_div4::ap_ST_fsm_state5 = "10000";
const sc_lv<9> operator_double_div4::ap_ST_fsm_state6 = "100000";
const sc_lv<9> operator_double_div4::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> operator_double_div4::ap_ST_fsm_state8 = "10000000";
const sc_lv<9> operator_double_div4::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> operator_double_div4::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> operator_double_div4::ap_const_lv32_1 = "1";
const sc_lv<1> operator_double_div4::ap_const_lv1_0 = "0";
const sc_lv<1> operator_double_div4::ap_const_lv1_1 = "1";
const sc_lv<32> operator_double_div4::ap_const_lv32_7 = "111";
const sc_lv<32> operator_double_div4::ap_const_lv32_3F = "111111";
const sc_lv<32> operator_double_div4::ap_const_lv32_34 = "110100";
const sc_lv<32> operator_double_div4::ap_const_lv32_3E = "111110";
const sc_lv<32> operator_double_div4::ap_const_lv32_35 = "110101";
const sc_lv<10> operator_double_div4::ap_const_lv10_0 = "0000000000";
const sc_lv<11> operator_double_div4::ap_const_lv11_0 = "00000000000";
const sc_lv<11> operator_double_div4::ap_const_lv11_2 = "10";
const sc_lv<2> operator_double_div4::ap_const_lv2_3 = "11";
const sc_lv<2> operator_double_div4::ap_const_lv2_2 = "10";
const sc_lv<2> operator_double_div4::ap_const_lv2_0 = "00";
const sc_lv<32> operator_double_div4::ap_const_lv32_36 = "110110";
const sc_lv<9> operator_double_div4::ap_const_lv9_0 = "000000000";
const sc_lv<11> operator_double_div4::ap_const_lv11_7FE = "11111111110";
const sc_lv<32> operator_double_div4::ap_const_lv32_8 = "1000";
const sc_lv<11> operator_double_div4::ap_const_lv11_7FF = "11111111111";
const bool operator_double_div4::ap_const_boolean_1 = true;

operator_double_div4::operator_double_div4(sc_module_name name) : sc_module(name), mVcdFile(0) {
    operator_double_dbkb_U1 = new operator_double_dbkb<1,7,1,52,2,52>("operator_double_dbkb_U1");
    operator_double_dbkb_U1->clk(ap_clk);
    operator_double_dbkb_U1->reset(ap_rst);
    operator_double_dbkb_U1->din0(new_mant_V_1_reg_257);
    operator_double_dbkb_U1->din1(grp_fu_175_p1);
    operator_double_dbkb_U1->ce(ap_var_for_const0);
    operator_double_dbkb_U1->dout(grp_fu_175_p2);
    operator_double_dcud_U2 = new operator_double_dcud<1,7,0,55,2,55>("operator_double_dcud_U2");
    operator_double_dcud_U2->clk(ap_clk);
    operator_double_dcud_U2->reset(ap_rst);
    operator_double_dcud_U2->din0(grp_fu_180_p0);
    operator_double_dcud_U2->din1(grp_fu_180_p1);
    operator_double_dcud_U2->ce(ap_var_for_const0);
    operator_double_dcud_U2->dout(grp_fu_180_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( p_Result_s_fu_233_p4 );

    SC_METHOD(thread_grp_fu_175_p1);
    sensitive << ( p_0272_2_reg_269 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_fu_180_p0);
    sensitive << ( new_mant_V_1_reg_257 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_fu_180_p1);
    sensitive << ( p_0272_2_reg_269 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_icmp4_fu_160_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_8_fu_150_p4 );

    SC_METHOD(thread_icmp_fu_94_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_84_p4 );

    SC_METHOD(thread_new_exp_V_1_fu_70_p4);
    sensitive << ( p_Val2_s_fu_58_p1 );

    SC_METHOD(thread_new_exp_V_fu_186_p2);
    sensitive << ( new_exp_V_1_reg_251 );

    SC_METHOD(thread_new_mant_V_1_fu_80_p1);
    sensitive << ( p_Val2_s_fu_58_p1 );

    SC_METHOD(thread_p_0272_2_fu_142_p3);
    sensitive << ( tmp_6_fu_136_p2 );
    sensitive << ( p_shift_V_fu_128_p3 );
    sensitive << ( shift_V_cast_fu_122_p2 );

    SC_METHOD(thread_p_Repl2_1_fu_218_p3);
    sensitive << ( tmp_4_fu_213_p2 );
    sensitive << ( p_s_fu_205_p3 );
    sensitive << ( new_exp_V_fu_186_p2 );

    SC_METHOD(thread_p_Repl2_s_fu_226_p3);
    sensitive << ( new_mant_V_1_reg_257 );
    sensitive << ( tmp_1_fu_200_p2 );
    sensitive << ( xf_V_fu_194_p3 );

    SC_METHOD(thread_p_Result_s_fu_233_p4);
    sensitive << ( p_Repl2_2_reg_246 );
    sensitive << ( p_Repl2_1_fu_218_p3 );
    sensitive << ( p_Repl2_s_fu_226_p3 );

    SC_METHOD(thread_p_Val2_s_fu_58_p1);
    sensitive << ( in_r );

    SC_METHOD(thread_p_s_fu_205_p3);
    sensitive << ( tmp_1_fu_200_p2 );

    SC_METHOD(thread_p_shift_V_fu_128_p3);
    sensitive << ( tmp_2_fu_100_p2 );

    SC_METHOD(thread_shift_V_cast_fu_122_p2);
    sensitive << ( tmp_5_fu_112_p4 );

    SC_METHOD(thread_tmp_1_fu_200_p2);
    sensitive << ( new_exp_V_1_reg_251 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_tmp_2_fu_100_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( new_exp_V_1_fu_70_p4 );

    SC_METHOD(thread_tmp_3_fu_106_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( new_exp_V_1_fu_70_p4 );

    SC_METHOD(thread_tmp_4_fu_213_p2);
    sensitive << ( icmp_reg_264 );
    sensitive << ( tmp_1_fu_200_p2 );

    SC_METHOD(thread_tmp_5_fu_112_p4);
    sensitive << ( p_Val2_s_fu_58_p1 );

    SC_METHOD(thread_tmp_6_fu_136_p2);
    sensitive << ( tmp_2_fu_100_p2 );
    sensitive << ( tmp_3_fu_106_p2 );

    SC_METHOD(thread_tmp_8_fu_150_p4);
    sensitive << ( p_Val2_s_fu_58_p1 );

    SC_METHOD(thread_tmp_9_fu_191_p1);
    sensitive << ( r_V_1_reg_300 );

    SC_METHOD(thread_tmp_fu_84_p4);
    sensitive << ( p_Val2_s_fu_58_p1 );

    SC_METHOD(thread_xf_V_fu_194_p3);
    sensitive << ( icmp4_reg_275 );
    sensitive << ( r_V_reg_295 );
    sensitive << ( tmp_9_fu_191_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "operator_double_div4_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_r, "(port)in_r");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, p_Repl2_2_reg_246, "p_Repl2_2_reg_246");
    sc_trace(mVcdFile, new_exp_V_1_fu_70_p4, "new_exp_V_1_fu_70_p4");
    sc_trace(mVcdFile, new_exp_V_1_reg_251, "new_exp_V_1_reg_251");
    sc_trace(mVcdFile, new_mant_V_1_fu_80_p1, "new_mant_V_1_fu_80_p1");
    sc_trace(mVcdFile, new_mant_V_1_reg_257, "new_mant_V_1_reg_257");
    sc_trace(mVcdFile, icmp_fu_94_p2, "icmp_fu_94_p2");
    sc_trace(mVcdFile, icmp_reg_264, "icmp_reg_264");
    sc_trace(mVcdFile, p_0272_2_fu_142_p3, "p_0272_2_fu_142_p3");
    sc_trace(mVcdFile, p_0272_2_reg_269, "p_0272_2_reg_269");
    sc_trace(mVcdFile, icmp4_fu_160_p2, "icmp4_fu_160_p2");
    sc_trace(mVcdFile, icmp4_reg_275, "icmp4_reg_275");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_fu_175_p2, "grp_fu_175_p2");
    sc_trace(mVcdFile, r_V_reg_295, "r_V_reg_295");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_180_p2, "grp_fu_180_p2");
    sc_trace(mVcdFile, r_V_1_reg_300, "r_V_1_reg_300");
    sc_trace(mVcdFile, p_Val2_s_fu_58_p1, "p_Val2_s_fu_58_p1");
    sc_trace(mVcdFile, tmp_fu_84_p4, "tmp_fu_84_p4");
    sc_trace(mVcdFile, tmp_5_fu_112_p4, "tmp_5_fu_112_p4");
    sc_trace(mVcdFile, tmp_2_fu_100_p2, "tmp_2_fu_100_p2");
    sc_trace(mVcdFile, tmp_3_fu_106_p2, "tmp_3_fu_106_p2");
    sc_trace(mVcdFile, tmp_6_fu_136_p2, "tmp_6_fu_136_p2");
    sc_trace(mVcdFile, p_shift_V_fu_128_p3, "p_shift_V_fu_128_p3");
    sc_trace(mVcdFile, shift_V_cast_fu_122_p2, "shift_V_cast_fu_122_p2");
    sc_trace(mVcdFile, tmp_8_fu_150_p4, "tmp_8_fu_150_p4");
    sc_trace(mVcdFile, grp_fu_175_p1, "grp_fu_175_p1");
    sc_trace(mVcdFile, grp_fu_180_p0, "grp_fu_180_p0");
    sc_trace(mVcdFile, grp_fu_180_p1, "grp_fu_180_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, tmp_9_fu_191_p1, "tmp_9_fu_191_p1");
    sc_trace(mVcdFile, tmp_1_fu_200_p2, "tmp_1_fu_200_p2");
    sc_trace(mVcdFile, tmp_4_fu_213_p2, "tmp_4_fu_213_p2");
    sc_trace(mVcdFile, p_s_fu_205_p3, "p_s_fu_205_p3");
    sc_trace(mVcdFile, new_exp_V_fu_186_p2, "new_exp_V_fu_186_p2");
    sc_trace(mVcdFile, xf_V_fu_194_p3, "xf_V_fu_194_p3");
    sc_trace(mVcdFile, p_Repl2_1_fu_218_p3, "p_Repl2_1_fu_218_p3");
    sc_trace(mVcdFile, p_Repl2_s_fu_226_p3, "p_Repl2_s_fu_226_p3");
    sc_trace(mVcdFile, p_Result_s_fu_233_p4, "p_Result_s_fu_233_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("operator_double_div4.hdltvin.dat");
    mHdltvoutHandle.open("operator_double_div4.hdltvout.dat");
}

operator_double_div4::~operator_double_div4() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete operator_double_dbkb_U1;
    delete operator_double_dcud_U2;
}

void operator_double_div4::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void operator_double_div4::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        icmp4_reg_275 = icmp4_fu_160_p2.read();
        icmp_reg_264 = icmp_fu_94_p2.read();
        new_exp_V_1_reg_251 = p_Val2_s_fu_58_p1.read().range(62, 52);
        new_mant_V_1_reg_257 = new_mant_V_1_fu_80_p1.read();
        p_0272_2_reg_269 = p_0272_2_fu_142_p3.read();
        p_Repl2_2_reg_246 = p_Val2_s_fu_58_p1.read().range(63, 63);
    }
    if ((esl_seteq<1,1,1>(icmp4_reg_275.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        r_V_1_reg_300 = grp_fu_180_p2.read();
    }
    if ((esl_seteq<1,1,1>(icmp4_reg_275.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        r_V_reg_295 = grp_fu_175_p2.read();
    }
}

void operator_double_div4::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void operator_double_div4::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void operator_double_div4::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void operator_double_div4::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void operator_double_div4::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void operator_double_div4::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void operator_double_div4::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void operator_double_div4::thread_ap_return() {
    ap_return = p_Result_s_fu_233_p4.read();
}

void operator_double_div4::thread_grp_fu_175_p1() {
    grp_fu_175_p1 = esl_zext<52,2>(p_0272_2_reg_269.read());
}

void operator_double_div4::thread_grp_fu_180_p0() {
    grp_fu_180_p0 = esl_zext<55,52>(new_mant_V_1_reg_257.read());
}

void operator_double_div4::thread_grp_fu_180_p1() {
    grp_fu_180_p1 = esl_zext<55,2>(p_0272_2_reg_269.read());
}

void operator_double_div4::thread_icmp4_fu_160_p2() {
    icmp4_fu_160_p2 = (!tmp_8_fu_150_p4.read().is_01() || !ap_const_lv9_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_8_fu_150_p4.read() == ap_const_lv9_0);
}

void operator_double_div4::thread_icmp_fu_94_p2() {
    icmp_fu_94_p2 = (!tmp_fu_84_p4.read().is_01() || !ap_const_lv10_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_84_p4.read() == ap_const_lv10_0);
}

void operator_double_div4::thread_new_exp_V_1_fu_70_p4() {
    new_exp_V_1_fu_70_p4 = p_Val2_s_fu_58_p1.read().range(62, 52);
}

void operator_double_div4::thread_new_exp_V_fu_186_p2() {
    new_exp_V_fu_186_p2 = (!ap_const_lv11_7FE.is_01() || !new_exp_V_1_reg_251.read().is_01())? sc_lv<11>(): (sc_bigint<11>(ap_const_lv11_7FE) + sc_biguint<11>(new_exp_V_1_reg_251.read()));
}

void operator_double_div4::thread_new_mant_V_1_fu_80_p1() {
    new_mant_V_1_fu_80_p1 = p_Val2_s_fu_58_p1.read().range(52-1, 0);
}

void operator_double_div4::thread_p_0272_2_fu_142_p3() {
    p_0272_2_fu_142_p3 = (!tmp_6_fu_136_p2.read()[0].is_01())? sc_lv<2>(): ((tmp_6_fu_136_p2.read()[0].to_bool())? p_shift_V_fu_128_p3.read(): shift_V_cast_fu_122_p2.read());
}

void operator_double_div4::thread_p_Repl2_1_fu_218_p3() {
    p_Repl2_1_fu_218_p3 = (!tmp_4_fu_213_p2.read()[0].is_01())? sc_lv<11>(): ((tmp_4_fu_213_p2.read()[0].to_bool())? p_s_fu_205_p3.read(): new_exp_V_fu_186_p2.read());
}

void operator_double_div4::thread_p_Repl2_s_fu_226_p3() {
    p_Repl2_s_fu_226_p3 = (!tmp_1_fu_200_p2.read()[0].is_01())? sc_lv<52>(): ((tmp_1_fu_200_p2.read()[0].to_bool())? new_mant_V_1_reg_257.read(): xf_V_fu_194_p3.read());
}

void operator_double_div4::thread_p_Result_s_fu_233_p4() {
    p_Result_s_fu_233_p4 = esl_concat<12,52>(esl_concat<1,11>(p_Repl2_2_reg_246.read(), p_Repl2_1_fu_218_p3.read()), p_Repl2_s_fu_226_p3.read());
}

void operator_double_div4::thread_p_Val2_s_fu_58_p1() {
    p_Val2_s_fu_58_p1 = in_r.read();
}

void operator_double_div4::thread_p_s_fu_205_p3() {
    p_s_fu_205_p3 = (!tmp_1_fu_200_p2.read()[0].is_01())? sc_lv<11>(): ((tmp_1_fu_200_p2.read()[0].to_bool())? ap_const_lv11_7FF: ap_const_lv11_0);
}

void operator_double_div4::thread_p_shift_V_fu_128_p3() {
    p_shift_V_fu_128_p3 = (!tmp_2_fu_100_p2.read()[0].is_01())? sc_lv<2>(): ((tmp_2_fu_100_p2.read()[0].to_bool())? ap_const_lv2_2: ap_const_lv2_0);
}

void operator_double_div4::thread_shift_V_cast_fu_122_p2() {
    shift_V_cast_fu_122_p2 = (tmp_5_fu_112_p4.read() ^ ap_const_lv2_3);
}

void operator_double_div4::thread_tmp_1_fu_200_p2() {
    tmp_1_fu_200_p2 = (!new_exp_V_1_reg_251.read().is_01() || !ap_const_lv11_7FF.is_01())? sc_lv<1>(): sc_lv<1>(new_exp_V_1_reg_251.read() == ap_const_lv11_7FF);
}

void operator_double_div4::thread_tmp_2_fu_100_p2() {
    tmp_2_fu_100_p2 = (!new_exp_V_1_fu_70_p4.read().is_01() || !ap_const_lv11_0.is_01())? sc_lv<1>(): sc_lv<1>(new_exp_V_1_fu_70_p4.read() == ap_const_lv11_0);
}

void operator_double_div4::thread_tmp_3_fu_106_p2() {
    tmp_3_fu_106_p2 = (!new_exp_V_1_fu_70_p4.read().is_01() || !ap_const_lv11_2.is_01())? sc_lv<1>(): (sc_biguint<11>(new_exp_V_1_fu_70_p4.read()) > sc_biguint<11>(ap_const_lv11_2));
}

void operator_double_div4::thread_tmp_4_fu_213_p2() {
    tmp_4_fu_213_p2 = (tmp_1_fu_200_p2.read() | icmp_reg_264.read());
}

void operator_double_div4::thread_tmp_5_fu_112_p4() {
    tmp_5_fu_112_p4 = p_Val2_s_fu_58_p1.read().range(53, 52);
}

void operator_double_div4::thread_tmp_6_fu_136_p2() {
    tmp_6_fu_136_p2 = (tmp_2_fu_100_p2.read() | tmp_3_fu_106_p2.read());
}

void operator_double_div4::thread_tmp_8_fu_150_p4() {
    tmp_8_fu_150_p4 = p_Val2_s_fu_58_p1.read().range(62, 54);
}

void operator_double_div4::thread_tmp_9_fu_191_p1() {
    tmp_9_fu_191_p1 = r_V_1_reg_300.read().range(52-1, 0);
}

void operator_double_div4::thread_tmp_fu_84_p4() {
    tmp_fu_84_p4 = p_Val2_s_fu_58_p1.read().range(62, 53);
}

void operator_double_div4::thread_xf_V_fu_194_p3() {
    xf_V_fu_194_p3 = (!icmp4_reg_275.read()[0].is_01())? sc_lv<52>(): ((icmp4_reg_275.read()[0].to_bool())? r_V_reg_295.read(): tmp_9_fu_191_p1.read());
}

void operator_double_div4::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXX";
            break;
    }
}

void operator_double_div4::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r\" :  \"" << in_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

