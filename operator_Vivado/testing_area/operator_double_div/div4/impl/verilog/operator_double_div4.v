// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="operator_double_div4,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.292000,HLS_SYN_LAT=8,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1228,HLS_SYN_LUT=1144,HLS_VERSION=2018_2}" *)

module operator_double_div4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r,
        ap_return
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] in_r;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] p_Repl2_2_reg_246;
wire   [10:0] new_exp_V_1_fu_70_p4;
reg   [10:0] new_exp_V_1_reg_251;
wire   [51:0] new_mant_V_1_fu_80_p1;
reg   [51:0] new_mant_V_1_reg_257;
wire   [0:0] icmp_fu_94_p2;
reg   [0:0] icmp_reg_264;
wire   [1:0] p_0272_2_fu_142_p3;
reg   [1:0] p_0272_2_reg_269;
wire   [0:0] icmp4_fu_160_p2;
reg   [0:0] icmp4_reg_275;
wire    ap_CS_fsm_state2;
wire   [51:0] grp_fu_175_p2;
reg   [51:0] r_V_reg_295;
wire    ap_CS_fsm_state8;
wire   [54:0] grp_fu_180_p2;
reg   [54:0] r_V_1_reg_300;
wire   [63:0] p_Val2_s_fu_58_p1;
wire   [9:0] tmp_fu_84_p4;
wire   [1:0] tmp_5_fu_112_p4;
wire   [0:0] tmp_2_fu_100_p2;
wire   [0:0] tmp_3_fu_106_p2;
wire   [0:0] tmp_6_fu_136_p2;
wire   [1:0] p_shift_V_fu_128_p3;
wire   [1:0] shift_V_cast_fu_122_p2;
wire   [8:0] tmp_8_fu_150_p4;
wire   [51:0] grp_fu_175_p1;
wire   [54:0] grp_fu_180_p0;
wire   [54:0] grp_fu_180_p1;
wire    ap_CS_fsm_state9;
wire   [51:0] tmp_9_fu_191_p1;
wire   [0:0] tmp_1_fu_200_p2;
wire   [0:0] tmp_4_fu_213_p2;
wire   [10:0] p_s_fu_205_p3;
wire   [10:0] new_exp_V_fu_186_p2;
wire   [51:0] xf_V_fu_194_p3;
wire   [10:0] p_Repl2_1_fu_218_p3;
wire   [51:0] p_Repl2_s_fu_226_p3;
wire   [63:0] p_Result_s_fu_233_p4;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

operator_double_dbkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .OP( 1 ),
    .din0_WIDTH( 52 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 52 ))
operator_double_dbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(new_mant_V_1_reg_257),
    .din1(grp_fu_175_p1),
    .ce(1'b1),
    .dout(grp_fu_175_p2)
);

operator_double_dcud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .OP( 0 ),
    .din0_WIDTH( 55 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 55 ))
operator_double_dcud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_180_p0),
    .din1(grp_fu_180_p1),
    .ce(1'b1),
    .dout(grp_fu_180_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        icmp4_reg_275 <= icmp4_fu_160_p2;
        icmp_reg_264 <= icmp_fu_94_p2;
        new_exp_V_1_reg_251 <= {{p_Val2_s_fu_58_p1[62:52]}};
        new_mant_V_1_reg_257 <= new_mant_V_1_fu_80_p1;
        p_0272_2_reg_269 <= p_0272_2_fu_142_p3;
        p_Repl2_2_reg_246 <= p_Val2_s_fu_58_p1[32'd63];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp4_reg_275 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        r_V_1_reg_300 <= grp_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp4_reg_275 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        r_V_reg_295 <= grp_fu_175_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = p_Result_s_fu_233_p4;

assign grp_fu_175_p1 = p_0272_2_reg_269;

assign grp_fu_180_p0 = new_mant_V_1_reg_257;

assign grp_fu_180_p1 = p_0272_2_reg_269;

assign icmp4_fu_160_p2 = ((tmp_8_fu_150_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_fu_94_p2 = ((tmp_fu_84_p4 == 10'd0) ? 1'b1 : 1'b0);

assign new_exp_V_1_fu_70_p4 = {{p_Val2_s_fu_58_p1[62:52]}};

assign new_exp_V_fu_186_p2 = ($signed(11'd2046) + $signed(new_exp_V_1_reg_251));

assign new_mant_V_1_fu_80_p1 = p_Val2_s_fu_58_p1[51:0];

assign p_0272_2_fu_142_p3 = ((tmp_6_fu_136_p2[0:0] === 1'b1) ? p_shift_V_fu_128_p3 : shift_V_cast_fu_122_p2);

assign p_Repl2_1_fu_218_p3 = ((tmp_4_fu_213_p2[0:0] === 1'b1) ? p_s_fu_205_p3 : new_exp_V_fu_186_p2);

assign p_Repl2_s_fu_226_p3 = ((tmp_1_fu_200_p2[0:0] === 1'b1) ? new_mant_V_1_reg_257 : xf_V_fu_194_p3);

assign p_Result_s_fu_233_p4 = {{{p_Repl2_2_reg_246}, {p_Repl2_1_fu_218_p3}}, {p_Repl2_s_fu_226_p3}};

assign p_Val2_s_fu_58_p1 = in_r;

assign p_s_fu_205_p3 = ((tmp_1_fu_200_p2[0:0] === 1'b1) ? 11'd2047 : 11'd0);

assign p_shift_V_fu_128_p3 = ((tmp_2_fu_100_p2[0:0] === 1'b1) ? 2'd2 : 2'd0);

assign shift_V_cast_fu_122_p2 = (tmp_5_fu_112_p4 ^ 2'd3);

assign tmp_1_fu_200_p2 = ((new_exp_V_1_reg_251 == 11'd2047) ? 1'b1 : 1'b0);

assign tmp_2_fu_100_p2 = ((new_exp_V_1_fu_70_p4 == 11'd0) ? 1'b1 : 1'b0);

assign tmp_3_fu_106_p2 = ((new_exp_V_1_fu_70_p4 > 11'd2) ? 1'b1 : 1'b0);

assign tmp_4_fu_213_p2 = (tmp_1_fu_200_p2 | icmp_reg_264);

assign tmp_5_fu_112_p4 = {{p_Val2_s_fu_58_p1[53:52]}};

assign tmp_6_fu_136_p2 = (tmp_3_fu_106_p2 | tmp_2_fu_100_p2);

assign tmp_8_fu_150_p4 = {{p_Val2_s_fu_58_p1[62:54]}};

assign tmp_9_fu_191_p1 = r_V_1_reg_300[51:0];

assign tmp_fu_84_p4 = {{p_Val2_s_fu_58_p1[62:53]}};

assign xf_V_fu_194_p3 = ((icmp4_reg_275[0:0] === 1'b1) ? r_V_reg_295 : tmp_9_fu_191_p1);

endmodule //operator_double_div4
