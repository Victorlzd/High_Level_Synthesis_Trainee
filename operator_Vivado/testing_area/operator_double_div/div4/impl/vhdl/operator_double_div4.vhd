-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity operator_double_div4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of operator_double_div4 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "operator_double_div4,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.334250,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=71,HLS_SYN_LUT=617,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_7FE : STD_LOGIC_VECTOR (10 downto 0) := "11111111110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_Repl2_2_reg_283 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_exp_V_fu_82_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_exp_V_reg_288 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_mant_V_2_fu_92_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal new_mant_V_2_reg_294 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_301 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_306 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0274_2_fu_154_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_0274_2_reg_311 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp4_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp4_reg_317 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_70_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_96_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_124_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shift_V_fu_140_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal shift_V_cast_fu_134_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_fu_162_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_new_exp_V_1_fu_191_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_exp_V_1_fu_186_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal xf_V_4_cast_fu_178_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_2_fu_212_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal xf_V_fu_219_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_9_cast_fu_233_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_cast_fu_226_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_9_fu_230_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_fu_236_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal r_V_1_fu_242_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_12_fu_248_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_13_fu_252_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal new_mant_V_1_fu_256_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Repl2_1_fu_204_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_mant_V_fu_263_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_s_fu_270_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp4_reg_317 <= icmp4_fu_172_p2;
                icmp_reg_301 <= icmp_fu_106_p2;
                new_exp_V_reg_288 <= p_Val2_s_fu_70_p1(62 downto 52);
                new_mant_V_2_reg_294 <= new_mant_V_2_fu_92_p1;
                p_0274_2_reg_311 <= p_0274_2_fu_154_p3;
                p_Repl2_2_reg_283 <= p_Val2_s_fu_70_p1(63 downto 63);
                tmp_3_reg_306 <= tmp_3_fu_112_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_s_fu_270_p4;
    icmp4_fu_172_p2 <= "1" when (tmp_11_fu_162_p4 = ap_const_lv9_0) else "0";
    icmp_fu_106_p2 <= "1" when (tmp_10_fu_96_p4 = ap_const_lv10_0) else "0";
    new_exp_V_1_fu_186_p2 <= std_logic_vector(signed(ap_const_lv11_7FE) + signed(new_exp_V_reg_288));
    new_exp_V_fu_82_p4 <= p_Val2_s_fu_70_p1(62 downto 52);
    new_mant_V_1_fu_256_p3 <= 
        tmp_12_fu_248_p1 when (icmp4_reg_317(0) = '1') else 
        tmp_13_fu_252_p1;
    new_mant_V_2_fu_92_p1 <= p_Val2_s_fu_70_p1(52 - 1 downto 0);
    new_mant_V_fu_263_p3 <= 
        new_mant_V_2_reg_294 when (tmp_fu_181_p2(0) = '1') else 
        new_mant_V_1_fu_256_p3;
    p_0274_2_fu_154_p3 <= 
        p_shift_V_fu_140_p3 when (tmp_7_fu_148_p2(0) = '1') else 
        shift_V_cast_fu_134_p2;
    p_Repl2_1_fu_204_p3 <= 
        p_new_exp_V_1_fu_191_p3 when (tmp_5_fu_199_p2(0) = '1') else 
        new_exp_V_1_fu_186_p2;
    p_Result_s_fu_270_p4 <= ((p_Repl2_2_reg_283 & p_Repl2_1_fu_204_p3) & new_mant_V_fu_263_p3);
    p_Val2_s_fu_70_p1 <= in_r;
    p_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_V_fu_219_p3),56));
    p_new_exp_V_1_fu_191_p3 <= 
        ap_const_lv11_7FF when (tmp_fu_181_p2(0) = '1') else 
        ap_const_lv11_0;
    p_shift_V_fu_140_p3 <= 
        ap_const_lv2_2 when (tmp_3_fu_112_p2(0) = '1') else 
        ap_const_lv2_0;
    r_V_1_fu_242_p2 <= std_logic_vector(shift_left(unsigned(p_cast_fu_226_p1),to_integer(unsigned('0' & tmp_9_fu_230_p1(31-1 downto 0)))));
    r_V_fu_236_p2 <= std_logic_vector(shift_right(unsigned(xf_V_fu_219_p3),to_integer(unsigned('0' & tmp_9_cast_fu_233_p1(31-1 downto 0)))));
    shift_V_cast_fu_134_p2 <= (tmp_6_fu_124_p4 xor ap_const_lv2_3);
    tmp_10_fu_96_p4 <= p_Val2_s_fu_70_p1(62 downto 53);
    tmp_11_fu_162_p4 <= p_Val2_s_fu_70_p1(62 downto 54);
    tmp_12_fu_248_p1 <= r_V_fu_236_p2(52 - 1 downto 0);
    tmp_13_fu_252_p1 <= r_V_1_fu_242_p2(52 - 1 downto 0);
    tmp_2_fu_212_p3 <= (ap_const_lv1_1 & new_mant_V_2_reg_294);
    tmp_3_fu_112_p2 <= "1" when (new_exp_V_fu_82_p4 = ap_const_lv11_0) else "0";
    tmp_4_fu_118_p2 <= "1" when (unsigned(new_exp_V_fu_82_p4) > unsigned(ap_const_lv11_2)) else "0";
    tmp_5_fu_199_p2 <= (tmp_fu_181_p2 or icmp_reg_301);
    tmp_6_fu_124_p4 <= p_Val2_s_fu_70_p1(53 downto 52);
    tmp_7_fu_148_p2 <= (tmp_4_fu_118_p2 or tmp_3_fu_112_p2);
    tmp_9_cast_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0274_2_reg_311),53));
    tmp_9_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0274_2_reg_311),56));
    tmp_fu_181_p2 <= "1" when (new_exp_V_reg_288 = ap_const_lv11_7FF) else "0";
    xf_V_4_cast_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_mant_V_2_reg_294),53));
    xf_V_fu_219_p3 <= 
        xf_V_4_cast_fu_178_p1 when (tmp_3_reg_306(0) = '1') else 
        tmp_2_fu_212_p3;
end behav;
