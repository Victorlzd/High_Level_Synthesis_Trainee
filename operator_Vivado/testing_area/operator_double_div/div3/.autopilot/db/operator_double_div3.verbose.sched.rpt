

================================================================
== Vivado HLS Report for 'operator_double_div3'
================================================================
* Date:           Fri Aug 31 15:13:40 2018

* Version:        2018.2 (Build 2258646 on Thu Jun 14 20:25:20 MDT 2018)
* Project:        operator_double_div
* Solution:       div3
* Product family: kintex7
* Target device:  xc7k160tfbg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   2.50|     2.292|        0.31|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |   52|   52|   52|   52|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 39
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.98>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "%in_read = call double @_ssdm_op_Read.ap_auto.double(double %in_r) nounwind"   --->   Operation 40 'read' 'in_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.00ns)   --->   "%p_Val2_s = bitcast double %in_read to i64" [test.cpp:69->test.cpp:241]   --->   Operation 41 'bitcast' 'p_Val2_s' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 42 [1/1] (0.00ns)   --->   "%p_Repl2_2 = call i1 @_ssdm_op_BitSelect.i1.i64.i32(i64 %p_Val2_s, i32 63)" [test.cpp:70->test.cpp:241]   --->   Operation 42 'bitselect' 'p_Repl2_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 43 [1/1] (0.00ns)   --->   "%new_exp_V_1 = call i11 @_ssdm_op_PartSelect.i11.i64.i32.i32(i64 %p_Val2_s, i32 52, i32 62) nounwind" [test.cpp:71->test.cpp:241]   --->   Operation 43 'partselect' 'new_exp_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 44 [1/1] (0.00ns)   --->   "%new_mant_V_1 = trunc i64 %p_Val2_s to i52" [test.cpp:72->test.cpp:241]   --->   Operation 44 'trunc' 'new_mant_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 45 [1/1] (0.00ns)   --->   "%tmp = call i1 @_ssdm_op_BitSelect.i1.i64.i32(i64 %p_Val2_s, i32 51)" [test.cpp:247]   --->   Operation 45 'bitselect' 'tmp' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 46 [1/1] (0.65ns)   --->   "%shift_V_cast_cast = select i1 %tmp, i11 1, i11 2" [test.cpp:247]   --->   Operation 46 'select' 'shift_V_cast_cast' <Predicate = true> <Delay = 0.65> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 47 [1/1] (1.32ns)   --->   "%tmp_3 = icmp eq i11 %new_exp_V_1, 0" [test.cpp:253]   --->   Operation 47 'icmp' 'tmp_3' <Predicate = true> <Delay = 1.32> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.32> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 48 [1/1] (1.32ns)   --->   "%tmp_4 = icmp ult i11 %shift_V_cast_cast, %new_exp_V_1" [test.cpp:256]   --->   Operation 48 'icmp' 'tmp_4' <Predicate = true> <Delay = 1.32> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.32> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 49 [1/1] (0.00ns)   --->   "%tmp_7 = call i10 @_ssdm_op_PartSelect.i10.i64.i32.i32(i64 %p_Val2_s, i32 53, i32 62)" [test.cpp:257]   --->   Operation 49 'partselect' 'tmp_7' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 50 [1/1] (1.29ns)   --->   "%icmp = icmp eq i10 %tmp_7, 0" [test.cpp:257]   --->   Operation 50 'icmp' 'icmp' <Predicate = true> <Delay = 1.29> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.32> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 51 [1/1] (1.42ns)   --->   "%shift_V = sub i11 1, %new_exp_V_1" [test.cpp:258]   --->   Operation 51 'sub' 'shift_V' <Predicate = true> <Delay = 1.42> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 52 [1/1] (1.42ns)   --->   "%shift_V_1 = add i11 -1, %new_exp_V_1" [test.cpp:260]   --->   Operation 52 'add' 'shift_V_1' <Predicate = true> <Delay = 1.42> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 2 <SV = 1> <Delay = 2.06>
ST_2 : Operation 53 [1/1] (1.32ns)   --->   "%tmp_1 = icmp ugt i11 %shift_V_cast_cast, %new_exp_V_1" [test.cpp:249]   --->   Operation 53 'icmp' 'tmp_1' <Predicate = true> <Delay = 1.32> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.32> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 54 [1/1] (1.42ns)   --->   "%new_exp_V = sub i11 %new_exp_V_1, %shift_V_cast_cast" [test.cpp:252]   --->   Operation 54 'sub' 'new_exp_V' <Predicate = true> <Delay = 1.42> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 55 [1/1] (0.00ns) (grouped into LUT with out node shift_V_3)   --->   "%sel_tmp2_demorgan = or i1 %tmp_3, %tmp_4" [test.cpp:253]   --->   Operation 55 'or' 'sel_tmp2_demorgan' <Predicate = (!tmp_3)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 56 [1/1] (0.00ns) (grouped into LUT with out node shift_V_3)   --->   "%sel_tmp2 = xor i1 %sel_tmp2_demorgan, true" [test.cpp:253]   --->   Operation 56 'xor' 'sel_tmp2' <Predicate = (!tmp_3)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 57 [1/1] (0.00ns) (grouped into LUT with out node shift_V_3)   --->   "%sel_tmp3 = and i1 %icmp, %sel_tmp2" [test.cpp:257]   --->   Operation 57 'and' 'sel_tmp3' <Predicate = (!tmp_3)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 58 [1/1] (0.00ns) (grouped into LUT with out node shift_V_3)   --->   "%shift_V_2 = select i1 %sel_tmp3, i11 %shift_V, i11 %shift_V_1" [test.cpp:257]   --->   Operation 58 'select' 'shift_V_2' <Predicate = (!tmp_3)> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 59 [1/1] (0.63ns) (out node of the LUT)   --->   "%shift_V_3 = select i1 %tmp_3, i11 0, i11 %shift_V_2" [test.cpp:253]   --->   Operation 59 'select' 'shift_V_3' <Predicate = true> <Delay = 0.63> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 60 [1/1] (0.00ns) (grouped into LUT with out node shift_V_4)   --->   "%sel_tmp6 = xor i1 %tmp_3, true" [test.cpp:253]   --->   Operation 60 'xor' 'sel_tmp6' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 61 [1/1] (0.00ns) (grouped into LUT with out node shift_V_4)   --->   "%sel_tmp7 = and i1 %tmp_4, %sel_tmp6" [test.cpp:256]   --->   Operation 61 'and' 'sel_tmp7' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 62 [1/1] (0.63ns) (out node of the LUT)   --->   "%shift_V_4 = select i1 %sel_tmp7, i11 %shift_V_cast_cast, i11 %shift_V_3" [test.cpp:256]   --->   Operation 62 'select' 'shift_V_4' <Predicate = true> <Delay = 0.63> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 63 [1/1] (1.32ns)   --->   "%tmp_2 = icmp eq i11 %new_exp_V_1, -1" [test.cpp:271]   --->   Operation 63 'icmp' 'tmp_2' <Predicate = true> <Delay = 1.32> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.32> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 64 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_1)   --->   "%p_s = select i1 %tmp_2, i11 -1, i11 0" [test.cpp:271]   --->   Operation 64 'select' 'p_s' <Predicate = true> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 65 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_1)   --->   "%tmp_6 = or i1 %tmp_2, %tmp_1" [test.cpp:271]   --->   Operation 65 'or' 'tmp_6' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 66 [1/1] (0.63ns) (out node of the LUT)   --->   "%p_Repl2_1 = select i1 %tmp_6, i11 %p_s, i11 %new_exp_V" [test.cpp:271]   --->   Operation 66 'select' 'p_Repl2_1' <Predicate = true> <Delay = 0.63> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>

State 3 <SV = 2> <Delay = 2.29>
ST_3 : Operation 67 [1/1] (0.00ns)   --->   "%xf_V = zext i52 %new_mant_V_1 to i55" [test.cpp:246]   --->   Operation 67 'zext' 'xf_V' <Predicate = (!icmp)> <Delay = 0.00>
ST_3 : Operation 68 [1/1] (0.00ns)   --->   "%tmp_9 = zext i11 %shift_V_4 to i55" [test.cpp:264]   --->   Operation 68 'zext' 'tmp_9' <Predicate = (!icmp)> <Delay = 0.00>
ST_3 : Operation 69 [1/1] (0.00ns)   --->   "%tmp_9_cast = zext i11 %shift_V_4 to i52" [test.cpp:264]   --->   Operation 69 'zext' 'tmp_9_cast' <Predicate = (icmp)> <Delay = 0.00>
ST_3 : Operation 70 [7/7] (2.29ns)   --->   "%r_V_15 = lshr i52 %new_mant_V_1, %tmp_9_cast" [test.cpp:264]   --->   Operation 70 'lshr' 'r_V_15' <Predicate = (icmp)> <Delay = 2.29> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 6> <II = 1> <Delay = 2.29> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 71 [7/7] (2.29ns)   --->   "%r_V_16 = shl i55 %xf_V, %tmp_9" [test.cpp:266]   --->   Operation 71 'shl' 'r_V_16' <Predicate = (!icmp)> <Delay = 2.29> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 6> <II = 1> <Delay = 2.29> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>

State 4 <SV = 3> <Delay = 2.29>
ST_4 : Operation 72 [6/7] (2.29ns)   --->   "%r_V_15 = lshr i52 %new_mant_V_1, %tmp_9_cast" [test.cpp:264]   --->   Operation 72 'lshr' 'r_V_15' <Predicate = (icmp)> <Delay = 2.29> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 6> <II = 1> <Delay = 2.29> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 73 [6/7] (2.29ns)   --->   "%r_V_16 = shl i55 %xf_V, %tmp_9" [test.cpp:266]   --->   Operation 73 'shl' 'r_V_16' <Predicate = (!icmp)> <Delay = 2.29> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 6> <II = 1> <Delay = 2.29> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>

State 5 <SV = 4> <Delay = 2.29>
ST_5 : Operation 74 [5/7] (2.29ns)   --->   "%r_V_15 = lshr i52 %new_mant_V_1, %tmp_9_cast" [test.cpp:264]   --->   Operation 74 'lshr' 'r_V_15' <Predicate = (icmp)> <Delay = 2.29> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 6> <II = 1> <Delay = 2.29> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 75 [5/7] (2.29ns)   --->   "%r_V_16 = shl i55 %xf_V, %tmp_9" [test.cpp:266]   --->   Operation 75 'shl' 'r_V_16' <Predicate = (!icmp)> <Delay = 2.29> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 6> <II = 1> <Delay = 2.29> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>

State 6 <SV = 5> <Delay = 2.29>
ST_6 : Operation 76 [4/7] (2.29ns)   --->   "%r_V_15 = lshr i52 %new_mant_V_1, %tmp_9_cast" [test.cpp:264]   --->   Operation 76 'lshr' 'r_V_15' <Predicate = (icmp)> <Delay = 2.29> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 6> <II = 1> <Delay = 2.29> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 77 [4/7] (2.29ns)   --->   "%r_V_16 = shl i55 %xf_V, %tmp_9" [test.cpp:266]   --->   Operation 77 'shl' 'r_V_16' <Predicate = (!icmp)> <Delay = 2.29> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 6> <II = 1> <Delay = 2.29> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>

State 7 <SV = 6> <Delay = 2.29>
ST_7 : Operation 78 [3/7] (2.29ns)   --->   "%r_V_15 = lshr i52 %new_mant_V_1, %tmp_9_cast" [test.cpp:264]   --->   Operation 78 'lshr' 'r_V_15' <Predicate = (icmp)> <Delay = 2.29> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 6> <II = 1> <Delay = 2.29> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 79 [3/7] (2.29ns)   --->   "%r_V_16 = shl i55 %xf_V, %tmp_9" [test.cpp:266]   --->   Operation 79 'shl' 'r_V_16' <Predicate = (!icmp)> <Delay = 2.29> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 6> <II = 1> <Delay = 2.29> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>

State 8 <SV = 7> <Delay = 2.29>
ST_8 : Operation 80 [2/7] (2.29ns)   --->   "%r_V_15 = lshr i52 %new_mant_V_1, %tmp_9_cast" [test.cpp:264]   --->   Operation 80 'lshr' 'r_V_15' <Predicate = (icmp)> <Delay = 2.29> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 6> <II = 1> <Delay = 2.29> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 81 [2/7] (2.29ns)   --->   "%r_V_16 = shl i55 %xf_V, %tmp_9" [test.cpp:266]   --->   Operation 81 'shl' 'r_V_16' <Predicate = (!icmp)> <Delay = 2.29> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 6> <II = 1> <Delay = 2.29> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>

State 9 <SV = 8> <Delay = 2.29>
ST_9 : Operation 82 [1/7] (2.29ns)   --->   "%r_V_15 = lshr i52 %new_mant_V_1, %tmp_9_cast" [test.cpp:264]   --->   Operation 82 'lshr' 'r_V_15' <Predicate = (icmp)> <Delay = 2.29> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 6> <II = 1> <Delay = 2.29> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 83 [1/7] (2.29ns)   --->   "%r_V_16 = shl i55 %xf_V, %tmp_9" [test.cpp:266]   --->   Operation 83 'shl' 'r_V_16' <Predicate = (!icmp)> <Delay = 2.29> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 6> <II = 1> <Delay = 2.29> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>

State 10 <SV = 9> <Delay = 0.68>
ST_10 : Operation 84 [1/1] (0.00ns)   --->   "%r_V_13_cast = zext i52 %r_V_15 to i55" [test.cpp:264]   --->   Operation 84 'zext' 'r_V_13_cast' <Predicate = (icmp)> <Delay = 0.00>
ST_10 : Operation 85 [1/1] (0.68ns)   --->   "%xf_V_7 = select i1 %icmp, i55 %r_V_13_cast, i55 %r_V_16" [test.cpp:263]   --->   Operation 85 'select' 'xf_V_7' <Predicate = true> <Delay = 0.68> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>

State 11 <SV = 10> <Delay = 1.87>
ST_11 : Operation 86 [1/1] (0.00ns) (grouped into LUT with out node xf_V_8)   --->   "%p_Result_s = call i55 @_ssdm_op_BitSet.i55.i55.i32.i1(i55 %xf_V_7, i32 52, i1 true)" [test.cpp:268]   --->   Operation 86 'bitset' 'p_Result_s' <Predicate = (!tmp_3)> <Delay = 0.00>
ST_11 : Operation 87 [1/1] (0.00ns) (grouped into LUT with out node xf_V_8)   --->   "%xf_V_5 = select i1 %tmp_3, i55 %xf_V_7, i55 %p_Result_s" [test.cpp:253]   --->   Operation 87 'select' 'xf_V_5' <Predicate = true> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_11 : Operation 88 [1/1] (1.87ns) (out node of the LUT)   --->   "%xf_V_8 = add i55 1, %xf_V_5" [test.cpp:269]   --->   Operation 88 'add' 'xf_V_8' <Predicate = true> <Delay = 1.87> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_11 : Operation 89 [1/1] (0.00ns)   --->   "%p_Result_i_i = call i3 @_ssdm_op_PartSelect.i3.i55.i32.i32(i55 %xf_V_8, i32 52, i32 54) nounwind" [test.cpp:180->test.cpp:226->test.cpp:270]   --->   Operation 89 'partselect' 'p_Result_i_i' <Predicate = true> <Delay = 0.00>
ST_11 : Operation 90 [1/1] (0.00ns)   --->   "%d_chunk_V_1 = call i4 @_ssdm_op_PartSelect.i4.i55.i32.i32(i55 %xf_V_8, i32 48, i32 51) nounwind" [test.cpp:183->test.cpp:226->test.cpp:270]   --->   Operation 90 'partselect' 'd_chunk_V_1' <Predicate = true> <Delay = 0.00>
ST_11 : Operation 91 [1/1] (0.00ns)   --->   "%d_chunk_V_2 = call i4 @_ssdm_op_PartSelect.i4.i55.i32.i32(i55 %xf_V_8, i32 44, i32 47) nounwind" [test.cpp:186->test.cpp:226->test.cpp:270]   --->   Operation 91 'partselect' 'd_chunk_V_2' <Predicate = true> <Delay = 0.00>
ST_11 : Operation 92 [1/1] (0.00ns)   --->   "%d_chunk_V_3 = call i4 @_ssdm_op_PartSelect.i4.i55.i32.i32(i55 %xf_V_8, i32 40, i32 43) nounwind" [test.cpp:189->test.cpp:226->test.cpp:270]   --->   Operation 92 'partselect' 'd_chunk_V_3' <Predicate = true> <Delay = 0.00>
ST_11 : Operation 93 [1/1] (0.00ns)   --->   "%d_chunk_V_4 = call i4 @_ssdm_op_PartSelect.i4.i55.i32.i32(i55 %xf_V_8, i32 36, i32 39) nounwind" [test.cpp:192->test.cpp:226->test.cpp:270]   --->   Operation 93 'partselect' 'd_chunk_V_4' <Predicate = true> <Delay = 0.00>
ST_11 : Operation 94 [1/1] (0.00ns)   --->   "%d_chunk_V_5 = call i4 @_ssdm_op_PartSelect.i4.i55.i32.i32(i55 %xf_V_8, i32 32, i32 35) nounwind" [test.cpp:195->test.cpp:226->test.cpp:270]   --->   Operation 94 'partselect' 'd_chunk_V_5' <Predicate = true> <Delay = 0.00>
ST_11 : Operation 95 [1/1] (0.00ns)   --->   "%d_chunk_V_6 = call i4 @_ssdm_op_PartSelect.i4.i55.i32.i32(i55 %xf_V_8, i32 28, i32 31) nounwind" [test.cpp:198->test.cpp:226->test.cpp:270]   --->   Operation 95 'partselect' 'd_chunk_V_6' <Predicate = true> <Delay = 0.00>
ST_11 : Operation 96 [1/1] (0.00ns)   --->   "%d_chunk_V_7 = call i4 @_ssdm_op_PartSelect.i4.i55.i32.i32(i55 %xf_V_8, i32 24, i32 27) nounwind" [test.cpp:201->test.cpp:226->test.cpp:270]   --->   Operation 96 'partselect' 'd_chunk_V_7' <Predicate = true> <Delay = 0.00>
ST_11 : Operation 97 [1/1] (0.00ns)   --->   "%d_chunk_V_8 = call i4 @_ssdm_op_PartSelect.i4.i55.i32.i32(i55 %xf_V_8, i32 20, i32 23) nounwind" [test.cpp:204->test.cpp:226->test.cpp:270]   --->   Operation 97 'partselect' 'd_chunk_V_8' <Predicate = true> <Delay = 0.00>
ST_11 : Operation 98 [1/1] (0.00ns)   --->   "%d_chunk_V_9 = call i4 @_ssdm_op_PartSelect.i4.i55.i32.i32(i55 %xf_V_8, i32 16, i32 19) nounwind" [test.cpp:207->test.cpp:226->test.cpp:270]   --->   Operation 98 'partselect' 'd_chunk_V_9' <Predicate = true> <Delay = 0.00>
ST_11 : Operation 99 [1/1] (0.00ns)   --->   "%d_chunk_V_10 = call i4 @_ssdm_op_PartSelect.i4.i55.i32.i32(i55 %xf_V_8, i32 12, i32 15) nounwind" [test.cpp:210->test.cpp:226->test.cpp:270]   --->   Operation 99 'partselect' 'd_chunk_V_10' <Predicate = true> <Delay = 0.00>
ST_11 : Operation 100 [1/1] (0.00ns)   --->   "%d_chunk_V_11 = call i4 @_ssdm_op_PartSelect.i4.i55.i32.i32(i55 %xf_V_8, i32 8, i32 11) nounwind" [test.cpp:213->test.cpp:226->test.cpp:270]   --->   Operation 100 'partselect' 'd_chunk_V_11' <Predicate = true> <Delay = 0.00>
ST_11 : Operation 101 [1/1] (0.00ns)   --->   "%d_chunk_V_12 = call i4 @_ssdm_op_PartSelect.i4.i55.i32.i32(i55 %xf_V_8, i32 4, i32 7) nounwind" [test.cpp:216->test.cpp:226->test.cpp:270]   --->   Operation 101 'partselect' 'd_chunk_V_12' <Predicate = true> <Delay = 0.00>
ST_11 : Operation 102 [1/1] (0.00ns)   --->   "%d_chunk_V_13 = trunc i55 %xf_V_8 to i4" [test.cpp:219->test.cpp:226->test.cpp:270]   --->   Operation 102 'trunc' 'd_chunk_V_13' <Predicate = true> <Delay = 0.00>

State 12 <SV = 11> <Delay = 1.54>
ST_12 : Operation 103 [1/1] (0.00ns)   --->   "%d_chunk_V = zext i3 %p_Result_i_i to i4" [test.cpp:180->test.cpp:226->test.cpp:270]   --->   Operation 103 'zext' 'd_chunk_V' <Predicate = true> <Delay = 0.00>
ST_12 : Operation 104 [2/2] (1.54ns)   --->   "%call_ret1_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V, i2 0) nounwind" [test.cpp:181->test.cpp:226->test.cpp:270]   --->   Operation 104 'call' 'call_ret1_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 13 <SV = 12> <Delay = 1.33>
ST_13 : Operation 105 [1/2] (1.33ns)   --->   "%call_ret1_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V, i2 0) nounwind" [test.cpp:181->test.cpp:226->test.cpp:270]   --->   Operation 105 'call' 'call_ret1_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_13 : Operation 106 [1/1] (0.00ns)   --->   "%r_V = extractvalue { i4, i2 } %call_ret1_i_i, 1" [test.cpp:181->test.cpp:226->test.cpp:270]   --->   Operation 106 'extractvalue' 'r_V' <Predicate = true> <Delay = 0.00>

State 14 <SV = 13> <Delay = 1.54>
ST_14 : Operation 107 [2/2] (1.54ns)   --->   "%call_ret2_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_1, i2 %r_V) nounwind" [test.cpp:184->test.cpp:226->test.cpp:270]   --->   Operation 107 'call' 'call_ret2_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 15 <SV = 14> <Delay = 1.33>
ST_15 : Operation 108 [1/2] (1.33ns)   --->   "%call_ret2_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_1, i2 %r_V) nounwind" [test.cpp:184->test.cpp:226->test.cpp:270]   --->   Operation 108 'call' 'call_ret2_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_15 : Operation 109 [1/1] (0.00ns)   --->   "%r_V_1 = extractvalue { i4, i2 } %call_ret2_i_i, 1" [test.cpp:184->test.cpp:226->test.cpp:270]   --->   Operation 109 'extractvalue' 'r_V_1' <Predicate = true> <Delay = 0.00>

State 16 <SV = 15> <Delay = 1.54>
ST_16 : Operation 110 [2/2] (1.54ns)   --->   "%call_ret3_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_2, i2 %r_V_1) nounwind" [test.cpp:187->test.cpp:226->test.cpp:270]   --->   Operation 110 'call' 'call_ret3_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 17 <SV = 16> <Delay = 1.33>
ST_17 : Operation 111 [1/2] (1.33ns)   --->   "%call_ret3_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_2, i2 %r_V_1) nounwind" [test.cpp:187->test.cpp:226->test.cpp:270]   --->   Operation 111 'call' 'call_ret3_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_17 : Operation 112 [1/1] (0.00ns)   --->   "%r_V_2 = extractvalue { i4, i2 } %call_ret3_i_i, 1" [test.cpp:187->test.cpp:226->test.cpp:270]   --->   Operation 112 'extractvalue' 'r_V_2' <Predicate = true> <Delay = 0.00>

State 18 <SV = 17> <Delay = 1.54>
ST_18 : Operation 113 [2/2] (1.54ns)   --->   "%call_ret4_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_3, i2 %r_V_2) nounwind" [test.cpp:190->test.cpp:226->test.cpp:270]   --->   Operation 113 'call' 'call_ret4_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 19 <SV = 18> <Delay = 1.33>
ST_19 : Operation 114 [1/2] (1.33ns)   --->   "%call_ret4_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_3, i2 %r_V_2) nounwind" [test.cpp:190->test.cpp:226->test.cpp:270]   --->   Operation 114 'call' 'call_ret4_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_19 : Operation 115 [1/1] (0.00ns)   --->   "%r_V_3 = extractvalue { i4, i2 } %call_ret4_i_i, 1" [test.cpp:190->test.cpp:226->test.cpp:270]   --->   Operation 115 'extractvalue' 'r_V_3' <Predicate = true> <Delay = 0.00>

State 20 <SV = 19> <Delay = 1.54>
ST_20 : Operation 116 [2/2] (1.54ns)   --->   "%call_ret5_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_4, i2 %r_V_3) nounwind" [test.cpp:193->test.cpp:226->test.cpp:270]   --->   Operation 116 'call' 'call_ret5_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 21 <SV = 20> <Delay = 1.33>
ST_21 : Operation 117 [1/2] (1.33ns)   --->   "%call_ret5_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_4, i2 %r_V_3) nounwind" [test.cpp:193->test.cpp:226->test.cpp:270]   --->   Operation 117 'call' 'call_ret5_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_21 : Operation 118 [1/1] (0.00ns)   --->   "%r_V_4 = extractvalue { i4, i2 } %call_ret5_i_i, 1" [test.cpp:193->test.cpp:226->test.cpp:270]   --->   Operation 118 'extractvalue' 'r_V_4' <Predicate = true> <Delay = 0.00>

State 22 <SV = 21> <Delay = 1.54>
ST_22 : Operation 119 [2/2] (1.54ns)   --->   "%call_ret6_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_5, i2 %r_V_4) nounwind" [test.cpp:196->test.cpp:226->test.cpp:270]   --->   Operation 119 'call' 'call_ret6_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 23 <SV = 22> <Delay = 1.33>
ST_23 : Operation 120 [1/2] (1.33ns)   --->   "%call_ret6_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_5, i2 %r_V_4) nounwind" [test.cpp:196->test.cpp:226->test.cpp:270]   --->   Operation 120 'call' 'call_ret6_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_23 : Operation 121 [1/1] (0.00ns)   --->   "%r_V_5 = extractvalue { i4, i2 } %call_ret6_i_i, 1" [test.cpp:196->test.cpp:226->test.cpp:270]   --->   Operation 121 'extractvalue' 'r_V_5' <Predicate = true> <Delay = 0.00>

State 24 <SV = 23> <Delay = 1.54>
ST_24 : Operation 122 [2/2] (1.54ns)   --->   "%call_ret7_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_6, i2 %r_V_5) nounwind" [test.cpp:199->test.cpp:226->test.cpp:270]   --->   Operation 122 'call' 'call_ret7_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 25 <SV = 24> <Delay = 1.33>
ST_25 : Operation 123 [1/2] (1.33ns)   --->   "%call_ret7_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_6, i2 %r_V_5) nounwind" [test.cpp:199->test.cpp:226->test.cpp:270]   --->   Operation 123 'call' 'call_ret7_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_25 : Operation 124 [1/1] (0.00ns)   --->   "%r_V_6 = extractvalue { i4, i2 } %call_ret7_i_i, 1" [test.cpp:199->test.cpp:226->test.cpp:270]   --->   Operation 124 'extractvalue' 'r_V_6' <Predicate = true> <Delay = 0.00>

State 26 <SV = 25> <Delay = 1.54>
ST_26 : Operation 125 [2/2] (1.54ns)   --->   "%call_ret8_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_7, i2 %r_V_6) nounwind" [test.cpp:202->test.cpp:226->test.cpp:270]   --->   Operation 125 'call' 'call_ret8_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 27 <SV = 26> <Delay = 1.33>
ST_27 : Operation 126 [1/2] (1.33ns)   --->   "%call_ret8_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_7, i2 %r_V_6) nounwind" [test.cpp:202->test.cpp:226->test.cpp:270]   --->   Operation 126 'call' 'call_ret8_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_27 : Operation 127 [1/1] (0.00ns)   --->   "%r_V_7 = extractvalue { i4, i2 } %call_ret8_i_i, 1" [test.cpp:202->test.cpp:226->test.cpp:270]   --->   Operation 127 'extractvalue' 'r_V_7' <Predicate = true> <Delay = 0.00>

State 28 <SV = 27> <Delay = 1.54>
ST_28 : Operation 128 [2/2] (1.54ns)   --->   "%call_ret9_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_8, i2 %r_V_7) nounwind" [test.cpp:205->test.cpp:226->test.cpp:270]   --->   Operation 128 'call' 'call_ret9_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 29 <SV = 28> <Delay = 1.33>
ST_29 : Operation 129 [1/2] (1.33ns)   --->   "%call_ret9_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_8, i2 %r_V_7) nounwind" [test.cpp:205->test.cpp:226->test.cpp:270]   --->   Operation 129 'call' 'call_ret9_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_29 : Operation 130 [1/1] (0.00ns)   --->   "%r_V_8 = extractvalue { i4, i2 } %call_ret9_i_i, 1" [test.cpp:205->test.cpp:226->test.cpp:270]   --->   Operation 130 'extractvalue' 'r_V_8' <Predicate = true> <Delay = 0.00>

State 30 <SV = 29> <Delay = 1.54>
ST_30 : Operation 131 [2/2] (1.54ns)   --->   "%call_ret10_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_9, i2 %r_V_8) nounwind" [test.cpp:208->test.cpp:226->test.cpp:270]   --->   Operation 131 'call' 'call_ret10_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 31 <SV = 30> <Delay = 1.33>
ST_31 : Operation 132 [1/2] (1.33ns)   --->   "%call_ret10_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_9, i2 %r_V_8) nounwind" [test.cpp:208->test.cpp:226->test.cpp:270]   --->   Operation 132 'call' 'call_ret10_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_31 : Operation 133 [1/1] (0.00ns)   --->   "%r_V_9 = extractvalue { i4, i2 } %call_ret10_i_i, 1" [test.cpp:208->test.cpp:226->test.cpp:270]   --->   Operation 133 'extractvalue' 'r_V_9' <Predicate = true> <Delay = 0.00>

State 32 <SV = 31> <Delay = 1.54>
ST_32 : Operation 134 [2/2] (1.54ns)   --->   "%call_ret11_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_10, i2 %r_V_9) nounwind" [test.cpp:211->test.cpp:226->test.cpp:270]   --->   Operation 134 'call' 'call_ret11_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 33 <SV = 32> <Delay = 1.33>
ST_33 : Operation 135 [1/2] (1.33ns)   --->   "%call_ret11_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_10, i2 %r_V_9) nounwind" [test.cpp:211->test.cpp:226->test.cpp:270]   --->   Operation 135 'call' 'call_ret11_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_33 : Operation 136 [1/1] (0.00ns)   --->   "%r_V_12 = extractvalue { i4, i2 } %call_ret11_i_i, 1" [test.cpp:211->test.cpp:226->test.cpp:270]   --->   Operation 136 'extractvalue' 'r_V_12' <Predicate = true> <Delay = 0.00>

State 34 <SV = 33> <Delay = 1.54>
ST_34 : Operation 137 [2/2] (1.54ns)   --->   "%call_ret12_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_11, i2 %r_V_12) nounwind" [test.cpp:214->test.cpp:226->test.cpp:270]   --->   Operation 137 'call' 'call_ret12_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 35 <SV = 34> <Delay = 1.33>
ST_35 : Operation 138 [1/2] (1.33ns)   --->   "%call_ret12_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_11, i2 %r_V_12) nounwind" [test.cpp:214->test.cpp:226->test.cpp:270]   --->   Operation 138 'call' 'call_ret12_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_35 : Operation 139 [1/1] (0.00ns)   --->   "%r_V_13 = extractvalue { i4, i2 } %call_ret12_i_i, 1" [test.cpp:214->test.cpp:226->test.cpp:270]   --->   Operation 139 'extractvalue' 'r_V_13' <Predicate = true> <Delay = 0.00>

State 36 <SV = 35> <Delay = 1.54>
ST_36 : Operation 140 [2/2] (1.54ns)   --->   "%call_ret13_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_12, i2 %r_V_13) nounwind" [test.cpp:217->test.cpp:226->test.cpp:270]   --->   Operation 140 'call' 'call_ret13_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 37 <SV = 36> <Delay = 1.33>
ST_37 : Operation 141 [1/2] (1.33ns)   --->   "%call_ret13_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_12, i2 %r_V_13) nounwind" [test.cpp:217->test.cpp:226->test.cpp:270]   --->   Operation 141 'call' 'call_ret13_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_37 : Operation 142 [1/1] (0.00ns)   --->   "%r_V_14 = extractvalue { i4, i2 } %call_ret13_i_i, 1" [test.cpp:217->test.cpp:226->test.cpp:270]   --->   Operation 142 'extractvalue' 'r_V_14' <Predicate = true> <Delay = 0.00>

State 38 <SV = 37> <Delay = 1.54>
ST_38 : Operation 143 [2/2] (1.54ns)   --->   "%call_ret_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_13, i2 %r_V_14) nounwind" [test.cpp:220->test.cpp:226->test.cpp:270]   --->   Operation 143 'call' 'call_ret_i_i' <Predicate = true> <Delay = 1.54> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 39 <SV = 38> <Delay = 2.03>
ST_39 : Operation 144 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(double %in_r) nounwind, !map !258"   --->   Operation 144 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_39 : Operation 145 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(double 0.000000e+00) nounwind, !map !264"   --->   Operation 145 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_39 : Operation 146 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([21 x i8]* @operator_double_div3_1) nounwind"   --->   Operation 146 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_39 : Operation 147 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V = extractvalue { i4, i2 } %call_ret2_i_i, 0" [test.cpp:184->test.cpp:226->test.cpp:270]   --->   Operation 147 'extractvalue' 'q_chunk_V' <Predicate = (!tmp_2)> <Delay = 0.00>
ST_39 : Operation 148 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_1 = extractvalue { i4, i2 } %call_ret3_i_i, 0" [test.cpp:187->test.cpp:226->test.cpp:270]   --->   Operation 148 'extractvalue' 'q_chunk_V_1' <Predicate = (!tmp_2)> <Delay = 0.00>
ST_39 : Operation 149 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_2 = extractvalue { i4, i2 } %call_ret4_i_i, 0" [test.cpp:190->test.cpp:226->test.cpp:270]   --->   Operation 149 'extractvalue' 'q_chunk_V_2' <Predicate = (!tmp_2)> <Delay = 0.00>
ST_39 : Operation 150 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_3 = extractvalue { i4, i2 } %call_ret5_i_i, 0" [test.cpp:193->test.cpp:226->test.cpp:270]   --->   Operation 150 'extractvalue' 'q_chunk_V_3' <Predicate = (!tmp_2)> <Delay = 0.00>
ST_39 : Operation 151 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_4 = extractvalue { i4, i2 } %call_ret6_i_i, 0" [test.cpp:196->test.cpp:226->test.cpp:270]   --->   Operation 151 'extractvalue' 'q_chunk_V_4' <Predicate = (!tmp_2)> <Delay = 0.00>
ST_39 : Operation 152 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_5 = extractvalue { i4, i2 } %call_ret7_i_i, 0" [test.cpp:199->test.cpp:226->test.cpp:270]   --->   Operation 152 'extractvalue' 'q_chunk_V_5' <Predicate = (!tmp_2)> <Delay = 0.00>
ST_39 : Operation 153 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_6 = extractvalue { i4, i2 } %call_ret8_i_i, 0" [test.cpp:202->test.cpp:226->test.cpp:270]   --->   Operation 153 'extractvalue' 'q_chunk_V_6' <Predicate = (!tmp_2)> <Delay = 0.00>
ST_39 : Operation 154 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_7 = extractvalue { i4, i2 } %call_ret9_i_i, 0" [test.cpp:205->test.cpp:226->test.cpp:270]   --->   Operation 154 'extractvalue' 'q_chunk_V_7' <Predicate = (!tmp_2)> <Delay = 0.00>
ST_39 : Operation 155 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_8 = extractvalue { i4, i2 } %call_ret10_i_i, 0" [test.cpp:208->test.cpp:226->test.cpp:270]   --->   Operation 155 'extractvalue' 'q_chunk_V_8' <Predicate = (!tmp_2)> <Delay = 0.00>
ST_39 : Operation 156 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_9 = extractvalue { i4, i2 } %call_ret11_i_i, 0" [test.cpp:211->test.cpp:226->test.cpp:270]   --->   Operation 156 'extractvalue' 'q_chunk_V_9' <Predicate = (!tmp_2)> <Delay = 0.00>
ST_39 : Operation 157 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_10 = extractvalue { i4, i2 } %call_ret12_i_i, 0" [test.cpp:214->test.cpp:226->test.cpp:270]   --->   Operation 157 'extractvalue' 'q_chunk_V_10' <Predicate = (!tmp_2)> <Delay = 0.00>
ST_39 : Operation 158 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_11 = extractvalue { i4, i2 } %call_ret13_i_i, 0" [test.cpp:217->test.cpp:226->test.cpp:270]   --->   Operation 158 'extractvalue' 'q_chunk_V_11' <Predicate = (!tmp_2)> <Delay = 0.00>
ST_39 : Operation 159 [1/2] (1.33ns)   --->   "%call_ret_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V_13, i2 %r_V_14) nounwind" [test.cpp:220->test.cpp:226->test.cpp:270]   --->   Operation 159 'call' 'call_ret_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_39 : Operation 160 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%q_chunk_V_12 = extractvalue { i4, i2 } %call_ret_i_i, 0" [test.cpp:220->test.cpp:226->test.cpp:270]   --->   Operation 160 'extractvalue' 'q_chunk_V_12' <Predicate = (!tmp_2)> <Delay = 0.00>
ST_39 : Operation 161 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_s)   --->   "%new_mant_V = call i52 @_ssdm_op_BitConcatenate.i52.i4.i4.i4.i4.i4.i4.i4.i4.i4.i4.i4.i4.i4(i4 %q_chunk_V, i4 %q_chunk_V_1, i4 %q_chunk_V_2, i4 %q_chunk_V_3, i4 %q_chunk_V_4, i4 %q_chunk_V_5, i4 %q_chunk_V_6, i4 %q_chunk_V_7, i4 %q_chunk_V_8, i4 %q_chunk_V_9, i4 %q_chunk_V_10, i4 %q_chunk_V_11, i4 %q_chunk_V_12)" [test.cpp:270]   --->   Operation 161 'bitconcatenate' 'new_mant_V' <Predicate = (!tmp_2)> <Delay = 0.00>
ST_39 : Operation 162 [1/1] (0.70ns) (out node of the LUT)   --->   "%p_Repl2_s = select i1 %tmp_2, i52 %new_mant_V_1, i52 %new_mant_V" [test.cpp:271]   --->   Operation 162 'select' 'p_Repl2_s' <Predicate = true> <Delay = 0.70> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_39 : Operation 163 [1/1] (0.00ns)   --->   "%p_Result_1 = call i64 @_ssdm_op_BitConcatenate.i64.i1.i11.i52(i1 %p_Repl2_2, i11 %p_Repl2_1, i52 %p_Repl2_s) nounwind" [test.cpp:96->test.cpp:275]   --->   Operation 163 'bitconcatenate' 'p_Result_1' <Predicate = true> <Delay = 0.00>
ST_39 : Operation 164 [1/1] (0.00ns)   --->   "%out = bitcast i64 %p_Result_1 to double" [test.cpp:97->test.cpp:275]   --->   Operation 164 'bitcast' 'out' <Predicate = true> <Delay = 0.00>
ST_39 : Operation 165 [1/1] (0.00ns)   --->   "ret double %out" [test.cpp:276]   --->   Operation 165 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 2.5ns, clock uncertainty: 0.312ns.

 <State 1>: 1.98ns
The critical path consists of the following:
	wire read on port 'in_r' [11]  (0 ns)
	'select' operation ('shift_V_cast_cast', test.cpp:247) [18]  (0.654 ns)
	'icmp' operation ('tmp_4', test.cpp:256) [22]  (1.33 ns)

 <State 2>: 2.06ns
The critical path consists of the following:
	'sub' operation ('new_exp.V', test.cpp:252) [20]  (1.43 ns)
	'select' operation ('__Repl2__', test.cpp:271) [103]  (0.633 ns)

 <State 3>: 2.29ns
The critical path consists of the following:
	'shl' operation ('r.V', test.cpp:266) [39]  (2.29 ns)

 <State 4>: 2.29ns
The critical path consists of the following:
	'lshr' operation ('r.V', test.cpp:264) [37]  (2.29 ns)

 <State 5>: 2.29ns
The critical path consists of the following:
	'lshr' operation ('r.V', test.cpp:264) [37]  (2.29 ns)

 <State 6>: 2.29ns
The critical path consists of the following:
	'lshr' operation ('r.V', test.cpp:264) [37]  (2.29 ns)

 <State 7>: 2.29ns
The critical path consists of the following:
	'lshr' operation ('r.V', test.cpp:264) [37]  (2.29 ns)

 <State 8>: 2.29ns
The critical path consists of the following:
	'lshr' operation ('r.V', test.cpp:264) [37]  (2.29 ns)

 <State 9>: 2.29ns
The critical path consists of the following:
	'lshr' operation ('r.V', test.cpp:264) [37]  (2.29 ns)

 <State 10>: 0.69ns
The critical path consists of the following:
	'select' operation ('xf.V', test.cpp:263) [40]  (0.69 ns)

 <State 11>: 1.87ns
The critical path consists of the following:
	'select' operation ('xf.V', test.cpp:253) [42]  (0 ns)
	'add' operation ('xf.V', test.cpp:269) [43]  (1.87 ns)

 <State 12>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret1_i_i', test.cpp:181->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [46]  (1.54 ns)

 <State 13>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret1_i_i', test.cpp:181->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [46]  (1.33 ns)

 <State 14>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret2_i_i', test.cpp:184->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [49]  (1.54 ns)

 <State 15>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret2_i_i', test.cpp:184->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [49]  (1.33 ns)

 <State 16>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret3_i_i', test.cpp:187->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [53]  (1.54 ns)

 <State 17>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret3_i_i', test.cpp:187->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [53]  (1.33 ns)

 <State 18>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret4_i_i', test.cpp:190->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [57]  (1.54 ns)

 <State 19>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret4_i_i', test.cpp:190->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [57]  (1.33 ns)

 <State 20>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret5_i_i', test.cpp:193->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [61]  (1.54 ns)

 <State 21>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret5_i_i', test.cpp:193->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [61]  (1.33 ns)

 <State 22>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret6_i_i', test.cpp:196->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [65]  (1.54 ns)

 <State 23>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret6_i_i', test.cpp:196->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [65]  (1.33 ns)

 <State 24>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret7_i_i', test.cpp:199->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [69]  (1.54 ns)

 <State 25>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret7_i_i', test.cpp:199->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [69]  (1.33 ns)

 <State 26>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret8_i_i', test.cpp:202->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [73]  (1.54 ns)

 <State 27>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret8_i_i', test.cpp:202->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [73]  (1.33 ns)

 <State 28>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret9_i_i', test.cpp:205->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [77]  (1.54 ns)

 <State 29>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret9_i_i', test.cpp:205->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [77]  (1.33 ns)

 <State 30>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret10_i_i', test.cpp:208->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [81]  (1.54 ns)

 <State 31>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret10_i_i', test.cpp:208->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [81]  (1.33 ns)

 <State 32>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret11_i_i', test.cpp:211->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [85]  (1.54 ns)

 <State 33>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret11_i_i', test.cpp:211->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [85]  (1.33 ns)

 <State 34>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret12_i_i', test.cpp:214->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [89]  (1.54 ns)

 <State 35>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret12_i_i', test.cpp:214->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [89]  (1.33 ns)

 <State 36>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret13_i_i', test.cpp:217->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [93]  (1.54 ns)

 <State 37>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret13_i_i', test.cpp:217->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [93]  (1.33 ns)

 <State 38>: 1.54ns
The critical path consists of the following:
	'call' operation ('call_ret_i_i', test.cpp:220->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [97]  (1.54 ns)

 <State 39>: 2.04ns
The critical path consists of the following:
	'call' operation ('call_ret_i_i', test.cpp:220->test.cpp:226->test.cpp:270) to 'lut_div3_chunk' [97]  (1.33 ns)
	'select' operation ('__Repl2__', test.cpp:271) [104]  (0.708 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
