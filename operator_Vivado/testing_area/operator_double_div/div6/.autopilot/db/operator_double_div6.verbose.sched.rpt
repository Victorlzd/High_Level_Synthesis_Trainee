

================================================================
== Vivado HLS Report for 'operator_double_div6'
================================================================
* Date:           Fri Aug  3 14:40:57 2018

* Version:        2018.2 (Build 2258646 on Thu Jun 14 20:25:20 MDT 2018)
* Project:        operator_double_div
* Solution:       div6
* Product family: kintex7
* Target device:  xc7k160tfbg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   5.00|    29.069|        0.62|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    1|    1|    1|    1|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 2
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 27.1>
ST_1 : Operation 3 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(double %in_r) nounwind, !map !362"   --->   Operation 3 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 4 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(double 0.000000e+00) nounwind, !map !368"   --->   Operation 4 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([21 x i8]* @operator_double_div6_1) nounwind"   --->   Operation 5 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%in_read = call double @_ssdm_op_Read.ap_auto.double(double %in_r) nounwind"   --->   Operation 6 'read' 'in_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLatency(i32 0, i32 1, [1 x i8]* @p_str) nounwind" [test.cpp:6866]   --->   Operation 7 'speclatency' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%p_Val2_s = bitcast double %in_read to i64" [test.cpp:6544->test.cpp:6878]   --->   Operation 8 'bitcast' 'p_Val2_s' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%p_Repl2_2 = call i1 @_ssdm_op_BitSelect.i1.i64.i32(i64 %p_Val2_s, i32 63)" [test.cpp:6545->test.cpp:6878]   --->   Operation 9 'bitselect' 'p_Repl2_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%new_exp_V = call i11 @_ssdm_op_PartSelect.i11.i64.i32.i32(i64 %p_Val2_s, i32 52, i32 62) nounwind" [test.cpp:6546->test.cpp:6878]   --->   Operation 10 'partselect' 'new_exp_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%new_mant_V = trunc i64 %p_Val2_s to i52" [test.cpp:6547->test.cpp:6878]   --->   Operation 11 'trunc' 'new_mant_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%xf_V_5_cast = zext i52 %new_mant_V to i53" [test.cpp:6883]   --->   Operation 12 'zext' 'xf_V_5_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%tmp = call i1 @_ssdm_op_BitSelect.i1.i64.i32(i64 %p_Val2_s, i32 51)" [test.cpp:6884]   --->   Operation 13 'bitselect' 'tmp' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.65ns)   --->   "%p_cast_cast = select i1 %tmp, i11 2, i11 3" [test.cpp:6884]   --->   Operation 14 'select' 'p_cast_cast' <Predicate = true> <Delay = 0.65> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.68> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 15 [1/1] (1.32ns)   --->   "%tmp_1 = icmp eq i11 %new_exp_V, -1" [test.cpp:6886]   --->   Operation 15 'icmp' 'tmp_1' <Predicate = true> <Delay = 1.32> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.32> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 16 [1/1] (1.32ns)   --->   "%tmp_2 = icmp ugt i11 %p_cast_cast, %new_exp_V" [test.cpp:6887]   --->   Operation 16 'icmp' 'tmp_2' <Predicate = true> <Delay = 1.32> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.32> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 17 [1/1] (1.42ns)   --->   "%new_exp_V_1 = sub i11 %new_exp_V, %p_cast_cast" [test.cpp:6890]   --->   Operation 17 'sub' 'new_exp_V_1' <Predicate = true> <Delay = 1.42> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.88> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 18 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_1)   --->   "%p_new_exp_V_1 = select i1 %tmp_1, i11 -1, i11 0" [test.cpp:6570->test.cpp:6911]   --->   Operation 18 'select' 'p_new_exp_V_1' <Predicate = true> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.68> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 19 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_1)   --->   "%tmp_8 = or i1 %tmp_1, %tmp_2" [test.cpp:6570->test.cpp:6911]   --->   Operation 19 'or' 'tmp_8' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 20 [1/1] (0.63ns) (out node of the LUT)   --->   "%p_Repl2_1 = select i1 %tmp_8, i11 %p_new_exp_V_1, i11 %new_exp_V_1" [test.cpp:6570->test.cpp:6911]   --->   Operation 20 'select' 'p_Repl2_1' <Predicate = true> <Delay = 0.63> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.68> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 21 [1/1] (1.06ns)   --->   "br i1 %tmp_1, label %._crit_edge416, label %_ifconv1" [test.cpp:6891]   --->   Operation 21 'br' <Predicate = true> <Delay = 1.06>
ST_1 : Operation 22 [1/1] (1.32ns)   --->   "%tmp_4 = icmp eq i11 %new_exp_V, 0" [test.cpp:6892]   --->   Operation 22 'icmp' 'tmp_4' <Predicate = (!tmp_1)> <Delay = 1.32> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.32> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 23 [1/1] (1.32ns)   --->   "%tmp_5 = icmp ult i11 %p_cast_cast, %new_exp_V" [test.cpp:6895]   --->   Operation 23 'icmp' 'tmp_5' <Predicate = (!tmp_1)> <Delay = 1.32> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.32> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 24 [1/1] (0.00ns) (grouped into LUT with out node shift_V_2)   --->   "%shift_V_cast_cast = select i1 %tmp, i11 1, i11 2" [test.cpp:6884]   --->   Operation 24 'select' 'shift_V_cast_cast' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.68> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 25 [1/1] (1.32ns)   --->   "%tmp_7 = icmp ult i11 %new_exp_V, 3" [test.cpp:6896]   --->   Operation 25 'icmp' 'tmp_7' <Predicate = (!tmp_1)> <Delay = 1.32> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.32> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 26 [1/1] (1.42ns)   --->   "%shift_V = sub i11 2, %new_exp_V" [test.cpp:6897]   --->   Operation 26 'sub' 'shift_V' <Predicate = (!tmp_1)> <Delay = 1.42> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.88> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 27 [1/1] (1.42ns)   --->   "%shift_V_1 = add i11 -2, %new_exp_V" [test.cpp:6899]   --->   Operation 27 'add' 'shift_V_1' <Predicate = (!tmp_1)> <Delay = 1.42> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.88> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 28 [1/1] (0.00ns) (grouped into LUT with out node shift_V_2)   --->   "%sel_tmp = xor i1 %tmp_4, true" [test.cpp:6892]   --->   Operation 28 'xor' 'sel_tmp' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 29 [1/1] (0.00ns) (grouped into LUT with out node shift_V_2)   --->   "%sel_tmp2 = and i1 %tmp_5, %sel_tmp" [test.cpp:6895]   --->   Operation 29 'and' 'sel_tmp2' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 30 [1/1] (0.65ns) (out node of the LUT)   --->   "%shift_V_2 = select i1 %sel_tmp2, i11 %shift_V_cast_cast, i11 %shift_V_1" [test.cpp:6895]   --->   Operation 30 'select' 'shift_V_2' <Predicate = (!tmp_1)> <Delay = 0.65> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.68> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 31 [1/1] (0.00ns) (grouped into LUT with out node shift_V_4)   --->   "%sel_tmp6_demorgan = or i1 %tmp_4, %tmp_5" [test.cpp:6892]   --->   Operation 31 'or' 'sel_tmp6_demorgan' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 32 [1/1] (0.00ns) (grouped into LUT with out node shift_V_4)   --->   "%sel_tmp6 = xor i1 %sel_tmp6_demorgan, true" [test.cpp:6892]   --->   Operation 32 'xor' 'sel_tmp6' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 33 [1/1] (0.00ns) (grouped into LUT with out node shift_V_4)   --->   "%sel_tmp7 = and i1 %tmp_7, %sel_tmp6" [test.cpp:6896]   --->   Operation 33 'and' 'sel_tmp7' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 34 [1/1] (0.00ns) (grouped into LUT with out node shift_V_4)   --->   "%shift_V_3 = select i1 %sel_tmp7, i11 %shift_V, i11 %shift_V_2" [test.cpp:6896]   --->   Operation 34 'select' 'shift_V_3' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.68> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 35 [1/1] (0.63ns) (out node of the LUT)   --->   "%shift_V_4 = select i1 %tmp_4, i11 1, i11 %shift_V_3" [test.cpp:6892]   --->   Operation 35 'select' 'shift_V_4' <Predicate = (!tmp_1)> <Delay = 0.63> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.68> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%tmp_6 = call i53 @_ssdm_op_BitConcatenate.i53.i1.i52(i1 true, i52 %new_mant_V)" [test.cpp:6903]   --->   Operation 36 'bitconcatenate' 'tmp_6' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.70ns)   --->   "%xf_V_1 = select i1 %tmp_4, i53 %xf_V_5_cast, i53 %tmp_6" [test.cpp:6892]   --->   Operation 37 'select' 'xf_V_1' <Predicate = (!tmp_1)> <Delay = 0.70> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.68> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 38 [1/1] (0.00ns) (grouped into LUT with out node xf_V)   --->   "%p_1_cast = zext i53 %xf_V_1 to i56" [test.cpp:6892]   --->   Operation 38 'zext' 'p_1_cast' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns) (grouped into LUT with out node xf_V)   --->   "%tmp_3 = zext i11 %shift_V_4 to i56" [test.cpp:6905]   --->   Operation 39 'zext' 'tmp_3' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.00ns) (grouped into LUT with out node xf_V)   --->   "%tmp_3_cast = zext i11 %shift_V_4 to i53" [test.cpp:6905]   --->   Operation 40 'zext' 'tmp_3_cast' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.00ns) (grouped into LUT with out node xf_V)   --->   "%r_V = lshr i53 %xf_V_1, %tmp_3_cast" [test.cpp:6905]   --->   Operation 41 'lshr' 'r_V' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "Shift">   --->   Core 28 'Shift' <Latency = 0> <II = 1> <Delay = 2.92> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 42 [1/1] (0.00ns) (grouped into LUT with out node xf_V)   --->   "%r_V_cast = zext i53 %r_V to i56" [test.cpp:6905]   --->   Operation 42 'zext' 'r_V_cast' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 43 [1/1] (0.00ns) (grouped into LUT with out node xf_V)   --->   "%r_V_1 = shl i56 %p_1_cast, %tmp_3" [test.cpp:6907]   --->   Operation 43 'shl' 'r_V_1' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "Shift">   --->   Core 28 'Shift' <Latency = 0> <II = 1> <Delay = 2.92> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 44 [1/1] (0.00ns) (grouped into LUT with out node xf_V)   --->   "%xf_V_3 = select i1 %tmp_7, i56 %r_V_cast, i56 %r_V_1" [test.cpp:6904]   --->   Operation 44 'select' 'xf_V_3' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.68> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 45 [1/1] (2.92ns) (out node of the LUT)   --->   "%xf_V = add i56 1, %xf_V_3" [test.cpp:6908]   --->   Operation 45 'add' 'xf_V' <Predicate = (!tmp_1)> <Delay = 2.92> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.88> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 46 [1/1] (0.00ns)   --->   "%p_Result_16_i_i = call i4 @_ssdm_op_PartSelect.i4.i56.i32.i32(i56 %xf_V, i32 52, i32 55) nounwind" [test.cpp:6853->test.cpp:6862->test.cpp:6909]   --->   Operation 46 'partselect' 'p_Result_16_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 47 [1/1] (3.50ns)   --->   "%call_ret_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_16_i_i, i2 0) nounwind" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 47 'call' 'call_ret_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_1 : Operation 48 [1/1] (0.00ns)   --->   "%r_V_ret_i_i = extractvalue { i4, i2 } %call_ret_i_i, 1" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 48 'extractvalue' 'r_V_ret_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 49 [1/1] (0.00ns)   --->   "%p_Result_16_1_i_i = call i4 @_ssdm_op_PartSelect.i4.i56.i32.i32(i56 %xf_V, i32 48, i32 51) nounwind" [test.cpp:6853->test.cpp:6862->test.cpp:6909]   --->   Operation 49 'partselect' 'p_Result_16_1_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 50 [1/1] (3.50ns)   --->   "%call_ret_1_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_16_1_i_i, i2 %r_V_ret_i_i) nounwind" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 50 'call' 'call_ret_1_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_1 : Operation 51 [1/1] (0.00ns)   --->   "%q_chunk_V_0_1_i_i = extractvalue { i4, i2 } %call_ret_1_i_i, 0" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 51 'extractvalue' 'q_chunk_V_0_1_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 52 [1/1] (0.00ns)   --->   "%r_V_ret_1_i_i = extractvalue { i4, i2 } %call_ret_1_i_i, 1" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 52 'extractvalue' 'r_V_ret_1_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 53 [1/1] (0.00ns)   --->   "%p_Result_16_2_i_i = call i4 @_ssdm_op_PartSelect.i4.i56.i32.i32(i56 %xf_V, i32 44, i32 47) nounwind" [test.cpp:6853->test.cpp:6862->test.cpp:6909]   --->   Operation 53 'partselect' 'p_Result_16_2_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 54 [1/1] (3.50ns)   --->   "%call_ret_2_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_16_2_i_i, i2 %r_V_ret_1_i_i) nounwind" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 54 'call' 'call_ret_2_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_1 : Operation 55 [1/1] (0.00ns)   --->   "%q_chunk_V_0_2_i_i = extractvalue { i4, i2 } %call_ret_2_i_i, 0" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 55 'extractvalue' 'q_chunk_V_0_2_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 56 [1/1] (0.00ns)   --->   "%r_V_ret_2_i_i = extractvalue { i4, i2 } %call_ret_2_i_i, 1" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 56 'extractvalue' 'r_V_ret_2_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 57 [1/1] (0.00ns)   --->   "%p_Result_16_3_i_i = call i4 @_ssdm_op_PartSelect.i4.i56.i32.i32(i56 %xf_V, i32 40, i32 43) nounwind" [test.cpp:6853->test.cpp:6862->test.cpp:6909]   --->   Operation 57 'partselect' 'p_Result_16_3_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 58 [1/1] (3.50ns)   --->   "%call_ret_3_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_16_3_i_i, i2 %r_V_ret_2_i_i) nounwind" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 58 'call' 'call_ret_3_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_1 : Operation 59 [1/1] (0.00ns)   --->   "%q_chunk_V_0_3_i_i = extractvalue { i4, i2 } %call_ret_3_i_i, 0" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 59 'extractvalue' 'q_chunk_V_0_3_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 60 [1/1] (0.00ns)   --->   "%r_V_ret_3_i_i = extractvalue { i4, i2 } %call_ret_3_i_i, 1" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 60 'extractvalue' 'r_V_ret_3_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 61 [1/1] (0.00ns)   --->   "%p_Result_16_4_i_i = call i4 @_ssdm_op_PartSelect.i4.i56.i32.i32(i56 %xf_V, i32 36, i32 39) nounwind" [test.cpp:6853->test.cpp:6862->test.cpp:6909]   --->   Operation 61 'partselect' 'p_Result_16_4_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 62 [1/1] (3.50ns)   --->   "%call_ret_4_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_16_4_i_i, i2 %r_V_ret_3_i_i) nounwind" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 62 'call' 'call_ret_4_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_1 : Operation 63 [1/1] (0.00ns)   --->   "%q_chunk_V_0_4_i_i = extractvalue { i4, i2 } %call_ret_4_i_i, 0" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 63 'extractvalue' 'q_chunk_V_0_4_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 64 [1/1] (0.00ns)   --->   "%r_V_ret_4_i_i = extractvalue { i4, i2 } %call_ret_4_i_i, 1" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 64 'extractvalue' 'r_V_ret_4_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 65 [1/1] (0.00ns)   --->   "%p_Result_16_5_i_i = call i4 @_ssdm_op_PartSelect.i4.i56.i32.i32(i56 %xf_V, i32 32, i32 35) nounwind" [test.cpp:6853->test.cpp:6862->test.cpp:6909]   --->   Operation 65 'partselect' 'p_Result_16_5_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 66 [1/1] (3.50ns)   --->   "%call_ret_5_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_16_5_i_i, i2 %r_V_ret_4_i_i) nounwind" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 66 'call' 'call_ret_5_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_1 : Operation 67 [1/1] (0.00ns)   --->   "%q_chunk_V_0_5_i_i = extractvalue { i4, i2 } %call_ret_5_i_i, 0" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 67 'extractvalue' 'q_chunk_V_0_5_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 68 [1/1] (0.00ns)   --->   "%r_V_ret_5_i_i = extractvalue { i4, i2 } %call_ret_5_i_i, 1" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 68 'extractvalue' 'r_V_ret_5_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 69 [1/1] (0.00ns)   --->   "%p_Result_16_6_i_i = call i4 @_ssdm_op_PartSelect.i4.i56.i32.i32(i56 %xf_V, i32 28, i32 31) nounwind" [test.cpp:6853->test.cpp:6862->test.cpp:6909]   --->   Operation 69 'partselect' 'p_Result_16_6_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 70 [1/1] (0.00ns)   --->   "%p_Result_16_7_i_i = call i4 @_ssdm_op_PartSelect.i4.i56.i32.i32(i56 %xf_V, i32 24, i32 27) nounwind" [test.cpp:6853->test.cpp:6862->test.cpp:6909]   --->   Operation 70 'partselect' 'p_Result_16_7_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 71 [1/1] (0.00ns)   --->   "%p_Result_16_8_i_i = call i4 @_ssdm_op_PartSelect.i4.i56.i32.i32(i56 %xf_V, i32 20, i32 23) nounwind" [test.cpp:6853->test.cpp:6862->test.cpp:6909]   --->   Operation 71 'partselect' 'p_Result_16_8_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 72 [1/1] (0.00ns)   --->   "%p_Result_16_9_i_i = call i4 @_ssdm_op_PartSelect.i4.i56.i32.i32(i56 %xf_V, i32 16, i32 19) nounwind" [test.cpp:6853->test.cpp:6862->test.cpp:6909]   --->   Operation 72 'partselect' 'p_Result_16_9_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 73 [1/1] (0.00ns)   --->   "%p_Result_16_i_i_6 = call i4 @_ssdm_op_PartSelect.i4.i56.i32.i32(i56 %xf_V, i32 12, i32 15) nounwind" [test.cpp:6853->test.cpp:6862->test.cpp:6909]   --->   Operation 73 'partselect' 'p_Result_16_i_i_6' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 74 [1/1] (0.00ns)   --->   "%p_Result_16_10_i_i = call i4 @_ssdm_op_PartSelect.i4.i56.i32.i32(i56 %xf_V, i32 8, i32 11) nounwind" [test.cpp:6853->test.cpp:6862->test.cpp:6909]   --->   Operation 74 'partselect' 'p_Result_16_10_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 75 [1/1] (0.00ns)   --->   "%p_Result_16_11_i_i = call i4 @_ssdm_op_PartSelect.i4.i56.i32.i32(i56 %xf_V, i32 4, i32 7) nounwind" [test.cpp:6853->test.cpp:6862->test.cpp:6909]   --->   Operation 75 'partselect' 'p_Result_16_11_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_1 : Operation 76 [1/1] (0.00ns)   --->   "%tmp_10 = trunc i56 %xf_V to i4" [test.cpp:6853->test.cpp:6862->test.cpp:6909]   --->   Operation 76 'trunc' 'tmp_10' <Predicate = (!tmp_1)> <Delay = 0.00>

State 2 <SV = 1> <Delay = 29.0>
ST_2 : Operation 77 [1/1] (3.50ns)   --->   "%call_ret_6_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_16_6_i_i, i2 %r_V_ret_5_i_i) nounwind" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 77 'call' 'call_ret_6_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 78 [1/1] (0.00ns)   --->   "%q_chunk_V_0_6_i_i = extractvalue { i4, i2 } %call_ret_6_i_i, 0" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 78 'extractvalue' 'q_chunk_V_0_6_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 79 [1/1] (0.00ns)   --->   "%r_V_ret_6_i_i = extractvalue { i4, i2 } %call_ret_6_i_i, 1" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 79 'extractvalue' 'r_V_ret_6_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 80 [1/1] (3.50ns)   --->   "%call_ret_7_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_16_7_i_i, i2 %r_V_ret_6_i_i) nounwind" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 80 'call' 'call_ret_7_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 81 [1/1] (0.00ns)   --->   "%q_chunk_V_0_7_i_i = extractvalue { i4, i2 } %call_ret_7_i_i, 0" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 81 'extractvalue' 'q_chunk_V_0_7_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 82 [1/1] (0.00ns)   --->   "%r_V_ret_7_i_i = extractvalue { i4, i2 } %call_ret_7_i_i, 1" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 82 'extractvalue' 'r_V_ret_7_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 83 [1/1] (3.50ns)   --->   "%call_ret_8_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_16_8_i_i, i2 %r_V_ret_7_i_i) nounwind" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 83 'call' 'call_ret_8_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 84 [1/1] (0.00ns)   --->   "%q_chunk_V_0_8_i_i = extractvalue { i4, i2 } %call_ret_8_i_i, 0" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 84 'extractvalue' 'q_chunk_V_0_8_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 85 [1/1] (0.00ns)   --->   "%r_V_ret_8_i_i = extractvalue { i4, i2 } %call_ret_8_i_i, 1" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 85 'extractvalue' 'r_V_ret_8_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 86 [1/1] (3.50ns)   --->   "%call_ret_9_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_16_9_i_i, i2 %r_V_ret_8_i_i) nounwind" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 86 'call' 'call_ret_9_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 87 [1/1] (0.00ns)   --->   "%q_chunk_V_0_9_i_i = extractvalue { i4, i2 } %call_ret_9_i_i, 0" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 87 'extractvalue' 'q_chunk_V_0_9_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 88 [1/1] (0.00ns)   --->   "%r_V_ret_9_i_i = extractvalue { i4, i2 } %call_ret_9_i_i, 1" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 88 'extractvalue' 'r_V_ret_9_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 89 [1/1] (3.50ns)   --->   "%call_ret_i_i_7 = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_16_i_i_6, i2 %r_V_ret_9_i_i) nounwind" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 89 'call' 'call_ret_i_i_7' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 90 [1/1] (0.00ns)   --->   "%q_chunk_V_0_i_i = extractvalue { i4, i2 } %call_ret_i_i_7, 0" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 90 'extractvalue' 'q_chunk_V_0_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 91 [1/1] (0.00ns)   --->   "%r_V_ret_i_i_8 = extractvalue { i4, i2 } %call_ret_i_i_7, 1" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 91 'extractvalue' 'r_V_ret_i_i_8' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 92 [1/1] (3.50ns)   --->   "%call_ret_10_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_16_10_i_i, i2 %r_V_ret_i_i_8) nounwind" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 92 'call' 'call_ret_10_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 93 [1/1] (0.00ns)   --->   "%q_chunk_V_0_10_i_i = extractvalue { i4, i2 } %call_ret_10_i_i, 0" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 93 'extractvalue' 'q_chunk_V_0_10_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 94 [1/1] (0.00ns)   --->   "%r_V_ret_10_i_i = extractvalue { i4, i2 } %call_ret_10_i_i, 1" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 94 'extractvalue' 'r_V_ret_10_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 95 [1/1] (3.50ns)   --->   "%call_ret_11_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_16_11_i_i, i2 %r_V_ret_10_i_i) nounwind" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 95 'call' 'call_ret_11_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 96 [1/1] (0.00ns)   --->   "%q_chunk_V_0_11_i_i = extractvalue { i4, i2 } %call_ret_11_i_i, 0" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 96 'extractvalue' 'q_chunk_V_0_11_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 97 [1/1] (0.00ns)   --->   "%r_V_ret_11_i_i = extractvalue { i4, i2 } %call_ret_11_i_i, 1" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 97 'extractvalue' 'r_V_ret_11_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 98 [1/1] (3.50ns)   --->   "%call_ret_12_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %tmp_10, i2 %r_V_ret_11_i_i) nounwind" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 98 'call' 'call_ret_12_i_i' <Predicate = (!tmp_1)> <Delay = 3.50> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 99 [1/1] (0.00ns)   --->   "%q_chunk_V_0_12_i_i = extractvalue { i4, i2 } %call_ret_12_i_i, 0" [test.cpp:6854->test.cpp:6862->test.cpp:6909]   --->   Operation 99 'extractvalue' 'q_chunk_V_0_12_i_i' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 100 [1/1] (0.00ns)   --->   "%new_mant_V_1 = call i52 @_ssdm_op_BitConcatenate.i52.i4.i4.i4.i4.i4.i4.i4.i4.i4.i4.i4.i4.i4(i4 %q_chunk_V_0_1_i_i, i4 %q_chunk_V_0_2_i_i, i4 %q_chunk_V_0_3_i_i, i4 %q_chunk_V_0_4_i_i, i4 %q_chunk_V_0_5_i_i, i4 %q_chunk_V_0_6_i_i, i4 %q_chunk_V_0_7_i_i, i4 %q_chunk_V_0_8_i_i, i4 %q_chunk_V_0_9_i_i, i4 %q_chunk_V_0_i_i, i4 %q_chunk_V_0_10_i_i, i4 %q_chunk_V_0_11_i_i, i4 %q_chunk_V_0_12_i_i)" [test.cpp:6909]   --->   Operation 100 'bitconcatenate' 'new_mant_V_1' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 101 [1/1] (1.06ns)   --->   "br label %._crit_edge416" [test.cpp:6910]   --->   Operation 101 'br' <Predicate = (!tmp_1)> <Delay = 1.06>
ST_2 : Operation 102 [1/1] (0.00ns)   --->   "%p_Repl2_s = phi i52 [ %new_mant_V_1, %_ifconv1 ], [ %new_mant_V, %_ifconv ]"   --->   Operation 102 'phi' 'p_Repl2_s' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 103 [1/1] (0.00ns)   --->   "%p_Result_s = call i64 @_ssdm_op_BitConcatenate.i64.i1.i11.i52(i1 %p_Repl2_2, i11 %p_Repl2_1, i52 %p_Repl2_s) nounwind" [test.cpp:6571->test.cpp:6911]   --->   Operation 103 'bitconcatenate' 'p_Result_s' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 104 [1/1] (0.00ns)   --->   "%out = bitcast i64 %p_Result_s to double" [test.cpp:6572->test.cpp:6911]   --->   Operation 104 'bitcast' 'out' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 105 [1/1] (0.00ns)   --->   "ret double %out" [test.cpp:6912]   --->   Operation 105 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 5ns, clock uncertainty: 0.625ns.

 <State 1>: 27.2ns
The critical path consists of the following:
	wire read on port 'in_r' [5]  (0 ns)
	'select' operation ('p_cast_cast', test.cpp:6884) [13]  (0.654 ns)
	'icmp' operation ('tmp_5', test.cpp:6895) [23]  (1.33 ns)
	'and' operation ('sel_tmp2', test.cpp:6895) [29]  (0 ns)
	'select' operation ('shift.V', test.cpp:6895) [30]  (0.654 ns)
	'select' operation ('shift.V', test.cpp:6896) [34]  (0 ns)
	'select' operation ('shift.V', test.cpp:6892) [35]  (0.633 ns)
	'lshr' operation ('r.V', test.cpp:6905) [41]  (0 ns)
	'select' operation ('xf.V', test.cpp:6904) [44]  (0 ns)
	'add' operation ('xf.V', test.cpp:6908) [45]  (2.93 ns)
	'call' operation ('call_ret_i_i', test.cpp:6854->test.cpp:6862->test.cpp:6909) to 'lut_div3_chunk' [47]  (3.5 ns)
	'call' operation ('call_ret_1_i_i', test.cpp:6854->test.cpp:6862->test.cpp:6909) to 'lut_div3_chunk' [50]  (3.5 ns)
	'call' operation ('call_ret_2_i_i', test.cpp:6854->test.cpp:6862->test.cpp:6909) to 'lut_div3_chunk' [54]  (3.5 ns)
	'call' operation ('call_ret_3_i_i', test.cpp:6854->test.cpp:6862->test.cpp:6909) to 'lut_div3_chunk' [58]  (3.5 ns)
	'call' operation ('call_ret_4_i_i', test.cpp:6854->test.cpp:6862->test.cpp:6909) to 'lut_div3_chunk' [62]  (3.5 ns)
	'call' operation ('call_ret_5_i_i', test.cpp:6854->test.cpp:6862->test.cpp:6909) to 'lut_div3_chunk' [66]  (3.5 ns)

 <State 2>: 29.1ns
The critical path consists of the following:
	'call' operation ('call_ret_6_i_i', test.cpp:6854->test.cpp:6862->test.cpp:6909) to 'lut_div3_chunk' [70]  (3.5 ns)
	'call' operation ('call_ret_7_i_i', test.cpp:6854->test.cpp:6862->test.cpp:6909) to 'lut_div3_chunk' [74]  (3.5 ns)
	'call' operation ('call_ret_8_i_i', test.cpp:6854->test.cpp:6862->test.cpp:6909) to 'lut_div3_chunk' [78]  (3.5 ns)
	'call' operation ('call_ret_9_i_i', test.cpp:6854->test.cpp:6862->test.cpp:6909) to 'lut_div3_chunk' [82]  (3.5 ns)
	'call' operation ('call_ret_i_i_7', test.cpp:6854->test.cpp:6862->test.cpp:6909) to 'lut_div3_chunk' [86]  (3.5 ns)
	'call' operation ('call_ret_10_i_i', test.cpp:6854->test.cpp:6862->test.cpp:6909) to 'lut_div3_chunk' [90]  (3.5 ns)
	'call' operation ('call_ret_11_i_i', test.cpp:6854->test.cpp:6862->test.cpp:6909) to 'lut_div3_chunk' [94]  (3.5 ns)
	'call' operation ('call_ret_12_i_i', test.cpp:6854->test.cpp:6862->test.cpp:6909) to 'lut_div3_chunk' [98]  (3.5 ns)
	multiplexor before 'phi' operation ('mant.V') with incoming values : ('ssdm_int<52 + 1024 * 0, false>.V', test.cpp:6547->test.cpp:6878) ('new_mant.V', test.cpp:6909) [103]  (1.06 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
