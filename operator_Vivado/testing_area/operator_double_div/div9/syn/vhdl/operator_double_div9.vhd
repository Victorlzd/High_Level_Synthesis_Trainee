-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity operator_double_div9 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of operator_double_div9 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "operator_double_div9,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.531475,HLS_SYN_LAT=98,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1631,HLS_SYN_LUT=1829,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv57_4 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_Repl2_2_reg_333 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_exp_V_1_reg_338 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_mant_V_1_fu_113_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal new_mant_V_1_reg_349 : STD_LOGIC_VECTOR (51 downto 0);
    signal shift_V_cast_cast_fu_133_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_cast_cast_reg_356 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp4_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp4_reg_364 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_370 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_4_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_376 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_3_fu_201_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_3_reg_381 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_4_fu_227_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_4_reg_386 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_2_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_392 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_1_fu_252_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Repl2_1_reg_397 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_269_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal r_V_reg_417 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_274_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal r_V_1_reg_422 : STD_LOGIC_VECTOR (56 downto 0);
    signal xf_V_7_fu_283_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal xf_V_7_reg_427 : STD_LOGIC_VECTOR (56 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal xf_V_5_fu_304_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal xf_V_5_reg_433 : STD_LOGIC_VECTOR (56 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_int_57_div9_fu_74_ap_start : STD_LOGIC;
    signal grp_int_57_div9_fu_74_ap_done : STD_LOGIC;
    signal grp_int_57_div9_fu_74_ap_idle : STD_LOGIC;
    signal grp_int_57_div9_fu_74_ap_ready : STD_LOGIC;
    signal grp_int_57_div9_fu_74_ap_return : STD_LOGIC_VECTOR (56 downto 0);
    signal grp_int_57_div9_fu_74_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Val2_s_fu_91_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_117_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_fu_127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_141_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal sel_tmp2_demorgan_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_fu_166_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_1_fu_171_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shift_V_2_fu_193_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sel_tmp6_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_238_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal new_exp_V_fu_213_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_269_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_274_p0 : STD_LOGIC_VECTOR (56 downto 0);
    signal grp_fu_274_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal r_V_cast_fu_280_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal p_Result_s_fu_289_p4 : STD_LOGIC_VECTOR (56 downto 0);
    signal xf_V_6_fu_298_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal new_mant_V_fu_311_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Repl2_s_fu_315_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_1_fu_321_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component int_57_div9 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V : IN STD_LOGIC_VECTOR (56 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (56 downto 0) );
    end component;


    component operator_double_dbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (51 downto 0);
        din1 : IN STD_LOGIC_VECTOR (51 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component operator_double_dcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (56 downto 0);
        din1 : IN STD_LOGIC_VECTOR (56 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (56 downto 0) );
    end component;



begin
    grp_int_57_div9_fu_74 : component int_57_div9
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_int_57_div9_fu_74_ap_start,
        ap_done => grp_int_57_div9_fu_74_ap_done,
        ap_idle => grp_int_57_div9_fu_74_ap_idle,
        ap_ready => grp_int_57_div9_fu_74_ap_ready,
        in_V => xf_V_5_reg_433,
        ap_return => grp_int_57_div9_fu_74_ap_return);

    operator_double_dbkb_U10 : component operator_double_dbkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        OP => 1,
        din0_WIDTH => 52,
        din1_WIDTH => 11,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => new_mant_V_1_reg_349,
        din1 => grp_fu_269_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_269_p2);

    operator_double_dcud_U11 : component operator_double_dcud
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        OP => 0,
        din0_WIDTH => 57,
        din1_WIDTH => 11,
        dout_WIDTH => 57)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_274_p0,
        din1 => grp_fu_274_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_274_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_int_57_div9_fu_74_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_int_57_div9_fu_74_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_int_57_div9_fu_74_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_int_57_div9_fu_74_ap_ready = ap_const_logic_1)) then 
                    grp_int_57_div9_fu_74_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                icmp4_reg_364 <= icmp4_fu_151_p2;
                new_exp_V_1_reg_338 <= p_Val2_s_fu_91_p1(62 downto 52);
                new_mant_V_1_reg_349 <= new_mant_V_1_fu_113_p1;
                p_Repl2_2_reg_333 <= p_Val2_s_fu_91_p1(63 downto 63);
                    shift_V_cast_cast_reg_356(2 downto 0) <= shift_V_cast_cast_fu_133_p3(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p_Repl2_1_reg_397 <= p_Repl2_1_fu_252_p3;
                shift_V_4_reg_386 <= shift_V_4_fu_227_p3;
                tmp_2_reg_392 <= tmp_2_fu_233_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp4_reg_364 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                r_V_1_reg_422 <= grp_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp4_reg_364 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                r_V_reg_417 <= grp_fu_269_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                shift_V_3_reg_381 <= shift_V_3_fu_201_p3;
                tmp_3_reg_370 <= tmp_3_fu_157_p2;
                tmp_4_reg_376 <= tmp_4_fu_162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                xf_V_5_reg_433 <= xf_V_5_fu_304_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                xf_V_7_reg_427 <= xf_V_7_fu_283_p3;
            end if;
        end if;
    end process;
    shift_V_cast_cast_reg_356(10 downto 3) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_int_57_div9_fu_74_ap_done, ap_CS_fsm_state13)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_int_57_div9_fu_74_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(grp_int_57_div9_fu_74_ap_done, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_int_57_div9_fu_74_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_int_57_div9_fu_74_ap_done, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_int_57_div9_fu_74_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_1_fu_321_p4;
    grp_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_V_4_reg_386),52));
    grp_fu_274_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_mant_V_1_reg_349),57));
    grp_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_V_4_reg_386),57));
    grp_int_57_div9_fu_74_ap_start <= grp_int_57_div9_fu_74_ap_start_reg;
    icmp4_fu_151_p2 <= "1" when (tmp_7_fu_141_p4 = ap_const_lv10_0) else "0";
    icmp_fu_127_p2 <= "1" when (tmp_fu_117_p4 = ap_const_lv3_0) else "0";
    new_exp_V_fu_213_p2 <= std_logic_vector(unsigned(new_exp_V_1_reg_338) - unsigned(shift_V_cast_cast_reg_356));
    new_mant_V_1_fu_113_p1 <= p_Val2_s_fu_91_p1(52 - 1 downto 0);
    new_mant_V_fu_311_p1 <= grp_int_57_div9_fu_74_ap_return(52 - 1 downto 0);
    p_Repl2_1_fu_252_p3 <= 
        p_s_fu_238_p3 when (tmp_6_fu_246_p2(0) = '1') else 
        new_exp_V_fu_213_p2;
    p_Repl2_s_fu_315_p3 <= 
        new_mant_V_1_reg_349 when (tmp_2_reg_392(0) = '1') else 
        new_mant_V_fu_311_p1;
    p_Result_1_fu_321_p4 <= ((p_Repl2_2_reg_333 & p_Repl2_1_reg_397) & p_Repl2_s_fu_315_p3);
    
    p_Result_s_fu_289_p4_proc : process(xf_V_7_reg_427)
    begin
        p_Result_s_fu_289_p4 <= xf_V_7_reg_427;
        p_Result_s_fu_289_p4(52) <= ap_const_lv1_1(0);
    end process;

    p_Val2_s_fu_91_p1 <= in_r;
    p_s_fu_238_p3 <= 
        ap_const_lv11_7FF when (tmp_2_fu_233_p2(0) = '1') else 
        ap_const_lv11_0;
    r_V_cast_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_417),57));
    sel_tmp2_demorgan_fu_176_p2 <= (tmp_4_fu_162_p2 or tmp_3_fu_157_p2);
    sel_tmp2_fu_182_p2 <= (sel_tmp2_demorgan_fu_176_p2 xor ap_const_lv1_1);
    sel_tmp3_fu_188_p2 <= (sel_tmp2_fu_182_p2 and icmp4_reg_364);
    sel_tmp6_fu_217_p2 <= (tmp_3_reg_370 xor ap_const_lv1_1);
    sel_tmp7_fu_222_p2 <= (tmp_4_reg_376 and sel_tmp6_fu_217_p2);
    shift_V_1_fu_171_p2 <= std_logic_vector(signed(ap_const_lv11_7FF) + signed(new_exp_V_1_reg_338));
    shift_V_2_fu_193_p3 <= 
        shift_V_fu_166_p2 when (sel_tmp3_fu_188_p2(0) = '1') else 
        shift_V_1_fu_171_p2;
    shift_V_3_fu_201_p3 <= 
        ap_const_lv11_0 when (tmp_3_fu_157_p2(0) = '1') else 
        shift_V_2_fu_193_p3;
    shift_V_4_fu_227_p3 <= 
        shift_V_cast_cast_reg_356 when (sel_tmp7_fu_222_p2(0) = '1') else 
        shift_V_3_reg_381;
    shift_V_cast_cast_fu_133_p3 <= 
        ap_const_lv11_4 when (icmp_fu_127_p2(0) = '1') else 
        ap_const_lv11_3;
    shift_V_fu_166_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) - unsigned(new_exp_V_1_reg_338));
    tmp_1_fu_209_p2 <= "1" when (unsigned(shift_V_cast_cast_reg_356) > unsigned(new_exp_V_1_reg_338)) else "0";
    tmp_2_fu_233_p2 <= "1" when (new_exp_V_1_reg_338 = ap_const_lv11_7FF) else "0";
    tmp_3_fu_157_p2 <= "1" when (new_exp_V_1_reg_338 = ap_const_lv11_0) else "0";
    tmp_4_fu_162_p2 <= "1" when (unsigned(shift_V_cast_cast_reg_356) < unsigned(new_exp_V_1_reg_338)) else "0";
    tmp_6_fu_246_p2 <= (tmp_2_fu_233_p2 or tmp_1_fu_209_p2);
    tmp_7_fu_141_p4 <= p_Val2_s_fu_91_p1(62 downto 53);
    tmp_fu_117_p4 <= p_Val2_s_fu_91_p1(51 downto 49);
    xf_V_5_fu_304_p2 <= std_logic_vector(unsigned(ap_const_lv57_4) + unsigned(xf_V_6_fu_298_p3));
    xf_V_6_fu_298_p3 <= 
        xf_V_7_reg_427 when (tmp_3_reg_370(0) = '1') else 
        p_Result_s_fu_289_p4;
    xf_V_7_fu_283_p3 <= 
        r_V_cast_fu_280_p1 when (icmp4_reg_364(0) = '1') else 
        r_V_1_reg_422;
end behav;
