// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="div10,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=14.171077,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=364,HLS_SYN_LUT=529,HLS_VERSION=2018_2}" *)

module div10 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] a;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] tmp_4_reg_117;
wire   [65:0] grp_fu_44_p1;
wire  signed [63:0] tmp_4_fu_50_p1;
wire   [128:0] grp_fu_44_p2;
wire    ap_CS_fsm_state2;
wire   [128:0] neg_mul_fu_58_p2;
wire   [60:0] tmp_5_fu_64_p4;
wire   [60:0] tmp_6_fu_78_p4;
wire  signed [63:0] tmp_1_fu_74_p1;
wire  signed [63:0] tmp_2_fu_88_p1;
wire   [63:0] tmp_3_fu_92_p3;
wire   [63:0] neg_ti_fu_99_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

div10_mul_64s_66nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 66 ),
    .dout_WIDTH( 129 ))
div10_mul_64s_66nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a),
    .din1(grp_fu_44_p1),
    .ce(1'b1),
    .dout(grp_fu_44_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_4_reg_117 <= tmp_4_fu_50_p1[32'd63];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return = ((tmp_4_reg_117[0:0] === 1'b1) ? neg_ti_fu_99_p2 : tmp_2_fu_88_p1);

assign grp_fu_44_p1 = 129'd29514790517935282586;

assign neg_mul_fu_58_p2 = (129'd0 - grp_fu_44_p2);

assign neg_ti_fu_99_p2 = (64'd0 - tmp_3_fu_92_p3);

assign tmp_1_fu_74_p1 = $signed(tmp_5_fu_64_p4);

assign tmp_2_fu_88_p1 = $signed(tmp_6_fu_78_p4);

assign tmp_3_fu_92_p3 = ((tmp_4_reg_117[0:0] === 1'b1) ? tmp_1_fu_74_p1 : tmp_2_fu_88_p1);

assign tmp_4_fu_50_p1 = a;

assign tmp_5_fu_64_p4 = {{neg_mul_fu_58_p2[128:68]}};

assign tmp_6_fu_78_p4 = {{grp_fu_44_p2[128:68]}};

endmodule //div10
