// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _lut_mul11_chunk_HH_
#define _lut_mul11_chunk_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "lut_mul11_chunk_q0.h"
#include "lut_mul11_chunk_q1.h"
#include "lut_mul11_chunk_q2.h"
#include "lut_mul11_chunk_q3.h"
#include "lut_mul11_chunk_q4.h"
#include "lut_mul11_chunk_q5.h"
#include "lut_mul11_chunk_q6.h"
#include "lut_mul11_chunk_q7.h"
#include "lut_mul11_chunk_q8.h"
#include "lut_mul11_chunk_q9.h"

namespace ap_rtl {

struct lut_mul11_chunk : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<6> > d_V;
    sc_out< sc_lv<10> > ap_return;


    // Module declarations
    lut_mul11_chunk(sc_module_name name);
    SC_HAS_PROCESS(lut_mul11_chunk);

    ~lut_mul11_chunk();

    sc_trace_file* mVcdFile;

    lut_mul11_chunk_q0* q0_U;
    lut_mul11_chunk_q1* q1_U;
    lut_mul11_chunk_q2* q2_U;
    lut_mul11_chunk_q3* q3_U;
    lut_mul11_chunk_q4* q4_U;
    lut_mul11_chunk_q5* q5_U;
    lut_mul11_chunk_q6* q6_U;
    lut_mul11_chunk_q7* q7_U;
    lut_mul11_chunk_q8* q8_U;
    lut_mul11_chunk_q9* q9_U;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<6> > q0_address0;
    sc_signal< sc_logic > q0_ce0;
    sc_signal< sc_lv<1> > q0_q0;
    sc_signal< sc_lv<6> > q1_address0;
    sc_signal< sc_logic > q1_ce0;
    sc_signal< sc_lv<1> > q1_q0;
    sc_signal< sc_lv<6> > q2_address0;
    sc_signal< sc_logic > q2_ce0;
    sc_signal< sc_lv<1> > q2_q0;
    sc_signal< sc_lv<6> > q3_address0;
    sc_signal< sc_logic > q3_ce0;
    sc_signal< sc_lv<1> > q3_q0;
    sc_signal< sc_lv<6> > q4_address0;
    sc_signal< sc_logic > q4_ce0;
    sc_signal< sc_lv<1> > q4_q0;
    sc_signal< sc_lv<6> > q5_address0;
    sc_signal< sc_logic > q5_ce0;
    sc_signal< sc_lv<1> > q5_q0;
    sc_signal< sc_lv<6> > q6_address0;
    sc_signal< sc_logic > q6_ce0;
    sc_signal< sc_lv<1> > q6_q0;
    sc_signal< sc_lv<6> > q7_address0;
    sc_signal< sc_logic > q7_ce0;
    sc_signal< sc_lv<1> > q7_q0;
    sc_signal< sc_lv<6> > q8_address0;
    sc_signal< sc_logic > q8_ce0;
    sc_signal< sc_lv<1> > q8_q0;
    sc_signal< sc_lv<6> > q9_address0;
    sc_signal< sc_logic > q9_ce0;
    sc_signal< sc_lv<1> > q9_q0;
    sc_signal< sc_lv<64> > tmp_fu_164_p1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<10> > p_Result_s_fu_178_p11;
    sc_signal< sc_lv<10> > ap_return_preg;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_p_Result_s_fu_178_p11();
    void thread_q0_address0();
    void thread_q0_ce0();
    void thread_q1_address0();
    void thread_q1_ce0();
    void thread_q2_address0();
    void thread_q2_ce0();
    void thread_q3_address0();
    void thread_q3_ce0();
    void thread_q4_address0();
    void thread_q4_ce0();
    void thread_q5_address0();
    void thread_q5_ce0();
    void thread_q6_address0();
    void thread_q6_ce0();
    void thread_q7_address0();
    void thread_q7_ce0();
    void thread_q8_address0();
    void thread_q8_ce0();
    void thread_q9_address0();
    void thread_q9_ce0();
    void thread_tmp_fu_164_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
