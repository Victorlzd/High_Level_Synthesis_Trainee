-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lut_mul3_chunk is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    d_V : IN STD_LOGIC_VECTOR (5 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of lut_mul3_chunk is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal q0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal q0_ce0 : STD_LOGIC;
    signal q0_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal q1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal q1_ce0 : STD_LOGIC;
    signal q1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal q2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal q2_ce0 : STD_LOGIC;
    signal q2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal q3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal q3_ce0 : STD_LOGIC;
    signal q3_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal q4_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal q4_ce0 : STD_LOGIC;
    signal q4_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal q5_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal q5_ce0 : STD_LOGIC;
    signal q5_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal q6_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal q6_ce0 : STD_LOGIC;
    signal q6_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal q7_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal q7_ce0 : STD_LOGIC;
    signal q7_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_134_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_Result_s_fu_146_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component lut_mul3_chunk_q0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lut_mul3_chunk_q1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lut_mul3_chunk_q2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lut_mul3_chunk_q3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lut_mul3_chunk_q4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lut_mul3_chunk_q5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lut_mul3_chunk_q6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lut_mul3_chunk_q7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    q0_U : component lut_mul3_chunk_q0
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => q0_address0,
        ce0 => q0_ce0,
        q0 => q0_q0);

    q1_U : component lut_mul3_chunk_q1
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => q1_address0,
        ce0 => q1_ce0,
        q0 => q1_q0);

    q2_U : component lut_mul3_chunk_q2
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => q2_address0,
        ce0 => q2_ce0,
        q0 => q2_q0);

    q3_U : component lut_mul3_chunk_q3
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => q3_address0,
        ce0 => q3_ce0,
        q0 => q3_q0);

    q4_U : component lut_mul3_chunk_q4
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => q4_address0,
        ce0 => q4_ce0,
        q0 => q4_q0);

    q5_U : component lut_mul3_chunk_q5
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => q5_address0,
        ce0 => q5_ce0,
        q0 => q5_q0);

    q6_U : component lut_mul3_chunk_q6
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => q6_address0,
        ce0 => q6_ce0,
        q0 => q6_q0);

    q7_U : component lut_mul3_chunk_q7
    generic map (
        DataWidth => 1,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => q7_address0,
        ce0 => q7_ce0,
        q0 => q7_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_preg <= p_Result_s_fu_146_p9;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ap_return <= p_Result_s_fu_146_p9;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_146_p9 <= (((((((q7_q0 & q6_q0) & q5_q0) & q4_q0) & q3_q0) & q2_q0) & q1_q0) & q0_q0);
    q0_address0 <= tmp_fu_134_p1(6 - 1 downto 0);

    q0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            q0_ce0 <= ap_const_logic_1;
        else 
            q0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q1_address0 <= tmp_fu_134_p1(6 - 1 downto 0);

    q1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            q1_ce0 <= ap_const_logic_1;
        else 
            q1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q2_address0 <= tmp_fu_134_p1(6 - 1 downto 0);

    q2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            q2_ce0 <= ap_const_logic_1;
        else 
            q2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q3_address0 <= tmp_fu_134_p1(6 - 1 downto 0);

    q3_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            q3_ce0 <= ap_const_logic_1;
        else 
            q3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q4_address0 <= tmp_fu_134_p1(6 - 1 downto 0);

    q4_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            q4_ce0 <= ap_const_logic_1;
        else 
            q4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q5_address0 <= tmp_fu_134_p1(6 - 1 downto 0);

    q5_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            q5_ce0 <= ap_const_logic_1;
        else 
            q5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q6_address0 <= tmp_fu_134_p1(6 - 1 downto 0);

    q6_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            q6_ce0 <= ap_const_logic_1;
        else 
            q6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q7_address0 <= tmp_fu_134_p1(6 - 1 downto 0);

    q7_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            q7_ce0 <= ap_const_logic_1;
        else 
            q7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_V),64));
end behav;
