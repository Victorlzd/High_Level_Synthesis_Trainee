-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity operator_float_div3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of operator_float_div3 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "operator_float_div3,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.177600,HLS_SYN_LAT=16,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=691,HLS_SYN_LUT=755,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv26_1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_130 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_lut_div3_chunk_fu_103_ap_idle : STD_LOGIC;
    signal grp_lut_div3_chunk_fu_103_ap_ready : STD_LOGIC;
    signal grp_lut_div3_chunk_fu_103_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal p_Val2_s_fu_135_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_445 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_2_reg_450 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_exp_V_fu_147_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_exp_V_reg_455 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_mant_V_fu_157_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal new_mant_V_reg_465 : STD_LOGIC_VECTOR (22 downto 0);
    signal shift_V_cast_cast_fu_169_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_V_cast_cast_reg_472 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_480 : STD_LOGIC_VECTOR (0 downto 0);
    signal xf_V_3_cast_fu_183_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xf_V_3_cast_reg_486 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_Repl2_1_fu_206_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_1_reg_491 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_496 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_502 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_507 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_3_fu_274_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_V_3_reg_512 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_V_4_fu_292_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_V_4_reg_517 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal xf_V_1_fu_305_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xf_V_1_reg_523 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_320_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_7_reg_544 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_549 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_i_i_reg_554 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal p_Result_25_i_i_reg_559 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_25_1_i_i_reg_564 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_25_2_i_i_reg_569 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_25_3_i_i_reg_574 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_25_4_i_i_reg_579 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_fu_410_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_reg_584 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_fu_414_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_chunk_V_reg_589 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_15_fu_418_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_reg_594 : STD_LOGIC_VECTOR (2 downto 0);
    signal q_chunk_V_1_reg_599 : STD_LOGIC_VECTOR (3 downto 0);
    signal q_chunk_V_2_reg_604 : STD_LOGIC_VECTOR (3 downto 0);
    signal q_chunk_V_3_reg_609 : STD_LOGIC_VECTOR (3 downto 0);
    signal q_chunk_V_4_reg_614 : STD_LOGIC_VECTOR (3 downto 0);
    signal q_chunk_V_5_reg_619 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_lut_div3_chunk_fu_103_ap_start : STD_LOGIC;
    signal grp_lut_div3_chunk_fu_103_d_V : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_lut_div3_chunk_fu_103_r_in_V : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_lut_div3_chunk_fu_103_ap_return_0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_lut_div3_chunk_fu_103_ap_return_1 : STD_LOGIC_VECTOR (1 downto 0);
    signal new_mant_V_1_fu_422_p7 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_phi_mux_p_Repl2_s_phi_fu_97_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Repl2_s_reg_94 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_lut_div3_chunk_fu_103_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_fu_161_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_new_exp_V_1_fu_194_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_exp_V_1_fu_190_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_223_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sel_tmp3_demorgan_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_V_fu_238_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_V_1_fu_243_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_V_2_fu_266_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp7_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_298_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_320_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_325_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_331_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_13_fu_334_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal xf_V_2_fu_337_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal xf_V_fu_344_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Result_s_fu_433_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);

    component lut_div3_chunk IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        d_V : IN STD_LOGIC_VECTOR (3 downto 0);
        r_in_V : IN STD_LOGIC_VECTOR (1 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component operator_float_dibkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component operator_float_dicud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_lut_div3_chunk_fu_103 : component lut_div3_chunk
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lut_div3_chunk_fu_103_ap_start,
        ap_done => grp_lut_div3_chunk_fu_103_ap_done,
        ap_idle => grp_lut_div3_chunk_fu_103_ap_idle,
        ap_ready => grp_lut_div3_chunk_fu_103_ap_ready,
        d_V => grp_lut_div3_chunk_fu_103_d_V,
        r_in_V => grp_lut_div3_chunk_fu_103_r_in_V,
        ap_return_0 => grp_lut_div3_chunk_fu_103_ap_return_0,
        ap_return_1 => grp_lut_div3_chunk_fu_103_ap_return_1);

    operator_float_dibkb_U9 : component operator_float_dibkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        OP => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => xf_V_1_reg_523,
        din1 => grp_fu_320_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_320_p2);

    operator_float_dicud_U10 : component operator_float_dicud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        OP => 0,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_325_p0,
        din1 => grp_fu_325_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_325_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_lut_div3_chunk_fu_103_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lut_div3_chunk_fu_103_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    grp_lut_div3_chunk_fu_103_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lut_div3_chunk_fu_103_ap_ready = ap_const_logic_1)) then 
                    grp_lut_div3_chunk_fu_103_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    p_Repl2_s_reg_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_reg_480 = ap_const_lv1_1))) then 
                p_Repl2_s_reg_94 <= new_mant_V_reg_465;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (tmp_1_reg_480 = ap_const_lv1_0))) then 
                p_Repl2_s_reg_94 <= new_mant_V_1_fu_422_p7;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    d_chunk_V_reg_589(1 downto 0) <= d_chunk_V_fu_414_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_reg_480 = ap_const_lv1_0))) then
                icmp_reg_507 <= icmp_fu_232_p2;
                shift_V_3_reg_512 <= shift_V_3_fu_274_p3;
                tmp_4_reg_496 <= tmp_4_fu_214_p2;
                tmp_5_reg_502 <= tmp_5_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                new_exp_V_reg_455 <= p_Val2_s_fu_135_p1(30 downto 23);
                new_mant_V_reg_465 <= new_mant_V_fu_157_p1;
                p_Repl2_2_reg_450 <= p_Val2_s_fu_135_p1(31 downto 31);
                p_Val2_s_reg_445 <= p_Val2_s_fu_135_p1;
                    shift_V_cast_cast_reg_472(1 downto 0) <= shift_V_cast_cast_fu_169_p3(1 downto 0);
                tmp_1_reg_480 <= tmp_1_fu_177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                p_Repl2_1_reg_491 <= p_Repl2_1_fu_206_p3;
                    xf_V_3_cast_reg_486(22 downto 0) <= xf_V_3_cast_fu_183_p1(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Result_25_1_i_i_reg_564 <= xf_V_fu_344_p2(19 downto 16);
                p_Result_25_2_i_i_reg_569 <= xf_V_fu_344_p2(15 downto 12);
                p_Result_25_3_i_i_reg_574 <= xf_V_fu_344_p2(11 downto 8);
                p_Result_25_4_i_i_reg_579 <= xf_V_fu_344_p2(7 downto 4);
                p_Result_25_i_i_reg_559 <= xf_V_fu_344_p2(23 downto 20);
                p_Result_i_i_reg_554 <= xf_V_fu_344_p2(25 downto 24);
                tmp_14_reg_584 <= tmp_14_fu_410_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div3_chunk_fu_103_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                q_chunk_V_1_reg_599 <= grp_lut_div3_chunk_fu_103_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div3_chunk_fu_103_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                q_chunk_V_2_reg_604 <= grp_lut_div3_chunk_fu_103_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div3_chunk_fu_103_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                q_chunk_V_3_reg_609 <= grp_lut_div3_chunk_fu_103_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div3_chunk_fu_103_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                q_chunk_V_4_reg_614 <= grp_lut_div3_chunk_fu_103_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div3_chunk_fu_103_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                q_chunk_V_5_reg_619 <= grp_lut_div3_chunk_fu_103_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_lut_div3_chunk_fu_103_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((grp_lut_div3_chunk_fu_103_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((grp_lut_div3_chunk_fu_103_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((grp_lut_div3_chunk_fu_103_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((grp_lut_div3_chunk_fu_103_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((grp_lut_div3_chunk_fu_103_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then
                reg_130 <= grp_lut_div3_chunk_fu_103_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                shift_V_4_reg_517 <= shift_V_4_fu_292_p3;
                xf_V_1_reg_523 <= xf_V_1_fu_305_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lut_div3_chunk_fu_103_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                tmp_15_reg_594 <= tmp_15_fu_418_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_reg_507 = ap_const_lv1_0))) then
                tmp_6_reg_549 <= grp_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_reg_507 = ap_const_lv1_1))) then
                tmp_7_reg_544 <= grp_fu_320_p2;
            end if;
        end if;
    end process;
    shift_V_cast_cast_reg_472(7 downto 2) <= "000000";
    xf_V_3_cast_reg_486(23) <= '0';
    d_chunk_V_reg_589(3 downto 2) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state10, grp_lut_div3_chunk_fu_103_ap_done, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, tmp_1_reg_480, ap_CS_fsm_state2, ap_CS_fsm_state22)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_reg_480 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_lut_div3_chunk_fu_103_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_lut_div3_chunk_fu_103_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_lut_div3_chunk_fu_103_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_lut_div3_chunk_fu_103_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((grp_lut_div3_chunk_fu_103_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((grp_lut_div3_chunk_fu_103_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((grp_lut_div3_chunk_fu_103_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_Repl2_s_phi_fu_97_p4_assign_proc : process(tmp_1_reg_480, new_mant_V_1_fu_422_p7, p_Repl2_s_reg_94, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) and (tmp_1_reg_480 = ap_const_lv1_0))) then 
            ap_phi_mux_p_Repl2_s_phi_fu_97_p4 <= new_mant_V_1_fu_422_p7;
        else 
            ap_phi_mux_p_Repl2_s_phi_fu_97_p4 <= p_Repl2_s_reg_94;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_s_fu_433_p4;
    d_chunk_V_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i_i_reg_554),4));
    grp_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_V_4_reg_517),24));
    grp_fu_325_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_V_1_reg_523),32));
    grp_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_V_4_reg_517),32));
    grp_lut_div3_chunk_fu_103_ap_start <= grp_lut_div3_chunk_fu_103_ap_start_reg;

    grp_lut_div3_chunk_fu_103_d_V_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, p_Result_25_i_i_reg_559, p_Result_25_1_i_i_reg_564, p_Result_25_2_i_i_reg_569, p_Result_25_3_i_i_reg_574, p_Result_25_4_i_i_reg_579, tmp_14_reg_584, d_chunk_V_reg_589, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_lut_div3_chunk_fu_103_d_V <= tmp_14_reg_584;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_lut_div3_chunk_fu_103_d_V <= p_Result_25_4_i_i_reg_579;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_lut_div3_chunk_fu_103_d_V <= p_Result_25_3_i_i_reg_574;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_lut_div3_chunk_fu_103_d_V <= p_Result_25_2_i_i_reg_569;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_lut_div3_chunk_fu_103_d_V <= p_Result_25_1_i_i_reg_564;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_lut_div3_chunk_fu_103_d_V <= p_Result_25_i_i_reg_559;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_lut_div3_chunk_fu_103_d_V <= d_chunk_V_reg_589;
        else 
            grp_lut_div3_chunk_fu_103_d_V <= "XXXX";
        end if; 
    end process;


    grp_lut_div3_chunk_fu_103_r_in_V_assign_proc : process(reg_130, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_lut_div3_chunk_fu_103_r_in_V <= reg_130;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_lut_div3_chunk_fu_103_r_in_V <= ap_const_lv2_0;
        else 
            grp_lut_div3_chunk_fu_103_r_in_V <= "XX";
        end if; 
    end process;

    icmp_fu_232_p2 <= "1" when (tmp_12_fu_223_p4 = ap_const_lv7_0) else "0";
    new_exp_V_1_fu_190_p2 <= std_logic_vector(unsigned(new_exp_V_reg_455) - unsigned(shift_V_cast_cast_reg_472));
    new_exp_V_fu_147_p4 <= p_Val2_s_fu_135_p1(30 downto 23);
    new_mant_V_1_fu_422_p7 <= (((((tmp_15_reg_594 & q_chunk_V_1_reg_599) & q_chunk_V_2_reg_604) & q_chunk_V_3_reg_609) & q_chunk_V_4_reg_614) & q_chunk_V_5_reg_619);
    new_mant_V_fu_157_p1 <= p_Val2_s_fu_135_p1(23 - 1 downto 0);
    p_Repl2_1_fu_206_p3 <= 
        p_new_exp_V_1_fu_194_p3 when (tmp_8_fu_201_p2(0) = '1') else 
        new_exp_V_1_fu_190_p2;
    p_Result_s_fu_433_p4 <= ((p_Repl2_2_reg_450 & p_Repl2_1_reg_491) & ap_phi_mux_p_Repl2_s_phi_fu_97_p4);
    p_Val2_s_fu_135_p1 <= in_r;
    p_new_exp_V_1_fu_194_p3 <= 
        ap_const_lv8_FF when (tmp_1_reg_480(0) = '1') else 
        ap_const_lv8_0;
    sel_tmp3_demorgan_fu_248_p2 <= (tmp_5_fu_219_p2 or tmp_4_fu_214_p2);
    sel_tmp3_fu_254_p2 <= (sel_tmp3_demorgan_fu_248_p2 xor ap_const_lv1_1);
    sel_tmp4_fu_260_p2 <= (sel_tmp3_fu_254_p2 and icmp_fu_232_p2);
    sel_tmp7_fu_282_p2 <= (tmp_4_reg_496 xor ap_const_lv1_1);
    sel_tmp8_fu_287_p2 <= (tmp_5_reg_502 and sel_tmp7_fu_282_p2);
    shift_V_1_fu_243_p2 <= std_logic_vector(signed(ap_const_lv8_FF) + signed(new_exp_V_reg_455));
    shift_V_2_fu_266_p3 <= 
        shift_V_fu_238_p2 when (sel_tmp4_fu_260_p2(0) = '1') else 
        shift_V_1_fu_243_p2;
    shift_V_3_fu_274_p3 <= 
        ap_const_lv8_0 when (tmp_4_fu_214_p2(0) = '1') else 
        shift_V_2_fu_266_p3;
    shift_V_4_fu_292_p3 <= 
        shift_V_cast_cast_reg_472 when (sel_tmp8_fu_287_p2(0) = '1') else 
        shift_V_3_reg_512;
    shift_V_cast_cast_fu_169_p3 <= 
        ap_const_lv8_1 when (tmp_fu_161_p3(0) = '1') else 
        ap_const_lv8_2;
    shift_V_fu_238_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) - unsigned(new_exp_V_reg_455));
    tmp_10_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_544),26));
    tmp_12_fu_223_p4 <= p_Val2_s_reg_445(30 downto 24);
    tmp_13_fu_334_p1 <= tmp_6_reg_549(26 - 1 downto 0);
    tmp_14_fu_410_p1 <= xf_V_fu_344_p2(4 - 1 downto 0);
    tmp_15_fu_418_p1 <= grp_lut_div3_chunk_fu_103_ap_return_0(3 - 1 downto 0);
    tmp_1_fu_177_p2 <= "1" when (new_exp_V_fu_147_p4 = ap_const_lv8_FF) else "0";
    tmp_2_fu_186_p2 <= "1" when (unsigned(shift_V_cast_cast_reg_472) > unsigned(new_exp_V_reg_455)) else "0";
    tmp_4_fu_214_p2 <= "1" when (new_exp_V_reg_455 = ap_const_lv8_0) else "0";
    tmp_5_fu_219_p2 <= "1" when (unsigned(shift_V_cast_cast_reg_472) < unsigned(new_exp_V_reg_455)) else "0";
    tmp_8_fu_201_p2 <= (tmp_2_fu_186_p2 or tmp_1_reg_480);
    tmp_9_fu_298_p3 <= (ap_const_lv1_1 & new_mant_V_reg_465);
    tmp_fu_161_p3 <= p_Val2_s_fu_135_p1(22 downto 22);
    xf_V_1_fu_305_p3 <= 
        xf_V_3_cast_reg_486 when (tmp_4_reg_496(0) = '1') else 
        tmp_9_fu_298_p3;
    xf_V_2_fu_337_p3 <= 
        tmp_10_fu_331_p1 when (icmp_reg_507(0) = '1') else 
        tmp_13_fu_334_p1;
    xf_V_3_cast_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_mant_V_reg_465),24));
    xf_V_fu_344_p2 <= std_logic_vector(unsigned(ap_const_lv26_1) + unsigned(xf_V_2_fu_337_p3));
end behav;
