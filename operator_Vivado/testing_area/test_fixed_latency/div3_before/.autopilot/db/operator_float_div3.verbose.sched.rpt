

================================================================
== Vivado HLS Report for 'operator_float_div3'
================================================================
* Date:           Fri Aug 24 15:01:42 2018

* Version:        2018.2 (Build 2258646 on Thu Jun 14 20:25:20 MDT 2018)
* Project:        test_fixed_latency
* Solution:       div3_before
* Product family: kintex7
* Target device:  xc7k160tfbg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   2.50|     2.132|        0.31|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    2|   29|    2|   29|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 23
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!tmp_1)
	23  / (tmp_1)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.22>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%in_read = call float @_ssdm_op_Read.ap_auto.float(float %in_r) nounwind"   --->   Operation 24 'read' 'in_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%p_Val2_s = bitcast float %in_read to i32" [test.cpp:23->test.cpp:98]   --->   Operation 25 'bitcast' 'p_Val2_s' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%p_Repl2_2 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_s, i32 31)" [test.cpp:24->test.cpp:98]   --->   Operation 26 'bitselect' 'p_Repl2_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%new_exp_V = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %p_Val2_s, i32 23, i32 30) nounwind" [test.cpp:25->test.cpp:98]   --->   Operation 27 'partselect' 'new_exp_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%new_mant_V = trunc i32 %p_Val2_s to i23" [test.cpp:26->test.cpp:98]   --->   Operation 28 'trunc' 'new_mant_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%tmp = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_s, i32 22)" [test.cpp:104]   --->   Operation 29 'bitselect' 'tmp' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.65ns)   --->   "%shift_V_cast_cast = select i1 %tmp, i8 1, i8 2" [test.cpp:104]   --->   Operation 30 'select' 'shift_V_cast_cast' <Predicate = true> <Delay = 0.65> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 31 [1/1] (1.22ns)   --->   "%tmp_1 = icmp eq i8 %new_exp_V, -1" [test.cpp:106]   --->   Operation 31 'icmp' 'tmp_1' <Predicate = true> <Delay = 1.22> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.18> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 2 <SV = 1> <Delay = 2.13>
ST_2 : Operation 32 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(float %in_r) nounwind, !map !161"   --->   Operation 32 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 33 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(float 0.000000e+00) nounwind, !map !167"   --->   Operation 33 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 34 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([20 x i8]* @operator_float_div3_s) nounwind"   --->   Operation 34 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 35 [1/1] (0.00ns)   --->   "%xf_V_3_cast = zext i23 %new_mant_V to i24" [test.cpp:103]   --->   Operation 35 'zext' 'xf_V_3_cast' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 36 [1/1] (1.22ns)   --->   "%tmp_2 = icmp ugt i8 %shift_V_cast_cast, %new_exp_V" [test.cpp:107]   --->   Operation 36 'icmp' 'tmp_2' <Predicate = true> <Delay = 1.22> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.18> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 37 [1/1] (1.39ns)   --->   "%new_exp_V_1 = sub i8 %new_exp_V, %shift_V_cast_cast" [test.cpp:110]   --->   Operation 37 'sub' 'new_exp_V_1' <Predicate = true> <Delay = 1.39> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 38 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_1)   --->   "%p_new_exp_V_1 = select i1 %tmp_1, i8 -1, i8 0" [test.cpp:80->test.cpp:131]   --->   Operation 38 'select' 'p_new_exp_V_1' <Predicate = true> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 39 [1/1] (0.00ns) (grouped into LUT with out node p_Repl2_1)   --->   "%tmp_8 = or i1 %tmp_1, %tmp_2" [test.cpp:80->test.cpp:131]   --->   Operation 39 'or' 'tmp_8' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 40 [1/1] (0.74ns) (out node of the LUT)   --->   "%p_Repl2_1 = select i1 %tmp_8, i8 %p_new_exp_V_1, i8 %new_exp_V_1" [test.cpp:80->test.cpp:131]   --->   Operation 40 'select' 'p_Repl2_1' <Predicate = true> <Delay = 0.74> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 41 [1/1] (1.06ns)   --->   "br i1 %tmp_1, label %._crit_edge416, label %_ifconv1" [test.cpp:111]   --->   Operation 41 'br' <Predicate = true> <Delay = 1.06>
ST_2 : Operation 42 [1/1] (1.22ns)   --->   "%tmp_4 = icmp eq i8 %new_exp_V, 0" [test.cpp:112]   --->   Operation 42 'icmp' 'tmp_4' <Predicate = (!tmp_1)> <Delay = 1.22> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.18> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 43 [1/1] (1.22ns)   --->   "%tmp_5 = icmp ult i8 %shift_V_cast_cast, %new_exp_V" [test.cpp:115]   --->   Operation 43 'icmp' 'tmp_5' <Predicate = (!tmp_1)> <Delay = 1.22> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.18> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 44 [1/1] (0.00ns)   --->   "%tmp_12 = call i7 @_ssdm_op_PartSelect.i7.i32.i32.i32(i32 %p_Val2_s, i32 24, i32 30)" [test.cpp:116]   --->   Operation 44 'partselect' 'tmp_12' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_2 : Operation 45 [1/1] (1.18ns)   --->   "%icmp = icmp eq i7 %tmp_12, 0" [test.cpp:116]   --->   Operation 45 'icmp' 'icmp' <Predicate = (!tmp_1)> <Delay = 1.18> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.18> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 46 [1/1] (1.39ns)   --->   "%shift_V = sub i8 1, %new_exp_V" [test.cpp:117]   --->   Operation 46 'sub' 'shift_V' <Predicate = (!tmp_1)> <Delay = 1.39> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 47 [1/1] (1.39ns)   --->   "%shift_V_1 = add i8 -1, %new_exp_V" [test.cpp:119]   --->   Operation 47 'add' 'shift_V_1' <Predicate = (!tmp_1)> <Delay = 1.39> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 48 [1/1] (0.00ns) (grouped into LUT with out node shift_V_3)   --->   "%sel_tmp3_demorgan = or i1 %tmp_4, %tmp_5" [test.cpp:112]   --->   Operation 48 'or' 'sel_tmp3_demorgan' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 49 [1/1] (0.00ns) (grouped into LUT with out node shift_V_3)   --->   "%sel_tmp3 = xor i1 %sel_tmp3_demorgan, true" [test.cpp:112]   --->   Operation 49 'xor' 'sel_tmp3' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 50 [1/1] (0.00ns) (grouped into LUT with out node shift_V_3)   --->   "%sel_tmp4 = and i1 %icmp, %sel_tmp3" [test.cpp:116]   --->   Operation 50 'and' 'sel_tmp4' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 51 [1/1] (0.00ns) (grouped into LUT with out node shift_V_3)   --->   "%shift_V_2 = select i1 %sel_tmp4, i8 %shift_V, i8 %shift_V_1" [test.cpp:116]   --->   Operation 51 'select' 'shift_V_2' <Predicate = (!tmp_1)> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 52 [1/1] (0.74ns) (out node of the LUT)   --->   "%shift_V_3 = select i1 %tmp_4, i8 0, i8 %shift_V_2" [test.cpp:112]   --->   Operation 52 'select' 'shift_V_3' <Predicate = (!tmp_1)> <Delay = 0.74> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>

State 3 <SV = 2> <Delay = 0.74>
ST_3 : Operation 53 [1/1] (0.00ns) (grouped into LUT with out node shift_V_4)   --->   "%sel_tmp7 = xor i1 %tmp_4, true" [test.cpp:112]   --->   Operation 53 'xor' 'sel_tmp7' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 54 [1/1] (0.00ns) (grouped into LUT with out node shift_V_4)   --->   "%sel_tmp8 = and i1 %tmp_5, %sel_tmp7" [test.cpp:115]   --->   Operation 54 'and' 'sel_tmp8' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 55 [1/1] (0.74ns) (out node of the LUT)   --->   "%shift_V_4 = select i1 %sel_tmp8, i8 %shift_V_cast_cast, i8 %shift_V_3" [test.cpp:115]   --->   Operation 55 'select' 'shift_V_4' <Predicate = true> <Delay = 0.74> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 56 [1/1] (0.00ns)   --->   "%tmp_9 = call i24 @_ssdm_op_BitConcatenate.i24.i1.i23(i1 true, i23 %new_mant_V)" [test.cpp:123]   --->   Operation 56 'bitconcatenate' 'tmp_9' <Predicate = (!tmp_4)> <Delay = 0.00>
ST_3 : Operation 57 [1/1] (0.66ns)   --->   "%xf_V_1 = select i1 %tmp_4, i24 %xf_V_3_cast, i24 %tmp_9" [test.cpp:112]   --->   Operation 57 'select' 'xf_V_1' <Predicate = true> <Delay = 0.66> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>

State 4 <SV = 3> <Delay = 1.94>
ST_4 : Operation 58 [1/1] (0.00ns)   --->   "%tmp_s = zext i24 %xf_V_1 to i32" [test.cpp:125]   --->   Operation 58 'zext' 'tmp_s' <Predicate = (!icmp)> <Delay = 0.00>
ST_4 : Operation 59 [1/1] (0.00ns)   --->   "%tmp_3 = zext i8 %shift_V_4 to i32" [test.cpp:125]   --->   Operation 59 'zext' 'tmp_3' <Predicate = (!icmp)> <Delay = 0.00>
ST_4 : Operation 60 [1/1] (0.00ns)   --->   "%tmp_3_cast = zext i8 %shift_V_4 to i24" [test.cpp:125]   --->   Operation 60 'zext' 'tmp_3_cast' <Predicate = (icmp)> <Delay = 0.00>
ST_4 : Operation 61 [4/4] (1.94ns)   --->   "%tmp_7 = lshr i24 %xf_V_1, %tmp_3_cast" [test.cpp:125]   --->   Operation 61 'lshr' 'tmp_7' <Predicate = (icmp)> <Delay = 1.94> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.94> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 62 [4/4] (1.94ns)   --->   "%tmp_6 = shl i32 %tmp_s, %tmp_3" [test.cpp:127]   --->   Operation 62 'shl' 'tmp_6' <Predicate = (!icmp)> <Delay = 1.94> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.94> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>

State 5 <SV = 4> <Delay = 1.94>
ST_5 : Operation 63 [3/4] (1.94ns)   --->   "%tmp_7 = lshr i24 %xf_V_1, %tmp_3_cast" [test.cpp:125]   --->   Operation 63 'lshr' 'tmp_7' <Predicate = (icmp)> <Delay = 1.94> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.94> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 64 [3/4] (1.94ns)   --->   "%tmp_6 = shl i32 %tmp_s, %tmp_3" [test.cpp:127]   --->   Operation 64 'shl' 'tmp_6' <Predicate = (!icmp)> <Delay = 1.94> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.94> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>

State 6 <SV = 5> <Delay = 1.94>
ST_6 : Operation 65 [2/4] (1.94ns)   --->   "%tmp_7 = lshr i24 %xf_V_1, %tmp_3_cast" [test.cpp:125]   --->   Operation 65 'lshr' 'tmp_7' <Predicate = (icmp)> <Delay = 1.94> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.94> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 66 [2/4] (1.94ns)   --->   "%tmp_6 = shl i32 %tmp_s, %tmp_3" [test.cpp:127]   --->   Operation 66 'shl' 'tmp_6' <Predicate = (!icmp)> <Delay = 1.94> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.94> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>

State 7 <SV = 6> <Delay = 1.94>
ST_7 : Operation 67 [1/4] (1.94ns)   --->   "%tmp_7 = lshr i24 %xf_V_1, %tmp_3_cast" [test.cpp:125]   --->   Operation 67 'lshr' 'tmp_7' <Predicate = (icmp)> <Delay = 1.94> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.94> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 68 [1/4] (1.94ns)   --->   "%tmp_6 = shl i32 %tmp_s, %tmp_3" [test.cpp:127]   --->   Operation 68 'shl' 'tmp_6' <Predicate = (!icmp)> <Delay = 1.94> <Core = "ShiftnS">   --->   Core 29 'ShiftnS' <Latency = 3> <II = 1> <Delay = 1.94> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>

State 8 <SV = 7> <Delay = 1.67>
ST_8 : Operation 69 [1/1] (0.00ns) (grouped into LUT with out node xf_V)   --->   "%tmp_10 = zext i24 %tmp_7 to i26" [test.cpp:125]   --->   Operation 69 'zext' 'tmp_10' <Predicate = (icmp)> <Delay = 0.00>
ST_8 : Operation 70 [1/1] (0.00ns) (grouped into LUT with out node xf_V)   --->   "%tmp_13 = trunc i32 %tmp_6 to i26" [test.cpp:127]   --->   Operation 70 'trunc' 'tmp_13' <Predicate = (!icmp)> <Delay = 0.00>
ST_8 : Operation 71 [1/1] (0.00ns) (grouped into LUT with out node xf_V)   --->   "%xf_V_2 = select i1 %icmp, i26 %tmp_10, i26 %tmp_13" [test.cpp:116]   --->   Operation 71 'select' 'xf_V_2' <Predicate = true> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_8 : Operation 72 [1/1] (1.67ns) (out node of the LUT)   --->   "%xf_V = add i26 1, %xf_V_2" [test.cpp:128]   --->   Operation 72 'add' 'xf_V' <Predicate = true> <Delay = 1.67> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 73 [1/1] (0.00ns)   --->   "%p_Result_i_i = call i2 @_ssdm_op_PartSelect.i2.i26.i32.i32(i26 %xf_V, i32 24, i32 25) nounwind" [test.cpp:57->test.cpp:72->test.cpp:129]   --->   Operation 73 'partselect' 'p_Result_i_i' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 74 [1/1] (0.00ns)   --->   "%p_Result_25_i_i = call i4 @_ssdm_op_PartSelect.i4.i26.i32.i32(i26 %xf_V, i32 20, i32 23) nounwind" [test.cpp:63->test.cpp:72->test.cpp:129]   --->   Operation 74 'partselect' 'p_Result_25_i_i' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 75 [1/1] (0.00ns)   --->   "%p_Result_25_1_i_i = call i4 @_ssdm_op_PartSelect.i4.i26.i32.i32(i26 %xf_V, i32 16, i32 19) nounwind" [test.cpp:63->test.cpp:72->test.cpp:129]   --->   Operation 75 'partselect' 'p_Result_25_1_i_i' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 76 [1/1] (0.00ns)   --->   "%p_Result_25_2_i_i = call i4 @_ssdm_op_PartSelect.i4.i26.i32.i32(i26 %xf_V, i32 12, i32 15) nounwind" [test.cpp:63->test.cpp:72->test.cpp:129]   --->   Operation 76 'partselect' 'p_Result_25_2_i_i' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 77 [1/1] (0.00ns)   --->   "%p_Result_25_3_i_i = call i4 @_ssdm_op_PartSelect.i4.i26.i32.i32(i26 %xf_V, i32 8, i32 11) nounwind" [test.cpp:63->test.cpp:72->test.cpp:129]   --->   Operation 77 'partselect' 'p_Result_25_3_i_i' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 78 [1/1] (0.00ns)   --->   "%p_Result_25_4_i_i = call i4 @_ssdm_op_PartSelect.i4.i26.i32.i32(i26 %xf_V, i32 4, i32 7) nounwind" [test.cpp:63->test.cpp:72->test.cpp:129]   --->   Operation 78 'partselect' 'p_Result_25_4_i_i' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 79 [1/1] (0.00ns)   --->   "%tmp_14 = trunc i26 %xf_V to i4" [test.cpp:63->test.cpp:72->test.cpp:129]   --->   Operation 79 'trunc' 'tmp_14' <Predicate = true> <Delay = 0.00>

State 9 <SV = 8> <Delay = 1.36>
ST_9 : Operation 80 [1/1] (0.00ns)   --->   "%d_chunk_V = zext i2 %p_Result_i_i to i4" [test.cpp:57->test.cpp:72->test.cpp:129]   --->   Operation 80 'zext' 'd_chunk_V' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 81 [2/2] (1.36ns)   --->   "%call_ret1_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V, i2 0) nounwind" [test.cpp:58->test.cpp:72->test.cpp:129]   --->   Operation 81 'call' 'call_ret1_i_i' <Predicate = true> <Delay = 1.36> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 10 <SV = 9> <Delay = 1.33>
ST_10 : Operation 82 [1/2] (1.33ns)   --->   "%call_ret1_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %d_chunk_V, i2 0) nounwind" [test.cpp:58->test.cpp:72->test.cpp:129]   --->   Operation 82 'call' 'call_ret1_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_10 : Operation 83 [1/1] (0.00ns)   --->   "%r_V = extractvalue { i4, i2 } %call_ret1_i_i, 1" [test.cpp:58->test.cpp:72->test.cpp:129]   --->   Operation 83 'extractvalue' 'r_V' <Predicate = true> <Delay = 0.00>

State 11 <SV = 10> <Delay = 1.36>
ST_11 : Operation 84 [2/2] (1.36ns)   --->   "%call_ret2_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_25_i_i, i2 %r_V) nounwind" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 84 'call' 'call_ret2_i_i' <Predicate = true> <Delay = 1.36> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 12 <SV = 11> <Delay = 1.33>
ST_12 : Operation 85 [1/2] (1.33ns)   --->   "%call_ret2_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_25_i_i, i2 %r_V) nounwind" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 85 'call' 'call_ret2_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_12 : Operation 86 [1/1] (0.00ns)   --->   "%q_chunk_V = extractvalue { i4, i2 } %call_ret2_i_i, 0" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 86 'extractvalue' 'q_chunk_V' <Predicate = true> <Delay = 0.00>
ST_12 : Operation 87 [1/1] (0.00ns)   --->   "%r_V_1 = extractvalue { i4, i2 } %call_ret2_i_i, 1" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 87 'extractvalue' 'r_V_1' <Predicate = true> <Delay = 0.00>
ST_12 : Operation 88 [1/1] (0.00ns)   --->   "%tmp_15 = trunc i4 %q_chunk_V to i3" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 88 'trunc' 'tmp_15' <Predicate = true> <Delay = 0.00>

State 13 <SV = 12> <Delay = 1.36>
ST_13 : Operation 89 [2/2] (1.36ns)   --->   "%call_ret3_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_25_1_i_i, i2 %r_V_1) nounwind" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 89 'call' 'call_ret3_i_i' <Predicate = true> <Delay = 1.36> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 14 <SV = 13> <Delay = 1.33>
ST_14 : Operation 90 [1/2] (1.33ns)   --->   "%call_ret3_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_25_1_i_i, i2 %r_V_1) nounwind" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 90 'call' 'call_ret3_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_14 : Operation 91 [1/1] (0.00ns)   --->   "%q_chunk_V_1 = extractvalue { i4, i2 } %call_ret3_i_i, 0" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 91 'extractvalue' 'q_chunk_V_1' <Predicate = true> <Delay = 0.00>
ST_14 : Operation 92 [1/1] (0.00ns)   --->   "%r_V_2 = extractvalue { i4, i2 } %call_ret3_i_i, 1" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 92 'extractvalue' 'r_V_2' <Predicate = true> <Delay = 0.00>

State 15 <SV = 14> <Delay = 1.36>
ST_15 : Operation 93 [2/2] (1.36ns)   --->   "%call_ret4_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_25_2_i_i, i2 %r_V_2) nounwind" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 93 'call' 'call_ret4_i_i' <Predicate = true> <Delay = 1.36> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 16 <SV = 15> <Delay = 1.33>
ST_16 : Operation 94 [1/2] (1.33ns)   --->   "%call_ret4_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_25_2_i_i, i2 %r_V_2) nounwind" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 94 'call' 'call_ret4_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_16 : Operation 95 [1/1] (0.00ns)   --->   "%q_chunk_V_2 = extractvalue { i4, i2 } %call_ret4_i_i, 0" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 95 'extractvalue' 'q_chunk_V_2' <Predicate = true> <Delay = 0.00>
ST_16 : Operation 96 [1/1] (0.00ns)   --->   "%r_V_3 = extractvalue { i4, i2 } %call_ret4_i_i, 1" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 96 'extractvalue' 'r_V_3' <Predicate = true> <Delay = 0.00>

State 17 <SV = 16> <Delay = 1.36>
ST_17 : Operation 97 [2/2] (1.36ns)   --->   "%call_ret5_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_25_3_i_i, i2 %r_V_3) nounwind" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 97 'call' 'call_ret5_i_i' <Predicate = true> <Delay = 1.36> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 18 <SV = 17> <Delay = 1.33>
ST_18 : Operation 98 [1/2] (1.33ns)   --->   "%call_ret5_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_25_3_i_i, i2 %r_V_3) nounwind" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 98 'call' 'call_ret5_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_18 : Operation 99 [1/1] (0.00ns)   --->   "%q_chunk_V_3 = extractvalue { i4, i2 } %call_ret5_i_i, 0" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 99 'extractvalue' 'q_chunk_V_3' <Predicate = true> <Delay = 0.00>
ST_18 : Operation 100 [1/1] (0.00ns)   --->   "%r_V_4 = extractvalue { i4, i2 } %call_ret5_i_i, 1" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 100 'extractvalue' 'r_V_4' <Predicate = true> <Delay = 0.00>

State 19 <SV = 18> <Delay = 1.36>
ST_19 : Operation 101 [2/2] (1.36ns)   --->   "%call_ret6_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_25_4_i_i, i2 %r_V_4) nounwind" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 101 'call' 'call_ret6_i_i' <Predicate = true> <Delay = 1.36> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 20 <SV = 19> <Delay = 1.33>
ST_20 : Operation 102 [1/2] (1.33ns)   --->   "%call_ret6_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %p_Result_25_4_i_i, i2 %r_V_4) nounwind" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 102 'call' 'call_ret6_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_20 : Operation 103 [1/1] (0.00ns)   --->   "%q_chunk_V_4 = extractvalue { i4, i2 } %call_ret6_i_i, 0" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 103 'extractvalue' 'q_chunk_V_4' <Predicate = true> <Delay = 0.00>
ST_20 : Operation 104 [1/1] (0.00ns)   --->   "%r_V_5 = extractvalue { i4, i2 } %call_ret6_i_i, 1" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 104 'extractvalue' 'r_V_5' <Predicate = true> <Delay = 0.00>

State 21 <SV = 20> <Delay = 1.36>
ST_21 : Operation 105 [2/2] (1.36ns)   --->   "%call_ret_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %tmp_14, i2 %r_V_5) nounwind" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 105 'call' 'call_ret_i_i' <Predicate = true> <Delay = 1.36> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 22 <SV = 21> <Delay = 1.33>
ST_22 : Operation 106 [1/2] (1.33ns)   --->   "%call_ret_i_i = call fastcc { i4, i2 } @lut_div3_chunk(i4 %tmp_14, i2 %r_V_5) nounwind" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 106 'call' 'call_ret_i_i' <Predicate = true> <Delay = 1.33> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_22 : Operation 107 [1/1] (0.00ns)   --->   "%q_chunk_V_5 = extractvalue { i4, i2 } %call_ret_i_i, 0" [test.cpp:64->test.cpp:72->test.cpp:129]   --->   Operation 107 'extractvalue' 'q_chunk_V_5' <Predicate = true> <Delay = 0.00>

State 23 <SV = 22> <Delay = 1.06>
ST_23 : Operation 108 [1/1] (0.00ns)   --->   "%new_mant_V_1 = call i23 @_ssdm_op_BitConcatenate.i23.i3.i4.i4.i4.i4.i4(i3 %tmp_15, i4 %q_chunk_V_1, i4 %q_chunk_V_2, i4 %q_chunk_V_3, i4 %q_chunk_V_4, i4 %q_chunk_V_5)" [test.cpp:129]   --->   Operation 108 'bitconcatenate' 'new_mant_V_1' <Predicate = (!tmp_1)> <Delay = 0.00>
ST_23 : Operation 109 [1/1] (1.06ns)   --->   "br label %._crit_edge416" [test.cpp:130]   --->   Operation 109 'br' <Predicate = (!tmp_1)> <Delay = 1.06>
ST_23 : Operation 110 [1/1] (0.00ns)   --->   "%p_Repl2_s = phi i23 [ %new_mant_V_1, %_ifconv1 ], [ %new_mant_V, %_ifconv ]"   --->   Operation 110 'phi' 'p_Repl2_s' <Predicate = true> <Delay = 0.00>
ST_23 : Operation 111 [1/1] (0.00ns)   --->   "%p_Result_s = call i32 @_ssdm_op_BitConcatenate.i32.i1.i8.i23(i1 %p_Repl2_2, i8 %p_Repl2_1, i23 %p_Repl2_s) nounwind" [test.cpp:81->test.cpp:131]   --->   Operation 111 'bitconcatenate' 'p_Result_s' <Predicate = true> <Delay = 0.00>
ST_23 : Operation 112 [1/1] (0.00ns)   --->   "%out = bitcast i32 %p_Result_s to float" [test.cpp:82->test.cpp:131]   --->   Operation 112 'bitcast' 'out' <Predicate = true> <Delay = 0.00>
ST_23 : Operation 113 [1/1] (0.00ns)   --->   "ret float %out" [test.cpp:132]   --->   Operation 113 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 2.5ns, clock uncertainty: 0.312ns.

 <State 1>: 1.22ns
The critical path consists of the following:
	wire read on port 'in_r' [11]  (0 ns)
	'icmp' operation ('tmp_1', test.cpp:106) [19]  (1.22 ns)

 <State 2>: 2.13ns
The critical path consists of the following:
	'sub' operation ('new_exp.V', test.cpp:110) [21]  (1.39 ns)
	'select' operation ('__Repl2__', test.cpp:80->test.cpp:131) [24]  (0.74 ns)

 <State 3>: 0.74ns
The critical path consists of the following:
	'xor' operation ('sel_tmp7', test.cpp:112) [38]  (0 ns)
	'and' operation ('sel_tmp8', test.cpp:115) [39]  (0 ns)
	'select' operation ('shift.V', test.cpp:115) [40]  (0.74 ns)

 <State 4>: 1.95ns
The critical path consists of the following:
	'shl' operation ('tmp_6', test.cpp:127) [47]  (1.95 ns)

 <State 5>: 1.95ns
The critical path consists of the following:
	'lshr' operation ('tmp_7', test.cpp:125) [46]  (1.95 ns)

 <State 6>: 1.95ns
The critical path consists of the following:
	'lshr' operation ('tmp_7', test.cpp:125) [46]  (1.95 ns)

 <State 7>: 1.95ns
The critical path consists of the following:
	'lshr' operation ('tmp_7', test.cpp:125) [46]  (1.95 ns)

 <State 8>: 1.67ns
The critical path consists of the following:
	'select' operation ('xf.V', test.cpp:116) [50]  (0 ns)
	'add' operation ('xf.V', test.cpp:128) [51]  (1.67 ns)

 <State 9>: 1.36ns
The critical path consists of the following:
	'call' operation ('call_ret1_i_i', test.cpp:58->test.cpp:72->test.cpp:129) to 'lut_div3_chunk' [54]  (1.36 ns)

 <State 10>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret1_i_i', test.cpp:58->test.cpp:72->test.cpp:129) to 'lut_div3_chunk' [54]  (1.33 ns)

 <State 11>: 1.36ns
The critical path consists of the following:
	'call' operation ('call_ret2_i_i', test.cpp:64->test.cpp:72->test.cpp:129) to 'lut_div3_chunk' [57]  (1.36 ns)

 <State 12>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret2_i_i', test.cpp:64->test.cpp:72->test.cpp:129) to 'lut_div3_chunk' [57]  (1.33 ns)

 <State 13>: 1.36ns
The critical path consists of the following:
	'call' operation ('call_ret3_i_i', test.cpp:64->test.cpp:72->test.cpp:129) to 'lut_div3_chunk' [61]  (1.36 ns)

 <State 14>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret3_i_i', test.cpp:64->test.cpp:72->test.cpp:129) to 'lut_div3_chunk' [61]  (1.33 ns)

 <State 15>: 1.36ns
The critical path consists of the following:
	'call' operation ('call_ret4_i_i', test.cpp:64->test.cpp:72->test.cpp:129) to 'lut_div3_chunk' [65]  (1.36 ns)

 <State 16>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret4_i_i', test.cpp:64->test.cpp:72->test.cpp:129) to 'lut_div3_chunk' [65]  (1.33 ns)

 <State 17>: 1.36ns
The critical path consists of the following:
	'call' operation ('call_ret5_i_i', test.cpp:64->test.cpp:72->test.cpp:129) to 'lut_div3_chunk' [69]  (1.36 ns)

 <State 18>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret5_i_i', test.cpp:64->test.cpp:72->test.cpp:129) to 'lut_div3_chunk' [69]  (1.33 ns)

 <State 19>: 1.36ns
The critical path consists of the following:
	'call' operation ('call_ret6_i_i', test.cpp:64->test.cpp:72->test.cpp:129) to 'lut_div3_chunk' [73]  (1.36 ns)

 <State 20>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret6_i_i', test.cpp:64->test.cpp:72->test.cpp:129) to 'lut_div3_chunk' [73]  (1.33 ns)

 <State 21>: 1.36ns
The critical path consists of the following:
	'call' operation ('call_ret_i_i', test.cpp:64->test.cpp:72->test.cpp:129) to 'lut_div3_chunk' [77]  (1.36 ns)

 <State 22>: 1.33ns
The critical path consists of the following:
	'call' operation ('call_ret_i_i', test.cpp:64->test.cpp:72->test.cpp:129) to 'lut_div3_chunk' [77]  (1.33 ns)

 <State 23>: 1.06ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('mant.V') with incoming values : ('ssdm_int<23 + 1024 * 0, false>.V', test.cpp:26->test.cpp:98) ('new_mant.V', test.cpp:129) [83]  (1.06 ns)
	'phi' operation ('mant.V') with incoming values : ('ssdm_int<23 + 1024 * 0, false>.V', test.cpp:26->test.cpp:98) ('new_mant.V', test.cpp:129) [83]  (0 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
