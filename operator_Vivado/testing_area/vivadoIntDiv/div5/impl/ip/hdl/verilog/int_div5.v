// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="int_div5,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.000703,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=498,HLS_SYN_LUT=244,HLS_VERSION=2018_2}" *)

module int_div5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a,
        ap_return
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] a;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] tmp_4_reg_104;
wire   [64:0] grp_fu_36_p2;
reg   [64:0] mul_reg_110;
wire    ap_CS_fsm_state7;
reg   [29:0] tmp_6_reg_115;
wire   [64:0] neg_mul_fu_60_p2;
reg   [64:0] neg_mul_reg_120;
wire    ap_CS_fsm_state8;
wire  signed [31:0] tmp_2_fu_78_p1;
reg  signed [31:0] tmp_2_reg_125;
wire    ap_CS_fsm_state9;
wire   [31:0] neg_ti_fu_88_p2;
reg   [31:0] neg_ti_reg_130;
wire   [33:0] grp_fu_36_p1;
wire  signed [31:0] tmp_4_fu_42_p1;
wire   [29:0] tmp_5_fu_65_p4;
wire  signed [31:0] tmp_1_fu_74_p1;
wire   [31:0] tmp_3_fu_81_p3;
wire    ap_CS_fsm_state10;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

int_div5_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
int_div5_mul_32s_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a),
    .din1(grp_fu_36_p1),
    .ce(1'b1),
    .dout(grp_fu_36_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_reg_110 <= grp_fu_36_p2;
        tmp_6_reg_115 <= {{grp_fu_36_p2[64:35]}};
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_reg_104 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        neg_mul_reg_120 <= neg_mul_fu_60_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_reg_104 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        neg_ti_reg_130 <= neg_ti_fu_88_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_2_reg_125 <= tmp_2_fu_78_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_4_reg_104 <= tmp_4_fu_42_p1[32'd31];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = ((tmp_4_reg_104[0:0] === 1'b1) ? neg_ti_reg_130 : tmp_2_reg_125);

assign grp_fu_36_p1 = 65'd6871947674;

assign neg_mul_fu_60_p2 = (65'd0 - mul_reg_110);

assign neg_ti_fu_88_p2 = (32'd0 - tmp_3_fu_81_p3);

assign tmp_1_fu_74_p1 = $signed(tmp_5_fu_65_p4);

assign tmp_2_fu_78_p1 = $signed(tmp_6_reg_115);

assign tmp_3_fu_81_p3 = ((tmp_4_reg_104[0:0] === 1'b1) ? tmp_1_fu_74_p1 : tmp_2_fu_78_p1);

assign tmp_4_fu_42_p1 = a;

assign tmp_5_fu_65_p4 = {{neg_mul_reg_120[64:35]}};

endmodule //int_div5
