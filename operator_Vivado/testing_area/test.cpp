#include <ap_int.h>

void lut_div3_chunk(ap_uint<4> d, ap_uint<2> r_in, ap_uint<4> (* q), ap_uint<2> (* r_out));
/* int_32_div3 implements a division by 3 of the integer 32 bits in, optimized for Vivado HLS */
ap_uint<32> int_32_div3(ap_uint<32> in);
/* operator_int_32_div3 implements a division by 3 of the integer 32 bits in, optimized for Vivado HLS */
ap_uint<32> operator_int_32_div3(ap_uint<32> in);
int operator_int_div3(int in);


void lut_div3_chunk(ap_uint<4> d, ap_uint<2> r_in, ap_uint<4> (* q), ap_uint<2> (* r_out)) {
	ap_uint<6> in;
	ap_uint<1> r0[64] = {0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0};
	ap_uint<1> r1[64] = {0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0};
	ap_uint<1> q0[64] = {0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1};
	ap_uint<1> q1[64] = {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0};
	ap_uint<1> q2[64] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1};
	ap_uint<1> q3[64] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	
	in = r_in.concat(d);
	(*r_out)[0] = r0[in];
	(*r_out)[1] = r1[in];
	(*q)[0] = q0[in];
	(*q)[1] = q1[in];
	(*q)[2] = q2[in];
	(*q)[3] = q3[in];
}

ap_uint<32> int_32_div3(ap_uint<32> d) {
	#pragma HLS LATENCY max=1
	ap_uint<32> q;
	ap_uint<4> d_chunk;
	ap_uint<4> q_chunk;
	ap_uint<2> r;

	ap_uint<6> in;
	ap_uint<6> in2;
	ap_uint<1> r0[64] = {0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0};
	ap_uint<1> r1[64] = {0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0};
	ap_uint<1> q0[64] = {0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1};
	ap_uint<1> q1[64] = {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0};
	ap_uint<1> q2[64] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1};
	ap_uint<1> q3[64] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	
	
	{
		#pragma HLS LATENCY max=1
		in = d.range(31,28);
		q[31] = q3[in];
		q[30] = q2[in];
		q[29] = q1[in];
		q[28] = q0[in];
		r[1] = r1[in];
		r[0] = r0[in];
		
		//in[5] = r[1];
		//in[4] = r[0];
		//in.range(3,0) = d.range(27,24);
		d_chunk = d.range(27,24);
		
		q[27] = q3[r.concat(d_chunk)];
		q[26] = q2[r.concat(d_chunk)];
		q[25] = q1[r.concat(d_chunk)];
		q[24] = q0[r.concat(d_chunk)];
		r[1] = r1[r.concat(d_chunk)];
		r[0] = r0[r.concat(d_chunk)];
	}
	/*in[5] = r[1];
	in[4] = r[0];
	in.range(3,0) = d.range(23,20);
	q[23] = q3[in];
	q[22] = q2[in];
	q[21] = q1[in];
	q[20] = q0[in];
	r[1] = r1[in];
	r[0] = r0[in];

	in[5] = r[1];
	in[4] = r[0];
	in.range(3,0) = d.range(19,16);
	q[19] = q3[in];
	q[18] = q2[in];
	q[17] = q1[in];
	q[16] = q0[in];
	r[1] = r1[in];
	r[0] = r0[in];

	in[5] = r[1];
	in[4] = r[0];
	in.range(3,0) = d.range(15,12);
	q[15] = q3[in];
	q[14] = q2[in];
	q[13] = q1[in];
	q[12] = q0[in];
	r[1] = r1[in];
	r[0] = r0[in];

	in[5] = r[1];
	in[4] = r[0];
	in.range(3,0) = d.range(11,8);
	q[11] = q3[in];
	q[10] = q2[in];
	q[9] = q1[in];
	q[8] = q0[in];
	r[1] = r1[in];
	r[0] = r0[in];

	in[5] = r[1];
	in[4] = r[0];
	in.range(3,0) = d.range(7,4);
	q[7] = q3[in];
	q[6] = q2[in];
	q[5] = q1[in];
	q[4] = q0[in];
	r[1] = r1[in];
	r[0] = r0[in];

	in[5] = r[1];
	in[4] = r[0];
	in.range(3,0) = d.range(3,0);
	q[3] = q3[in];
	q[2] = q2[in];
	q[1] = q1[in];
	q[0] = q0[in];*/
	
	return q;
}

ap_uint<32> operator_int_32_div3(ap_uint<32> in) {
	return int_32_div3(in);
}

int operator_int_div3(int in) {
	return operator_int_32_div3(in);
}

