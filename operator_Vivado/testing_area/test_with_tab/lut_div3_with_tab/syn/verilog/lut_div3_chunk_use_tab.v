// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lut_div3_chunk_use_tab,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=12.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.664000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=8,HLS_SYN_LUT=21,HLS_VERSION=2018_2}" *)

module lut_div3_chunk_use_tab (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        d_V,
        r_in_V,
        q_V,
        q_V_ap_vld,
        r_out_V,
        r_out_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] d_V;
input  [1:0] r_in_V;
output  [3:0] q_V;
output   q_V_ap_vld;
output  [1:0] r_out_V;
output   r_out_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg q_V_ap_vld;
reg r_out_V_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] r0_address0;
reg    r0_ce0;
wire   [0:0] r0_q0;
wire   [5:0] r1_address0;
reg    r1_ce0;
wire   [0:0] r1_q0;
wire   [5:0] q0_address0;
reg    q0_ce0;
wire   [0:0] q0_q0;
wire   [5:0] q1_address0;
reg    q1_ce0;
wire   [0:0] q1_q0;
wire   [5:0] q2_address0;
reg    q2_ce0;
wire   [0:0] q2_q0;
wire   [5:0] q3_address0;
reg    q3_ce0;
wire   [0:0] q3_q0;
wire   [63:0] tmp_fu_154_p1;
wire    ap_CS_fsm_state2;
wire   [5:0] p_Result_3_fu_146_p3;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

lut_div3_chunk_usbkb #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
r0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(r0_address0),
    .ce0(r0_ce0),
    .q0(r0_q0)
);

lut_div3_chunk_uscud #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
r1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(r1_address0),
    .ce0(r1_ce0),
    .q0(r1_q0)
);

lut_div3_chunk_usdEe #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q0_address0),
    .ce0(q0_ce0),
    .q0(q0_q0)
);

lut_div3_chunk_useOg #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q1_address0),
    .ce0(q1_ce0),
    .q0(q1_q0)
);

lut_div3_chunk_usfYi #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q2_address0),
    .ce0(q2_ce0),
    .q0(q2_q0)
);

lut_div3_chunk_usg8j #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
q3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q3_address0),
    .ce0(q3_ce0),
    .q0(q3_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        q0_ce0 = 1'b1;
    end else begin
        q0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        q1_ce0 = 1'b1;
    end else begin
        q1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        q2_ce0 = 1'b1;
    end else begin
        q2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        q3_ce0 = 1'b1;
    end else begin
        q3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        q_V_ap_vld = 1'b1;
    end else begin
        q_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r0_ce0 = 1'b1;
    end else begin
        r0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r1_ce0 = 1'b1;
    end else begin
        r1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_out_V_ap_vld = 1'b1;
    end else begin
        r_out_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign p_Result_3_fu_146_p3 = {{r_in_V}, {d_V}};

assign q0_address0 = tmp_fu_154_p1;

assign q1_address0 = tmp_fu_154_p1;

assign q2_address0 = tmp_fu_154_p1;

assign q3_address0 = tmp_fu_154_p1;

assign q_V = {{{{q3_q0}, {q2_q0}}, {q1_q0}}, {q0_q0}};

assign r0_address0 = tmp_fu_154_p1;

assign r1_address0 = tmp_fu_154_p1;

assign r_out_V = {{r1_q0}, {r0_q0}};

assign tmp_fu_154_p1 = p_Result_3_fu_146_p3;

endmodule //lut_div3_chunk_use_tab
