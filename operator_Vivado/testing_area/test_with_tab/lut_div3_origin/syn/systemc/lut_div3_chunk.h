// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _lut_div3_chunk_HH_
#define _lut_div3_chunk_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "lut_div3_chunk_mubkb.h"

namespace ap_rtl {

struct lut_div3_chunk : public sc_module {
    // Port declarations 10
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<4> > d_V;
    sc_in< sc_lv<2> > r_in_V;
    sc_out< sc_lv<4> > q_V;
    sc_out< sc_logic > q_V_ap_vld;
    sc_out< sc_lv<2> > r_out_V;
    sc_out< sc_logic > r_out_V_ap_vld;
    sc_signal< sc_lv<1> > ap_var_for_const0;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    // Port declarations for the virtual clock. 
    sc_in_clk ap_virtual_clock;


    // Module declarations
    lut_div3_chunk(sc_module_name name);
    SC_HAS_PROCESS(lut_div3_chunk);

    ~lut_div3_chunk();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    lut_div3_chunk_mubkb<1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,1>* lut_div3_chunk_mubkb_U1;
    lut_div3_chunk_mubkb<1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,1>* lut_div3_chunk_mubkb_U2;
    lut_div3_chunk_mubkb<1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,1>* lut_div3_chunk_mubkb_U3;
    lut_div3_chunk_mubkb<1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,1>* lut_div3_chunk_mubkb_U4;
    lut_div3_chunk_mubkb<1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,1>* lut_div3_chunk_mubkb_U5;
    lut_div3_chunk_mubkb<1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,1>* lut_div3_chunk_mubkb_U6;
    sc_signal< sc_lv<6> > p_Result_8_fu_60_p3;
    sc_signal< sc_lv<1> > agg_result_V_i7_fu_202_p66;
    sc_signal< sc_lv<1> > agg_result_V_i_fu_68_p66;
    sc_signal< sc_lv<1> > agg_result_V_i3_fu_747_p66;
    sc_signal< sc_lv<1> > agg_result_V_i2_fu_613_p66;
    sc_signal< sc_lv<1> > agg_result_V_i1_fu_479_p66;
    sc_signal< sc_lv<1> > agg_result_V_i9_fu_345_p66;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_p_Result_8_fu_60_p3();
    void thread_q_V();
    void thread_q_V_ap_vld();
    void thread_r_out_V();
    void thread_r_out_V_ap_vld();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
