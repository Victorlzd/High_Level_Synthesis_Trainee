// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "lut_mul3_chunk.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic lut_mul3_chunk::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic lut_mul3_chunk::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> lut_mul3_chunk::ap_ST_fsm_state1 = "1";
const sc_lv<2> lut_mul3_chunk::ap_ST_fsm_state2 = "10";
const sc_lv<32> lut_mul3_chunk::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> lut_mul3_chunk::ap_const_lv32_1 = "1";
const sc_lv<8> lut_mul3_chunk::ap_const_lv8_0 = "00000000";
const bool lut_mul3_chunk::ap_const_boolean_1 = true;

lut_mul3_chunk::lut_mul3_chunk(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mem_0_U = new lut_mul3_chunk_mebkb("mem_0_U");
    mem_0_U->clk(ap_clk);
    mem_0_U->reset(ap_rst);
    mem_0_U->address0(mem_0_address0);
    mem_0_U->ce0(mem_0_ce0);
    mem_0_U->q0(mem_0_q0);
    mem_1_U = new lut_mul3_chunk_mecud("mem_1_U");
    mem_1_U->clk(ap_clk);
    mem_1_U->reset(ap_rst);
    mem_1_U->address0(mem_1_address0);
    mem_1_U->ce0(mem_1_ce0);
    mem_1_U->q0(mem_1_q0);
    mem_2_U = new lut_mul3_chunk_medEe("mem_2_U");
    mem_2_U->clk(ap_clk);
    mem_2_U->reset(ap_rst);
    mem_2_U->address0(mem_2_address0);
    mem_2_U->ce0(mem_2_ce0);
    mem_2_U->q0(mem_2_q0);
    mem_3_U = new lut_mul3_chunk_meeOg("mem_3_U");
    mem_3_U->clk(ap_clk);
    mem_3_U->reset(ap_rst);
    mem_3_U->address0(mem_3_address0);
    mem_3_U->ce0(mem_3_ce0);
    mem_3_U->q0(mem_3_q0);
    mem_4_U = new lut_mul3_chunk_mefYi("mem_4_U");
    mem_4_U->clk(ap_clk);
    mem_4_U->reset(ap_rst);
    mem_4_U->address0(mem_4_address0);
    mem_4_U->ce0(mem_4_ce0);
    mem_4_U->q0(mem_4_q0);
    mem_5_U = new lut_mul3_chunk_meg8j("mem_5_U");
    mem_5_U->clk(ap_clk);
    mem_5_U->reset(ap_rst);
    mem_5_U->address0(mem_5_address0);
    mem_5_U->ce0(mem_5_ce0);
    mem_5_U->q0(mem_5_q0);
    mem_6_U = new lut_mul3_chunk_mehbi("mem_6_U");
    mem_6_U->clk(ap_clk);
    mem_6_U->reset(ap_rst);
    mem_6_U->address0(mem_6_address0);
    mem_6_U->ce0(mem_6_ce0);
    mem_6_U->q0(mem_6_q0);
    mem_7_U = new lut_mul3_chunk_meibs("mem_7_U");
    mem_7_U->clk(ap_clk);
    mem_7_U->reset(ap_rst);
    mem_7_U->address0(mem_7_address0);
    mem_7_U->ce0(mem_7_ce0);
    mem_7_U->q0(mem_7_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_Result_s_fu_146_p9 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_mem_0_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_134_p1 );

    SC_METHOD(thread_mem_0_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_mem_1_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_134_p1 );

    SC_METHOD(thread_mem_1_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_mem_2_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_134_p1 );

    SC_METHOD(thread_mem_2_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_mem_3_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_134_p1 );

    SC_METHOD(thread_mem_3_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_mem_4_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_134_p1 );

    SC_METHOD(thread_mem_4_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_mem_5_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_134_p1 );

    SC_METHOD(thread_mem_5_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_mem_6_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_134_p1 );

    SC_METHOD(thread_mem_6_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_mem_7_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_134_p1 );

    SC_METHOD(thread_mem_7_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_p_Result_s_fu_146_p9);
    sensitive << ( mem_0_q0 );
    sensitive << ( mem_1_q0 );
    sensitive << ( mem_2_q0 );
    sensitive << ( mem_3_q0 );
    sensitive << ( mem_4_q0 );
    sensitive << ( mem_5_q0 );
    sensitive << ( mem_6_q0 );
    sensitive << ( mem_7_q0 );

    SC_METHOD(thread_tmp_fu_134_p1);
    sensitive << ( in_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "01";
    ap_return_preg = "00000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "lut_mul3_chunk_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_V, "(port)in_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, mem_0_address0, "mem_0_address0");
    sc_trace(mVcdFile, mem_0_ce0, "mem_0_ce0");
    sc_trace(mVcdFile, mem_0_q0, "mem_0_q0");
    sc_trace(mVcdFile, mem_1_address0, "mem_1_address0");
    sc_trace(mVcdFile, mem_1_ce0, "mem_1_ce0");
    sc_trace(mVcdFile, mem_1_q0, "mem_1_q0");
    sc_trace(mVcdFile, mem_2_address0, "mem_2_address0");
    sc_trace(mVcdFile, mem_2_ce0, "mem_2_ce0");
    sc_trace(mVcdFile, mem_2_q0, "mem_2_q0");
    sc_trace(mVcdFile, mem_3_address0, "mem_3_address0");
    sc_trace(mVcdFile, mem_3_ce0, "mem_3_ce0");
    sc_trace(mVcdFile, mem_3_q0, "mem_3_q0");
    sc_trace(mVcdFile, mem_4_address0, "mem_4_address0");
    sc_trace(mVcdFile, mem_4_ce0, "mem_4_ce0");
    sc_trace(mVcdFile, mem_4_q0, "mem_4_q0");
    sc_trace(mVcdFile, mem_5_address0, "mem_5_address0");
    sc_trace(mVcdFile, mem_5_ce0, "mem_5_ce0");
    sc_trace(mVcdFile, mem_5_q0, "mem_5_q0");
    sc_trace(mVcdFile, mem_6_address0, "mem_6_address0");
    sc_trace(mVcdFile, mem_6_ce0, "mem_6_ce0");
    sc_trace(mVcdFile, mem_6_q0, "mem_6_q0");
    sc_trace(mVcdFile, mem_7_address0, "mem_7_address0");
    sc_trace(mVcdFile, mem_7_ce0, "mem_7_ce0");
    sc_trace(mVcdFile, mem_7_q0, "mem_7_q0");
    sc_trace(mVcdFile, tmp_fu_134_p1, "tmp_fu_134_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, p_Result_s_fu_146_p9, "p_Result_s_fu_146_p9");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

lut_mul3_chunk::~lut_mul3_chunk() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete mem_0_U;
    delete mem_1_U;
    delete mem_2_U;
    delete mem_3_U;
    delete mem_4_U;
    delete mem_5_U;
    delete mem_6_U;
    delete mem_7_U;
}

void lut_mul3_chunk::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_preg = p_Result_s_fu_146_p9.read();
        }
    }
}

void lut_mul3_chunk::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void lut_mul3_chunk::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void lut_mul3_chunk::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void lut_mul3_chunk::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void lut_mul3_chunk::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void lut_mul3_chunk::thread_ap_return() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return = p_Result_s_fu_146_p9.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void lut_mul3_chunk::thread_mem_0_address0() {
    mem_0_address0 =  (sc_lv<6>) (tmp_fu_134_p1.read());
}

void lut_mul3_chunk::thread_mem_0_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        mem_0_ce0 = ap_const_logic_1;
    } else {
        mem_0_ce0 = ap_const_logic_0;
    }
}

void lut_mul3_chunk::thread_mem_1_address0() {
    mem_1_address0 =  (sc_lv<6>) (tmp_fu_134_p1.read());
}

void lut_mul3_chunk::thread_mem_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        mem_1_ce0 = ap_const_logic_1;
    } else {
        mem_1_ce0 = ap_const_logic_0;
    }
}

void lut_mul3_chunk::thread_mem_2_address0() {
    mem_2_address0 =  (sc_lv<6>) (tmp_fu_134_p1.read());
}

void lut_mul3_chunk::thread_mem_2_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        mem_2_ce0 = ap_const_logic_1;
    } else {
        mem_2_ce0 = ap_const_logic_0;
    }
}

void lut_mul3_chunk::thread_mem_3_address0() {
    mem_3_address0 =  (sc_lv<6>) (tmp_fu_134_p1.read());
}

void lut_mul3_chunk::thread_mem_3_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        mem_3_ce0 = ap_const_logic_1;
    } else {
        mem_3_ce0 = ap_const_logic_0;
    }
}

void lut_mul3_chunk::thread_mem_4_address0() {
    mem_4_address0 =  (sc_lv<6>) (tmp_fu_134_p1.read());
}

void lut_mul3_chunk::thread_mem_4_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        mem_4_ce0 = ap_const_logic_1;
    } else {
        mem_4_ce0 = ap_const_logic_0;
    }
}

void lut_mul3_chunk::thread_mem_5_address0() {
    mem_5_address0 =  (sc_lv<6>) (tmp_fu_134_p1.read());
}

void lut_mul3_chunk::thread_mem_5_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        mem_5_ce0 = ap_const_logic_1;
    } else {
        mem_5_ce0 = ap_const_logic_0;
    }
}

void lut_mul3_chunk::thread_mem_6_address0() {
    mem_6_address0 =  (sc_lv<6>) (tmp_fu_134_p1.read());
}

void lut_mul3_chunk::thread_mem_6_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        mem_6_ce0 = ap_const_logic_1;
    } else {
        mem_6_ce0 = ap_const_logic_0;
    }
}

void lut_mul3_chunk::thread_mem_7_address0() {
    mem_7_address0 =  (sc_lv<6>) (tmp_fu_134_p1.read());
}

void lut_mul3_chunk::thread_mem_7_ce0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        mem_7_ce0 = ap_const_logic_1;
    } else {
        mem_7_ce0 = ap_const_logic_0;
    }
}

void lut_mul3_chunk::thread_p_Result_s_fu_146_p9() {
    p_Result_s_fu_146_p9 = esl_concat<7,1>(esl_concat<6,1>(esl_concat<5,1>(esl_concat<4,1>(esl_concat<3,1>(esl_concat<2,1>(esl_concat<1,1>(mem_7_q0.read(), mem_6_q0.read()), mem_5_q0.read()), mem_4_q0.read()), mem_3_q0.read()), mem_2_q0.read()), mem_1_q0.read()), mem_0_q0.read());
}

void lut_mul3_chunk::thread_tmp_fu_134_p1() {
    tmp_fu_134_p1 = esl_zext<64,6>(in_V.read());
}

void lut_mul3_chunk::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

