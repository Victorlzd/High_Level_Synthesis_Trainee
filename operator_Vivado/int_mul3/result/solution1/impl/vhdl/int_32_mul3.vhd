-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity int_32_mul3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of int_32_mul3 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "int_32_mul3,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.216000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=148,HLS_SYN_LUT=341,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal this_assign_fu_216_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal this_assign_reg_352 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_221_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_357 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_1_reg_362 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_2_reg_367 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_3_reg_372 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_4_reg_377 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_lut_mul3_chunk_fu_80_ap_start : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_80_ap_done : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_80_ap_idle : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_80_ap_ready : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_80_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_lut_mul3_chunk_fu_101_ap_start : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_101_ap_done : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_101_ap_idle : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_101_ap_ready : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_101_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_lut_mul3_chunk_fu_122_ap_start : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_122_ap_done : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_122_ap_idle : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_122_ap_ready : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_122_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_lut_mul3_chunk_fu_143_ap_start : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_143_ap_done : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_143_ap_idle : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_143_ap_ready : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_143_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_lut_mul3_chunk_fu_164_ap_start : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_164_ap_done : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_164_ap_idle : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_164_ap_ready : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_164_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_lut_mul3_chunk_fu_185_ap_start : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_185_ap_done : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_185_ap_idle : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_185_ap_ready : STD_LOGIC;
    signal grp_lut_mul3_chunk_fu_185_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_lut_mul3_chunk_fu_80_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_lut_mul3_chunk_fu_101_ap_start_reg : STD_LOGIC := '0';
    signal grp_lut_mul3_chunk_fu_122_ap_start_reg : STD_LOGIC := '0';
    signal grp_lut_mul3_chunk_fu_143_ap_start_reg : STD_LOGIC := '0';
    signal grp_lut_mul3_chunk_fu_164_ap_start_reg : STD_LOGIC := '0';
    signal grp_lut_mul3_chunk_fu_185_ap_start_reg : STD_LOGIC := '0';
    signal p_Result_s_fu_206_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_270_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_V_fu_284_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_1_fu_296_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_2_fu_308_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_4_fu_274_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_cast_fu_292_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_2_cast_fu_316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_fu_320_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_cast_fu_304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component lut_mul3_chunk IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_lut_mul3_chunk_fu_80 : component lut_mul3_chunk
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lut_mul3_chunk_fu_80_ap_start,
        ap_done => grp_lut_mul3_chunk_fu_80_ap_done,
        ap_idle => grp_lut_mul3_chunk_fu_80_ap_idle,
        ap_ready => grp_lut_mul3_chunk_fu_80_ap_ready,
        in_V => this_assign_reg_352,
        ap_return => grp_lut_mul3_chunk_fu_80_ap_return);

    grp_lut_mul3_chunk_fu_101 : component lut_mul3_chunk
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lut_mul3_chunk_fu_101_ap_start,
        ap_done => grp_lut_mul3_chunk_fu_101_ap_done,
        ap_idle => grp_lut_mul3_chunk_fu_101_ap_idle,
        ap_ready => grp_lut_mul3_chunk_fu_101_ap_ready,
        in_V => tmp_reg_357,
        ap_return => grp_lut_mul3_chunk_fu_101_ap_return);

    grp_lut_mul3_chunk_fu_122 : component lut_mul3_chunk
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lut_mul3_chunk_fu_122_ap_start,
        ap_done => grp_lut_mul3_chunk_fu_122_ap_done,
        ap_idle => grp_lut_mul3_chunk_fu_122_ap_idle,
        ap_ready => grp_lut_mul3_chunk_fu_122_ap_ready,
        in_V => p_Result_1_reg_362,
        ap_return => grp_lut_mul3_chunk_fu_122_ap_return);

    grp_lut_mul3_chunk_fu_143 : component lut_mul3_chunk
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lut_mul3_chunk_fu_143_ap_start,
        ap_done => grp_lut_mul3_chunk_fu_143_ap_done,
        ap_idle => grp_lut_mul3_chunk_fu_143_ap_idle,
        ap_ready => grp_lut_mul3_chunk_fu_143_ap_ready,
        in_V => p_Result_2_reg_367,
        ap_return => grp_lut_mul3_chunk_fu_143_ap_return);

    grp_lut_mul3_chunk_fu_164 : component lut_mul3_chunk
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lut_mul3_chunk_fu_164_ap_start,
        ap_done => grp_lut_mul3_chunk_fu_164_ap_done,
        ap_idle => grp_lut_mul3_chunk_fu_164_ap_idle,
        ap_ready => grp_lut_mul3_chunk_fu_164_ap_ready,
        in_V => p_Result_3_reg_372,
        ap_return => grp_lut_mul3_chunk_fu_164_ap_return);

    grp_lut_mul3_chunk_fu_185 : component lut_mul3_chunk
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lut_mul3_chunk_fu_185_ap_start,
        ap_done => grp_lut_mul3_chunk_fu_185_ap_done,
        ap_idle => grp_lut_mul3_chunk_fu_185_ap_idle,
        ap_ready => grp_lut_mul3_chunk_fu_185_ap_ready,
        in_V => p_Result_4_reg_377,
        ap_return => grp_lut_mul3_chunk_fu_185_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_lut_mul3_chunk_fu_101_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lut_mul3_chunk_fu_101_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_lut_mul3_chunk_fu_101_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lut_mul3_chunk_fu_101_ap_ready = ap_const_logic_1)) then 
                    grp_lut_mul3_chunk_fu_101_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_lut_mul3_chunk_fu_122_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lut_mul3_chunk_fu_122_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_lut_mul3_chunk_fu_122_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lut_mul3_chunk_fu_122_ap_ready = ap_const_logic_1)) then 
                    grp_lut_mul3_chunk_fu_122_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_lut_mul3_chunk_fu_143_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lut_mul3_chunk_fu_143_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_lut_mul3_chunk_fu_143_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lut_mul3_chunk_fu_143_ap_ready = ap_const_logic_1)) then 
                    grp_lut_mul3_chunk_fu_143_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_lut_mul3_chunk_fu_164_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lut_mul3_chunk_fu_164_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_lut_mul3_chunk_fu_164_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lut_mul3_chunk_fu_164_ap_ready = ap_const_logic_1)) then 
                    grp_lut_mul3_chunk_fu_164_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_lut_mul3_chunk_fu_185_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lut_mul3_chunk_fu_185_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_lut_mul3_chunk_fu_185_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lut_mul3_chunk_fu_185_ap_ready = ap_const_logic_1)) then 
                    grp_lut_mul3_chunk_fu_185_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_lut_mul3_chunk_fu_80_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lut_mul3_chunk_fu_80_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_lut_mul3_chunk_fu_80_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lut_mul3_chunk_fu_80_ap_ready = ap_const_logic_1)) then 
                    grp_lut_mul3_chunk_fu_80_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_Result_1_reg_362 <= in_V(11 downto 6);
                p_Result_2_reg_367 <= in_V(17 downto 12);
                p_Result_3_reg_372 <= in_V(23 downto 18);
                p_Result_4_reg_377 <= in_V(29 downto 24);
                    this_assign_reg_352(1 downto 0) <= this_assign_fu_216_p1(1 downto 0);
                tmp_reg_357 <= tmp_fu_221_p1;
            end if;
        end if;
    end process;
    this_assign_reg_352(5 downto 2) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state2_on_subcall_done_assign_proc : process(grp_lut_mul3_chunk_fu_80_ap_done, grp_lut_mul3_chunk_fu_101_ap_done, grp_lut_mul3_chunk_fu_122_ap_done, grp_lut_mul3_chunk_fu_143_ap_done, grp_lut_mul3_chunk_fu_164_ap_done, grp_lut_mul3_chunk_fu_185_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((grp_lut_mul3_chunk_fu_185_ap_done = ap_const_logic_0) or (grp_lut_mul3_chunk_fu_164_ap_done = ap_const_logic_0) or (grp_lut_mul3_chunk_fu_143_ap_done = ap_const_logic_0) or (grp_lut_mul3_chunk_fu_122_ap_done = ap_const_logic_0) or (grp_lut_mul3_chunk_fu_101_ap_done = ap_const_logic_0) or (grp_lut_mul3_chunk_fu_80_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(tmp2_fu_340_p2) + unsigned(tmp1_fu_328_p2));
    grp_lut_mul3_chunk_fu_101_ap_start <= grp_lut_mul3_chunk_fu_101_ap_start_reg;
    grp_lut_mul3_chunk_fu_122_ap_start <= grp_lut_mul3_chunk_fu_122_ap_start_reg;
    grp_lut_mul3_chunk_fu_143_ap_start <= grp_lut_mul3_chunk_fu_143_ap_start_reg;
    grp_lut_mul3_chunk_fu_164_ap_start <= grp_lut_mul3_chunk_fu_164_ap_start_reg;
    grp_lut_mul3_chunk_fu_185_ap_start <= grp_lut_mul3_chunk_fu_185_ap_start_reg;
    grp_lut_mul3_chunk_fu_80_ap_start <= grp_lut_mul3_chunk_fu_80_ap_start_reg;
    p_Result_s_fu_206_p4 <= in_V(31 downto 30);
    r_V_1_cast_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_1_fu_296_p3),32));
    r_V_1_fu_296_p3 <= (grp_lut_mul3_chunk_fu_143_ap_return & ap_const_lv12_0);
    r_V_2_cast_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_fu_308_p3),32));
    r_V_2_fu_308_p3 <= (grp_lut_mul3_chunk_fu_164_ap_return & ap_const_lv18_0);
    r_V_3_fu_320_p3 <= (grp_lut_mul3_chunk_fu_185_ap_return & ap_const_lv24_0);
    r_V_cast_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_284_p3),32));
    r_V_fu_284_p3 <= (grp_lut_mul3_chunk_fu_122_ap_return & ap_const_lv6_0);
    this_assign_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_206_p4),6));
    tmp1_fu_328_p2 <= std_logic_vector(unsigned(tmp_4_fu_274_p4) + unsigned(r_V_cast_fu_292_p1));
    tmp2_fu_340_p2 <= std_logic_vector(unsigned(tmp3_fu_334_p2) + unsigned(r_V_1_cast_fu_304_p1));
    tmp3_fu_334_p2 <= std_logic_vector(unsigned(r_V_2_cast_fu_316_p1) + unsigned(r_V_3_fu_320_p3));
    tmp_1_fu_270_p1 <= grp_lut_mul3_chunk_fu_80_ap_return(2 - 1 downto 0);
    tmp_4_fu_274_p4 <= ((tmp_1_fu_270_p1 & ap_const_lv22_0) & grp_lut_mul3_chunk_fu_101_ap_return);
    tmp_fu_221_p1 <= in_V(6 - 1 downto 0);
end behav;
