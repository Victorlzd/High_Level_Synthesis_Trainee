// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module lut_mul3_chunk (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] in_V;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] mem_0_address0;
reg    mem_0_ce0;
wire   [0:0] mem_0_q0;
wire   [5:0] mem_1_address0;
reg    mem_1_ce0;
wire   [0:0] mem_1_q0;
wire   [5:0] mem_2_address0;
reg    mem_2_ce0;
wire   [0:0] mem_2_q0;
wire   [5:0] mem_3_address0;
reg    mem_3_ce0;
wire   [0:0] mem_3_q0;
wire   [5:0] mem_4_address0;
reg    mem_4_ce0;
wire   [0:0] mem_4_q0;
wire   [5:0] mem_5_address0;
reg    mem_5_ce0;
wire   [0:0] mem_5_q0;
wire   [5:0] mem_6_address0;
reg    mem_6_ce0;
wire   [0:0] mem_6_q0;
wire   [5:0] mem_7_address0;
reg    mem_7_ce0;
wire   [0:0] mem_7_q0;
wire   [63:0] tmp_fu_134_p1;
wire    ap_CS_fsm_state2;
wire   [7:0] p_Result_s_fu_146_p9;
reg   [7:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_preg = 8'd0;
end

lut_mul3_chunk_mebkb #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mem_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mem_0_address0),
    .ce0(mem_0_ce0),
    .q0(mem_0_q0)
);

lut_mul3_chunk_mecud #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mem_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mem_1_address0),
    .ce0(mem_1_ce0),
    .q0(mem_1_q0)
);

lut_mul3_chunk_medEe #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mem_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mem_2_address0),
    .ce0(mem_2_ce0),
    .q0(mem_2_q0)
);

lut_mul3_chunk_meeOg #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mem_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mem_3_address0),
    .ce0(mem_3_ce0),
    .q0(mem_3_q0)
);

lut_mul3_chunk_mefYi #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mem_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mem_4_address0),
    .ce0(mem_4_ce0),
    .q0(mem_4_q0)
);

lut_mul3_chunk_meg8j #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mem_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mem_5_address0),
    .ce0(mem_5_ce0),
    .q0(mem_5_q0)
);

lut_mul3_chunk_mehbi #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mem_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mem_6_address0),
    .ce0(mem_6_ce0),
    .q0(mem_6_q0)
);

lut_mul3_chunk_meibs #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mem_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mem_7_address0),
    .ce0(mem_7_ce0),
    .q0(mem_7_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_preg <= p_Result_s_fu_146_p9;
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return = p_Result_s_fu_146_p9;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mem_0_ce0 = 1'b1;
    end else begin
        mem_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mem_1_ce0 = 1'b1;
    end else begin
        mem_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mem_2_ce0 = 1'b1;
    end else begin
        mem_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mem_3_ce0 = 1'b1;
    end else begin
        mem_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mem_4_ce0 = 1'b1;
    end else begin
        mem_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mem_5_ce0 = 1'b1;
    end else begin
        mem_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mem_6_ce0 = 1'b1;
    end else begin
        mem_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mem_7_ce0 = 1'b1;
    end else begin
        mem_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign mem_0_address0 = tmp_fu_134_p1;

assign mem_1_address0 = tmp_fu_134_p1;

assign mem_2_address0 = tmp_fu_134_p1;

assign mem_3_address0 = tmp_fu_134_p1;

assign mem_4_address0 = tmp_fu_134_p1;

assign mem_5_address0 = tmp_fu_134_p1;

assign mem_6_address0 = tmp_fu_134_p1;

assign mem_7_address0 = tmp_fu_134_p1;

assign p_Result_s_fu_146_p9 = {{{{{{{{mem_7_q0}, {mem_6_q0}}, {mem_5_q0}}, {mem_4_q0}}, {mem_3_q0}}, {mem_2_q0}}, {mem_1_q0}}, {mem_0_q0}};

assign tmp_fu_134_p1 = in_V;

endmodule //lut_mul3_chunk
