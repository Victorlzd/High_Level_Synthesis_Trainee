// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="int_32_mul3,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.216000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=148,HLS_SYN_LUT=341,HLS_VERSION=2018_2}" *)

module int_32_mul3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in_V;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] this_assign_fu_216_p1;
reg   [5:0] this_assign_reg_352;
wire   [5:0] tmp_fu_221_p1;
reg   [5:0] tmp_reg_357;
reg   [5:0] p_Result_1_reg_362;
reg   [5:0] p_Result_2_reg_367;
reg   [5:0] p_Result_3_reg_372;
reg   [5:0] p_Result_4_reg_377;
wire    grp_lut_mul3_chunk_fu_80_ap_start;
wire    grp_lut_mul3_chunk_fu_80_ap_done;
wire    grp_lut_mul3_chunk_fu_80_ap_idle;
wire    grp_lut_mul3_chunk_fu_80_ap_ready;
wire   [7:0] grp_lut_mul3_chunk_fu_80_ap_return;
wire    grp_lut_mul3_chunk_fu_101_ap_start;
wire    grp_lut_mul3_chunk_fu_101_ap_done;
wire    grp_lut_mul3_chunk_fu_101_ap_idle;
wire    grp_lut_mul3_chunk_fu_101_ap_ready;
wire   [7:0] grp_lut_mul3_chunk_fu_101_ap_return;
wire    grp_lut_mul3_chunk_fu_122_ap_start;
wire    grp_lut_mul3_chunk_fu_122_ap_done;
wire    grp_lut_mul3_chunk_fu_122_ap_idle;
wire    grp_lut_mul3_chunk_fu_122_ap_ready;
wire   [7:0] grp_lut_mul3_chunk_fu_122_ap_return;
wire    grp_lut_mul3_chunk_fu_143_ap_start;
wire    grp_lut_mul3_chunk_fu_143_ap_done;
wire    grp_lut_mul3_chunk_fu_143_ap_idle;
wire    grp_lut_mul3_chunk_fu_143_ap_ready;
wire   [7:0] grp_lut_mul3_chunk_fu_143_ap_return;
wire    grp_lut_mul3_chunk_fu_164_ap_start;
wire    grp_lut_mul3_chunk_fu_164_ap_done;
wire    grp_lut_mul3_chunk_fu_164_ap_idle;
wire    grp_lut_mul3_chunk_fu_164_ap_ready;
wire   [7:0] grp_lut_mul3_chunk_fu_164_ap_return;
wire    grp_lut_mul3_chunk_fu_185_ap_start;
wire    grp_lut_mul3_chunk_fu_185_ap_done;
wire    grp_lut_mul3_chunk_fu_185_ap_idle;
wire    grp_lut_mul3_chunk_fu_185_ap_ready;
wire   [7:0] grp_lut_mul3_chunk_fu_185_ap_return;
reg    grp_lut_mul3_chunk_fu_80_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_lut_mul3_chunk_fu_101_ap_start_reg;
reg    grp_lut_mul3_chunk_fu_122_ap_start_reg;
reg    grp_lut_mul3_chunk_fu_143_ap_start_reg;
reg    grp_lut_mul3_chunk_fu_164_ap_start_reg;
reg    grp_lut_mul3_chunk_fu_185_ap_start_reg;
wire   [1:0] p_Result_s_fu_206_p4;
wire   [1:0] tmp_1_fu_270_p1;
wire   [13:0] r_V_fu_284_p3;
wire   [19:0] r_V_1_fu_296_p3;
wire   [25:0] r_V_2_fu_308_p3;
wire   [31:0] tmp_4_fu_274_p4;
wire   [31:0] r_V_cast_fu_292_p1;
wire   [31:0] r_V_2_cast_fu_316_p1;
wire   [31:0] r_V_3_fu_320_p3;
wire   [31:0] tmp3_fu_334_p2;
wire   [31:0] r_V_1_cast_fu_304_p1;
wire   [31:0] tmp2_fu_340_p2;
wire   [31:0] tmp1_fu_328_p2;
reg    ap_block_state2_on_subcall_done;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_lut_mul3_chunk_fu_80_ap_start_reg = 1'b0;
#0 grp_lut_mul3_chunk_fu_101_ap_start_reg = 1'b0;
#0 grp_lut_mul3_chunk_fu_122_ap_start_reg = 1'b0;
#0 grp_lut_mul3_chunk_fu_143_ap_start_reg = 1'b0;
#0 grp_lut_mul3_chunk_fu_164_ap_start_reg = 1'b0;
#0 grp_lut_mul3_chunk_fu_185_ap_start_reg = 1'b0;
end

lut_mul3_chunk grp_lut_mul3_chunk_fu_80(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_lut_mul3_chunk_fu_80_ap_start),
    .ap_done(grp_lut_mul3_chunk_fu_80_ap_done),
    .ap_idle(grp_lut_mul3_chunk_fu_80_ap_idle),
    .ap_ready(grp_lut_mul3_chunk_fu_80_ap_ready),
    .in_V(this_assign_reg_352),
    .ap_return(grp_lut_mul3_chunk_fu_80_ap_return)
);

lut_mul3_chunk grp_lut_mul3_chunk_fu_101(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_lut_mul3_chunk_fu_101_ap_start),
    .ap_done(grp_lut_mul3_chunk_fu_101_ap_done),
    .ap_idle(grp_lut_mul3_chunk_fu_101_ap_idle),
    .ap_ready(grp_lut_mul3_chunk_fu_101_ap_ready),
    .in_V(tmp_reg_357),
    .ap_return(grp_lut_mul3_chunk_fu_101_ap_return)
);

lut_mul3_chunk grp_lut_mul3_chunk_fu_122(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_lut_mul3_chunk_fu_122_ap_start),
    .ap_done(grp_lut_mul3_chunk_fu_122_ap_done),
    .ap_idle(grp_lut_mul3_chunk_fu_122_ap_idle),
    .ap_ready(grp_lut_mul3_chunk_fu_122_ap_ready),
    .in_V(p_Result_1_reg_362),
    .ap_return(grp_lut_mul3_chunk_fu_122_ap_return)
);

lut_mul3_chunk grp_lut_mul3_chunk_fu_143(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_lut_mul3_chunk_fu_143_ap_start),
    .ap_done(grp_lut_mul3_chunk_fu_143_ap_done),
    .ap_idle(grp_lut_mul3_chunk_fu_143_ap_idle),
    .ap_ready(grp_lut_mul3_chunk_fu_143_ap_ready),
    .in_V(p_Result_2_reg_367),
    .ap_return(grp_lut_mul3_chunk_fu_143_ap_return)
);

lut_mul3_chunk grp_lut_mul3_chunk_fu_164(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_lut_mul3_chunk_fu_164_ap_start),
    .ap_done(grp_lut_mul3_chunk_fu_164_ap_done),
    .ap_idle(grp_lut_mul3_chunk_fu_164_ap_idle),
    .ap_ready(grp_lut_mul3_chunk_fu_164_ap_ready),
    .in_V(p_Result_3_reg_372),
    .ap_return(grp_lut_mul3_chunk_fu_164_ap_return)
);

lut_mul3_chunk grp_lut_mul3_chunk_fu_185(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_lut_mul3_chunk_fu_185_ap_start),
    .ap_done(grp_lut_mul3_chunk_fu_185_ap_done),
    .ap_idle(grp_lut_mul3_chunk_fu_185_ap_idle),
    .ap_ready(grp_lut_mul3_chunk_fu_185_ap_ready),
    .in_V(p_Result_4_reg_377),
    .ap_return(grp_lut_mul3_chunk_fu_185_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_lut_mul3_chunk_fu_101_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_lut_mul3_chunk_fu_101_ap_start_reg <= 1'b1;
        end else if ((grp_lut_mul3_chunk_fu_101_ap_ready == 1'b1)) begin
            grp_lut_mul3_chunk_fu_101_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_lut_mul3_chunk_fu_122_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_lut_mul3_chunk_fu_122_ap_start_reg <= 1'b1;
        end else if ((grp_lut_mul3_chunk_fu_122_ap_ready == 1'b1)) begin
            grp_lut_mul3_chunk_fu_122_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_lut_mul3_chunk_fu_143_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_lut_mul3_chunk_fu_143_ap_start_reg <= 1'b1;
        end else if ((grp_lut_mul3_chunk_fu_143_ap_ready == 1'b1)) begin
            grp_lut_mul3_chunk_fu_143_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_lut_mul3_chunk_fu_164_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_lut_mul3_chunk_fu_164_ap_start_reg <= 1'b1;
        end else if ((grp_lut_mul3_chunk_fu_164_ap_ready == 1'b1)) begin
            grp_lut_mul3_chunk_fu_164_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_lut_mul3_chunk_fu_185_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_lut_mul3_chunk_fu_185_ap_start_reg <= 1'b1;
        end else if ((grp_lut_mul3_chunk_fu_185_ap_ready == 1'b1)) begin
            grp_lut_mul3_chunk_fu_185_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_lut_mul3_chunk_fu_80_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_lut_mul3_chunk_fu_80_ap_start_reg <= 1'b1;
        end else if ((grp_lut_mul3_chunk_fu_80_ap_ready == 1'b1)) begin
            grp_lut_mul3_chunk_fu_80_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Result_1_reg_362 <= {{in_V[11:6]}};
        p_Result_2_reg_367 <= {{in_V[17:12]}};
        p_Result_3_reg_372 <= {{in_V[23:18]}};
        p_Result_4_reg_377 <= {{in_V[29:24]}};
        this_assign_reg_352[1 : 0] <= this_assign_fu_216_p1[1 : 0];
        tmp_reg_357 <= tmp_fu_221_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_lut_mul3_chunk_fu_185_ap_done == 1'b0) | (grp_lut_mul3_chunk_fu_164_ap_done == 1'b0) | (grp_lut_mul3_chunk_fu_143_ap_done == 1'b0) | (grp_lut_mul3_chunk_fu_122_ap_done == 1'b0) | (grp_lut_mul3_chunk_fu_101_ap_done == 1'b0) | (grp_lut_mul3_chunk_fu_80_ap_done == 1'b0));
end

assign ap_return = (tmp2_fu_340_p2 + tmp1_fu_328_p2);

assign grp_lut_mul3_chunk_fu_101_ap_start = grp_lut_mul3_chunk_fu_101_ap_start_reg;

assign grp_lut_mul3_chunk_fu_122_ap_start = grp_lut_mul3_chunk_fu_122_ap_start_reg;

assign grp_lut_mul3_chunk_fu_143_ap_start = grp_lut_mul3_chunk_fu_143_ap_start_reg;

assign grp_lut_mul3_chunk_fu_164_ap_start = grp_lut_mul3_chunk_fu_164_ap_start_reg;

assign grp_lut_mul3_chunk_fu_185_ap_start = grp_lut_mul3_chunk_fu_185_ap_start_reg;

assign grp_lut_mul3_chunk_fu_80_ap_start = grp_lut_mul3_chunk_fu_80_ap_start_reg;

assign p_Result_s_fu_206_p4 = {{in_V[31:30]}};

assign r_V_1_cast_fu_304_p1 = r_V_1_fu_296_p3;

assign r_V_1_fu_296_p3 = {{grp_lut_mul3_chunk_fu_143_ap_return}, {12'd0}};

assign r_V_2_cast_fu_316_p1 = r_V_2_fu_308_p3;

assign r_V_2_fu_308_p3 = {{grp_lut_mul3_chunk_fu_164_ap_return}, {18'd0}};

assign r_V_3_fu_320_p3 = {{grp_lut_mul3_chunk_fu_185_ap_return}, {24'd0}};

assign r_V_cast_fu_292_p1 = r_V_fu_284_p3;

assign r_V_fu_284_p3 = {{grp_lut_mul3_chunk_fu_122_ap_return}, {6'd0}};

assign this_assign_fu_216_p1 = p_Result_s_fu_206_p4;

assign tmp1_fu_328_p2 = (tmp_4_fu_274_p4 + r_V_cast_fu_292_p1);

assign tmp2_fu_340_p2 = (tmp3_fu_334_p2 + r_V_1_cast_fu_304_p1);

assign tmp3_fu_334_p2 = (r_V_2_cast_fu_316_p1 + r_V_3_fu_320_p3);

assign tmp_1_fu_270_p1 = grp_lut_mul3_chunk_fu_80_ap_return[1:0];

assign tmp_4_fu_274_p4 = {{{tmp_1_fu_270_p1}, {22'd0}}, {grp_lut_mul3_chunk_fu_101_ap_return}};

assign tmp_fu_221_p1 = in_V[5:0];

always @ (posedge ap_clk) begin
    this_assign_reg_352[5:2] <= 4'b0000;
end

endmodule //int_32_mul3
